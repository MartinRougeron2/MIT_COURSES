<!DOCTYPE html><html lang="en">
      
      
        
    
    
    
    

      
      
      <head>
        <meta charset="utf-8">
        <meta name="format-detection" content="telephone=no">  
        
        <title>21.1 Annotated Slides | 21 Parallel Processing | Computation Structures | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
    <!-- Begin Automatic Metadata Insertion -->
    <meta content="6-004-computation-structures-spring-2017" name="WT.cg_n">
    <meta content="21.1 Annotated Slides" name="WT.cg_s">
    <meta content="" name="Description">
    <meta content="Terman, Chris" name="Author">
    <meta content="6.004,computation,computation structure,primitives, gates,instructions,procedures,processes,concurrency,instruction set design,software structure,digital system,MOS transistor,logic gate,combinational circuit,sequential circuit,finite-state machines,computer architecture,programming,RISC processor,Computer Design and Engineering,Digital Systems" name="keywords">
    <meta content="6.004 Computation Structures | 21.1 Annotated Slides" name="Search_Display">
    <meta content="Computer Design and Engineering" itemprop="about">
    <meta content="Digital Systems" itemprop="about">
    <!-- End Automatic Metadata Insertion -->

	<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/search.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
	<link href="../../../common/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
	<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2017/c21/c21s1/">
	<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
	
	
      <script type="text/x-mathjax-config">
		MathJax.Hub.Config({
			TeX: { equationNumbers: { autoNumber: "AMS" } },		
	  		displayAlign: "left",
	  		displayIndent: "2em",
	  		menuSettings: {zoom: "Double-Click", mpContext: true, mpMouse: true},
			errorSettings: { message: ["[Math Error]"] }  		
			});
	</script>
	
	<script type="text/javascript" src="../../../common/scripts/jquery.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script>
	<script type="text/javascript" src="../../../common/scripts/expandy.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=70ac07d7-b28f-4071-816f-d292aba4849f"></script>
	<script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js?config=TeX-MML-AM_SVG"></script>
	
	
	
    
    
    
    
    
    
    
      
       
		 

        
        
        

        
        
        
        
        
        
        
        
        
      </head>
    <body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW">
<table class="social">
    <tbody>
        <tr>
            <td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>  <a aria-label="Instagram" href="https://www.instagram.com/mitocw/"><img src="https://ocw.mit.edu/images/icon_ig.png" alt="Click to visit our Instagram page."></a> <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="https://ocw.mit.edu/images/icon_twitter.png" alt="Click to visit our Twitter feed."></a><a aria-label="YouTube" href="https://www.youtube.com/mitocw" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_yt.png" alt="Click to visit our YouTube page."></a><span style="font-size: 12.208px;">   </span><a aria-label="Open Matters blog on WordPress" href="https://www.ocw-openmatters.org/" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_wp.png" alt="Click to visit our blog on WordPress."></a>
</td>
        </tr>
    </tbody>
</table>
</aside><nav aria-label="Help Links" class="helplinks">     <a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/about/contactus.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>

<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75">
<div class="portletStaticText portlet-static-mega-menu"><div><nav id="mega" class="grid_8 alpha" aria-label="Site">
<ul id="menu" role="presentation">
    <li id="menu_home">
<a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
</li>
    <!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses">
<a href="#" aria-hidden="true">FIND COURSES</a><!-- Begin 5 columns Item -->
    <div class="dropdown_5columns-a mega-courses">
    <div class="col_1a">
    <div class="row_1a">
<nav aria-labelledby="mm-find-courses-by">     <span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
    <ul class="find_by" role="presentation">
        <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
    </ul>
    </nav>     <nav aria-labelledby="mm-collections">     <span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
        <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
        <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
        <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    </ul>
    </nav>     <nav class="col_1b" aria-labelledby="mm-translated-courses">     <span id="mm-translated-courses" class="nav" aria-hidden="true" style="line-height: 1.3;">Cross-Disciplinary Topic Lists</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
        <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
        <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
        <li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
        <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
        <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
    </ul>
    </nav>
</div>
    <div class="row_1b"><nav aria-labelledby="mm-cross-disciplinary-topic-lists">     <span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Translated Courses</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
    </ul>
    </nav></div>
    </div>
    </div>
    </li>
    <li id="drop_2">
<a href="#" aria-label="For Educators">For Educators</a>
    <div class="dropdown_1column-a" style="width: 270px;"><nav aria-labelledby="mm-find-courses-by">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/chalk-radio-podcast">Chalk Radio Podcast</a></li>
        <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
        <li><a href="https://openlearning.mit.edu/campus/digital-innovations/">Residential Digital Innovations </a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_3">
<a href="#" aria-hidden="true">Give Now</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="Donate">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
        <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
        <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
        <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
        <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_4">
<a href="#" aria-hidden="true">About</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="About">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
        <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
        <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
        <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
        <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
        <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
    </ul>
    </nav></div>
    </li>
</ul>
</nav></div></div>

</div>





<!--googleoff: index-->
<script>
  (function() {
	var cx = '012626166551961672889:owjdpuboktq';
	var gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(gcse, s);
  })();
  window.onload = function(){
	document.getElementById('gsc-i-id1').placeholder = 'Search';	
  };

$(document).ready(function(){

$('.advanceSearch a').keydown(function(event){showSearchTips($(this),event);})
$('#searchTipsModal').keydown(function(event){showSearchTips($(this),event);})

function showSearchTips(obj,evt) {
// if pressed enter key
	if ( evt.which == 13 || evt.which == 32) {
		showModal();
		ga('send', 'pageview', "AdvanceSearch");
		$(".advanceSearch a").attr('aria-expanded', 'true');
		$('.searchTipsModal').focus();
		evt.preventDefault();
		}
	if ( evt.which == 27 ) {
		hideModal();
		$(".advanceSearch a").attr('aria-expanded', 'false');
		var modal = document.getElementById('searchTipsModal');
		modal.style.display = "none";
		$(".advanceSearch a").focus();
		evt.preventDefault();
		}
}

});
function showModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "block";
	ga('send', 'pageview', "AdvanceSearch");
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", true);
	window.setTimeout(function () {
    document.getElementById('searchTipsModal').focus(); }, 0);
}

function hideModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "none";
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", false);
}
</script>
<div id="search" role="search" class="grid_4 omega">
    	<table class="search">
				<tbody>
					<tr>
						<td><div class="searchboxheader"><searchbox-only resultsurl="/search/ocwsearch.htm"></searchbox-only></div></td>
						<td>
							<div class="advanceSearch">
								<a id="searchTipsBtn" onclick="showModal();" href="#" role="button" aria-label="search tips" aria-expanded="false" aria-describedby="searchtips">Search Tips</a>

								<!-- The Modal -->
								<div id="searchTipsModal" class="modal" tabindex="-1">
								  <!-- Modal content -->
									<div class="modal-content">
										<div class="modal-body">
											<button class="close" onclick="hideModal();" aria-label="close">X</button>
											<span>
												<b>Exclude words from your search</b>
												<br>Put - in front of a word you want to leave out. For example, jaguar speed -car
												<br><br>
												<b>Search for an exact match</b>
												<br>Put a word or phrase inside quotes. For example, "tallest building".
												<br><br>
												<b>Search for wildcards or unknown words</b>
												<br>Put a * in your word or phrase where you want to leave a placeholder. For example, "largest * in the world".
												<br><br>
												<b>Search within a range of numbers</b>
												<br>Put .. between two numbers. For example, camera $50..$100.
												<br><br>
												<b>Combine searches</b>
												<br>Put "OR" between each search query. For example,  marathon OR race.
												<br><br>
											</span>
										</div>
								  </div>
								</div>
							</div>
						</td>
					</tr>
				</tbody>
		</table>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end -->
			
		<div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb">
                      <p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Computation Structures</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/c21/index.htm">21 Parallel Processing</a>
            
                »
                
            
            
         
    
    
        
            
            
            21.1 Annotated Slides
         
    
</p>

                 </nav>
                 <div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            21.1 Annotated Slides
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course">
               			 



<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script>
<!--Left Nav Starts -->


	<ul>			  
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="instructor-insights" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuinstructor-insights'); toggleClass('instructor-insights'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/instructor-insights/index.htm" class="">
		                  Instructor Insights  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuinstructor-insights" class="">
					               
		            <li class="">
				 		<a href="../../../contents/instructor-insights/an-interview-with-christopher-terman-on-teaching-computation-structures/index.htm" class="">An Interview with Christopher Terman</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/meet-the-educator/index.htm" class="">Meet the Educator</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/when-students-come-with-different-backgrounds-offer-a-buffet-of-learning-materials/index.htm" class="">A Buffet of Learning Materials</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-the-mitx-platform-to-structure-learning-sequences/index.htm" class="">Using the MITx Platform</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/conceptualizing-online-courses-as-educational-labs/index.htm" class="">Online Courses as Educational Labs</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/teaching-large-lecture-classes-the-importance-of-stories-and-disfluency/index.htm" class="">The Importance of Stories and Disfluency</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-teaching-team-from-lab-assistants-to-faculty-members-the-range-of-experience-is-key/index.htm" class="">A Teaching Team with a Range of Experience</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/with-online-fora-being-stuck-is-just-a-10-minute-process/index.htm" class="">Being Stuck Is a 10-Minute Process</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-browser-based-programming-environments-to-engage-students-in-the-practice-of-engineering/index.htm" class="">Browser-Based Programming Environments</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/a-common-challenge-students-face-developing-confidence-in-systematically-solving-problems/index.htm" class="">Confidence in Problem-Solving</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/hallway-learning-the-value-of-common-learning-experiences-at-the-undergraduate-level/index.htm" class="">The Value of Common Experiences</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-fun-is-in-the-doing-of-the-puzzle-self-paced-mastery-learning-and-moving-beyond/index.htm" class="">Self-Paced Mastery Learning</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/engineering-learning-materials-an-iterative-process/index.htm" class="">Engineering Learning Materials</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c1" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc1'); toggleClass('c1'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c1/index.htm" class="">
		                  1 Basics of Information  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc1" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c1/c1s1/index.htm" class="">1.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s2/index.htm" class="">1.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s3/index.htm" class="">1.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c2" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc2'); toggleClass('c2'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c2/index.htm" class="">
		                  2 The Digital Abstraction  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc2" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c2/c2s1/index.htm" class="">2.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s2/index.htm" class="">2.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s3/index.htm" class="">2.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c3" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc3'); toggleClass('c3'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c3/index.htm" class="">
		                  3 CMOS  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc3" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c3/c3s1/index.htm" class="">3.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s2/index.htm" class="">3.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s3/index.htm" class="">3.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c4" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc4'); toggleClass('c4'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c4/index.htm" class="">
		                  4 Combinational Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc4" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c4/c4s1/index.htm" class="">4.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s2/index.htm" class="">4.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s3/index.htm" class="">4.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c5" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc5'); toggleClass('c5'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c5/index.htm" class="">
		                  5 Sequential Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc5" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c5/c5s1/index.htm" class="">5.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s2/index.htm" class="">5.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s3/index.htm" class="">5.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c6" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc6'); toggleClass('c6'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c6/index.htm" class="">
		                  6 Finite State Machines  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc6" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c6/c6s1/index.htm" class="">6.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s2/index.htm" class="">6.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s3/index.htm" class="">6.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c7" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc7'); toggleClass('c7'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c7/index.htm" class="">
		                  7 Performance Measures  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc7" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c7/c7s1/index.htm" class="">7.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s2/index.htm" class="">7.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s3/index.htm" class="">7.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c8" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc8'); toggleClass('c8'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c8/index.htm" class="">
		                  8 Design Tradeoffs  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc8" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c8/c8s1/index.htm" class="">8.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c8/c8s2/index.htm" class="">8.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c9" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc9'); toggleClass('c9'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c9/index.htm" class="">
		                  9 Designing an Instruction Set  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc9" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c9/c9s1/index.htm" class="">9.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s2/index.htm" class="">9.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s3/index.htm" class="">9.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c10" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc10'); toggleClass('c10'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c10/index.htm" class="">
		                  10 Assembly Language, Models of Computation  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc10" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c10/c10s1/index.htm" class="">10.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c10/c10s2/index.htm" class="">10.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c11" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc11'); toggleClass('c11'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c11/index.htm" class="">
		                  11 Compilers  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc11" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c11/c11s1/index.htm" class="">11.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s2/index.htm" class="">11.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s3/index.htm" class="">11.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c12" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc12'); toggleClass('c12'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c12/index.htm" class="">
		                  12 Procedures and Stacks  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc12" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c12/c12s1/index.htm" class="">12.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s2/index.htm" class="">12.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s3/index.htm" class="">12.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c13" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc13'); toggleClass('c13'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c13/index.htm" class="">
		                  13 Building the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc13" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c13/c13s1/index.htm" class="">13.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s2/index.htm" class="">13.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s3/index.htm" class="">13.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c14" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc14'); toggleClass('c14'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c14/index.htm" class="">
		                  14 Caches and the Memory Hierarchy  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc14" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c14/c14s1/index.htm" class="">14.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s2/index.htm" class="">14.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s3/index.htm" class="">14.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c15" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc15'); toggleClass('c15'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c15/index.htm" class="">
		                  15 Pipelining the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc15" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c15/c15s1/index.htm" class="">15.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s2/index.htm" class="">15.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s3/index.htm" class="">15.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c16" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc16'); toggleClass('c16'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c16/index.htm" class="">
		                  16 Virtual Memory  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc16" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c16/c16s1/index.htm" class="">16.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s2/index.htm" class="">16.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s3/index.htm" class="">16.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c17" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc17'); toggleClass('c17'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c17/index.htm" class="">
		                  17 Virtualizing the Processor  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc17" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c17/c17s1/index.htm" class="">17.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s2/index.htm" class="">17.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s3/index.htm" class="">17.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c18" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc18'); toggleClass('c18'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c18/index.htm" class="">
		                  18 Devices and Interrupts  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc18" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c18/c18s1/index.htm" class="">18.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s2/index.htm" class="">18.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s3/index.htm" class="">18.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c19" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc19'); toggleClass('c19'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c19/index.htm" class="">
		                  19 Concurrency and Synchronization  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc19" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c19/c19s1/index.htm" class="">19.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s2/index.htm" class="">19.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s3/index.htm" class="">19.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c20" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc20'); toggleClass('c20'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c20/index.htm" class="">
		                  20 System-level Communication  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc20" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c20/c20s1/index.htm" class="">20.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c20/c20s2/index.htm" class="">20.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c21" class="mC">
						<a href="#" class="" onclick="toggleMenu('menuc21'); toggleClass('c21'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Collapse Menu" title="Collapse Menu">
		                </a>
		                <a href="../../../contents/c21/index.htm" class="">
		                  21 Parallel Processing  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc21" class="selected">
					               
		            <li class="selected">
				 		<a href="../../../contents/c21/c21s1/index.htm" class="selected">21.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c21/c21s2/index.htm" class="">21.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>


<!--Left Nav Ends -->









           		     </nav>
           		     <main id="course_inner_section" aria-labelledby="section_title">
           		     	
	       		     	<ul class="navigation pagination">     <li id="top_bck_btn"><a href="../../../contents/c21/index.htm">&lt;<span>Parallel Processing</span></a></li>     <li id="flp_btn_1" class="button_selected"><a href="../../../contents/c21/c21s1/index.htm">21.1.1<span>Annotated slides</span></a></li>     <li id="top_continue_btn"><a href="../../../contents/c21/c21s2/index.htm">&gt;<span>Topic Videos</span></a></li> </ul> <p><style type="text/css">
.toc {
  margin-left: 2em;
}
.lecslide {
  margin-top: 1em;
  margin-bottom: 1em;
  border-top: 0.5px solid #808080;
  padding-top: 1em;
  text-align: center;
}
.lecslideimg {
  width: 5in;
  border: 1px solid black;
}
</style></p> <h1>L21: Parallel Processing</h1> <div class="toc"><ol>     <li style="margin-bottom:0.1em;"><a href="#1">Processor Performance</a></li>     <li style="margin-bottom:0.1em;"><a href="#2">5-Stage Pipelined Processors</a></li>     <li style="margin-bottom:0.1em;"><a href="#3">Improving 5-Stage Pipeline Performance</a></li>     <li style="margin-bottom:0.1em;"><a href="#4">Limits to Pipeline Depth</a></li>     <li style="margin-bottom:0.1em;"><a href="#5">Improving 5-Stage Pipeline Performance</a></li>     <li style="margin-bottom:0.1em;"><a href="#6">Instruction-level Parallelism (ILP)</a></li>     <li style="margin-bottom:0.1em;"><a href="#7">Wider or Superscalar Pipelines</a></li>     <li style="margin-bottom:0.1em;"><a href="#8">A Modern Out-of-Order Superscalar Processor</a></li>     <li style="margin-bottom:0.1em;"><a href="#9">Limits to Single-Processor Performance</a></li>     <li style="margin-bottom:0.1em;"><a href="#10">Data-Level Parallelism</a></li>     <li style="margin-bottom:0.1em;"><a href="#11">Vector Code Example</a></li>     <li style="margin-bottom:0.1em;"><a href="#12">Data-Dependent Vector Operations</a></li>     <li style="margin-bottom:0.1em;"><a href="#13">Vector Processing Implementations</a></li>     <li style="margin-bottom:0.1em;"><a href="#14">Multicore Processors</a></li>     <li style="margin-bottom:0.1em;"><a href="#15">Amdahl’s Law</a></li>     <li style="margin-bottom:0.1em;"><a href="#16">Amdahl’s Law and Parallelism</a></li>     <li style="margin-bottom:0.1em;"><a href="#17">Thread-Level Parallelism</a></li>     <li style="margin-bottom:0.1em;"><a href="#18">Multicore Caches</a></li>     <li style="margin-bottom:0.1em;"><a href="#19">What Are the Possible Outcomes</a></li>     <li style="margin-bottom:0.1em;"><a href="#20">Uniprocessor Outcome</a></li>     <li style="margin-bottom:0.1em;"><a href="#21">Sequential Consistency</a></li>     <li style="margin-bottom:0.1em;"><a href="#22">Alternatives to Sequential Consistency?</a></li>     <li style="margin-bottom:0.1em;"><a href="#23">Fix: “Snoopy” Cache Coherence Protocol</a></li>     <li style="margin-bottom:0.1em;"><a href="#24">Example: MESI Cache Coherence Protocol</a></li>     <li style="margin-bottom:0.1em;"><a href="#25">The Cache Has Two Customers!</a></li>     <li style="margin-bottom:0.1em;"><a href="#26">MESI Activity Diagram</a></li>     <li style="margin-bottom:0.1em;"><a href="#27">Cache Coherence in Action</a></li>     <li style="margin-bottom:0.1em;"><a href="#28">Parallel Processing Summary</a></li> </ol></div> <p><strong>Content of the following slides is described in the surrounding text.</strong></p> <div class="lecslide"><a name="1"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide02.png" alt=""></a></div> <p>The modern world has an insatiable appetite for computation, so system   architects are always thinking about ways to make programs run faster.   The running time of a program is the product of three terms:</p> <p>The number of instructions in the program, multiplied by the average   number of processor cycles required to execute each instruction (CPI),   multiplied by the time required for each processor cycle (\(t_{\textrm{CLK}}\)).</p> <p>To decrease the running time we need to decrease one or more of these   terms.  The number of instructions per program is determined by the   ISA and by the compiler that produced the sequence of assembly   language instructions to be executed.  Both are fair game, but for   this discussion, let’s work on reducing the other two terms.</p> <p>As we’ve seen, pipelining reduces \(t_{\textrm{CLK}}\) by dividing instruction   execution into a sequence of steps, each of which can complete its   task in a shorter \(t_{\textrm{CLK}}\).  What about reducing CPI?</p> <p>In our 5-stage pipelined implementation of the Beta, we designed the   hardware to complete the execution of one instruction every clock   cycle, so CPI_ideal is 1.  But sometimes the hardware has to introduce   “NOP bubbles” into the pipeline to delay execution of a pipeline   stage if the required operation couldn’t (yet) be completed.  This   happens on taken branch instructions, when attempting to immediately   use a value loaded from memory by the LD instruction, and when waiting   for a cache miss to be satisfied from main memory.  CPI_stall accounts   for the cycles lost to the NOPs introduced into the pipeline.  Its   value depends on the frequency of taken branches and immediate use of   LD results.  Typically it’s some fraction of a cycle. For example, if   a 6-instruction loop with a LD takes 8 cycles to complete, CPI_stall   for the loop would be 2/6, <i>i.e.</i>, 2 extra cycles for every 6   instructions.</p> <div class="lecslide"><a name="2"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide03.png" alt=""></a></div> <p>Our classic 5-stage pipeline is an effective compromise that allows   for a substantial reduction of \(t_{\textrm{CLK}}\) while keeping CPI_stall to a   reasonably modest value.</p> <p>There is room for improvement.  Since each stage is working on one   instruction at a time, CPI_ideal is 1.</p> <p>Slow operations — <i>e.g.</i>, completing a multiply in the ALU stage, or   accessing a large cache in the IF or MEM stages — force \(t_{\textrm{CLK}}\) to be   large to accommodate all the work that has to be done in one cycle.</p> <p>The order of the instructions in the pipeline is fixed.  If, say, a LD   instruction is delayed in the MEM stage because of a cache miss, all   the instructions in earlier stages are also delayed even though their   execution may not depend on the value produced by the LD.  The order   of instructions in the pipeline always reflects the order in which   they were fetched by the IF stage.</p> <p>Let’s look into what it would take to relax these constraints and   hopefully improve program runtimes.</p> <div class="lecslide"><a name="3"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide04.png" alt=""></a></div> <p>Increasing the number of pipeline stages should allow us to decrease   the clock cycle time.  We’d add stages to break up performance   bottlenecks, <i>e.g.</i>, adding additional pipeline stages (MEM1 and MEM2) to   allow a longer time for memory operations to complete.  This comes at   cost to CPI_stall since each additional MEM stage means that more NOP   bubbles have to be introduced when there’s a LD data hazard.  Deeper   pipelines mean that the processor will be executing more instructions   in parallel.</p> <div class="lecslide"><a name="4"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide05.png" alt=""></a></div> <p>Let’s interrupt enumerating our performance shopping list to think   about limits to pipeline depth.</p> <p>Each additional pipeline stage includes some additional overhead costs   to the time budget.  We have to account for the propagation, setup,   and hold times for the pipeline registers.  And we usually have to   allow a bit of extra time to account for clock skew, <i>i.e.</i>, the   difference in arrival time of the clock edge at each register.  And,   finally, since we can’t always divide the work exactly evenly between   the pipeline stages, there will be some wasted time in the stages that   have less work.  We’ll capture all of these effects as an additional   per-stage time overhead of O.</p> <p>If the original clock period was T, then with N pipeline stages, the   clock period will be T/N + O.</p> <p>At the limit, as N becomes large, the speedup approaches T/O.  In   other words, the overhead starts to dominate as the time spent on work   in each stage becomes smaller and smaller.  At some point adding   additional pipeline stages has almost no impact on the clock period.</p> <p>As a data point, the Intel Core-2 x86 chips (nicknamed “Nehalem”)   have a 14-stage execution pipeline.</p> <div class="lecslide"><a name="5"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide06.png" alt=""></a></div> <p>Okay, back to our performance shopping list...</p> <p>There may be times we can arrange to execute two or more instructions   in parallel, assuming that their executions are independent from each   other.  This would increase CPI_ideal at the cost of increasing the   complexity of each pipeline stage to deal with concurrent execution of   multiple instructions.</p> <p>If there’s an instruction stalled in the pipeline by a data hazard,   there may be following instructions whose execution could still   proceed.  Allowing instructions to pass each other in the pipeline is   called out-of-order execution.  We’d have to be careful to ensure that   changing the execution order didn’t affect the values produced by the   program.</p> <p>More pipeline stages and wider pipeline stages increase the amount of   work that has to be discarded on control hazards, potentially   increasing CPI_stall.  So it’s important to minimize the number of   control hazards by predicting the results of a branch (<i>i.e.</i>, taken or   not taken) so that we increase the chances that the instructions in   the pipeline are the ones we’ll want to execute.</p> <p>Our ability to exploit wider pipelines and out-of-order execution   depends on finding instructions that can be executed in parallel or in   different orders.  Collectively these properties are called   “instruction-level parallelism” (ILP).</p> <div class="lecslide"><a name="6"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide07.png" alt=""></a></div> <p>Here’s an example that will let us explore the amount of ILP that   might be available.  On the left is an unoptimized loop that computes   the product of the first N integers.  On the right, we’ve rewritten   the code, placing instructions that could be executed concurrently on   the same line.</p> <p>First notice the red line following the BF instruction.  Instructions   below the line should only be executed if the BF is *not* taken.  That   doesn’t mean we couldn’t start executing them before the results of   the branch are known, but if we executed them before the branch, we   would have to be prepared to throw away their results if the branch   was taken.</p> <p>The possible execution order is constrained by the read-after-write   (RAW) dependencies shown by the red arrows.  We recognize these as the   potential data hazards that occur when an operand value for one   instruction depends on the result of an earlier instruction.  In our   5-stage pipeline, we were able to resolve many of these hazards by   bypassing values from the ALU, MEM, and WB stages back to the RF stage   where operand values are determined.</p> <p>Of course, bypassing will only work when the instruction has been   executed so its result is available for bypassing!  So in this case,   the arrows are showing us the constraints on execution order that   guarantee bypassing will be possible.</p> <p>There are other constraints on execution order.  The green arrow   identifies a write-after-write (WAW) constraint between two   instructions with the same destination register.  In order to ensure   the correct value is in R2 at the end of the loop, the LD(r,R2)   instruction has to store its result into the register file after the   result of the CMPLT instruction is stored into the register file.</p> <p>Similarly, the blue arrow shows a write-after-read (WAR) constraint   that ensures that the correct values are used when accessing a   register.  In this case, LD(r,R2) must store into R2 after the Ra   operand for the BF has been read from R2.</p> <p>As it turns out, WAW and WAR constraints can be eliminated if we give   each instruction result a unique register name.  This can actually be   done relatively easily by the hardware by using a generous supply of   temporary registers, but we won’t go into the details of renaming   here.  The use of temporary registers also makes it easy to discard   results of instructions executed before we know the outcomes of   branches.</p> <p>In this example, we discovered that the potential concurrency was   actually pretty good for the instructions following the BF.</p> <div class="lecslide"><a name="7"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide08.png" alt=""></a></div> <p>To take advantage of this potential concurrency, we’ll need to modify   the pipeline to execute some number N of instructions in parallel.  If   we can sustain that rate of execution, CPI_ideal would then be 1/N   since we’d complete the execution of N instructions in each clock   cycle as they exited the final pipeline stage.</p> <p>So what value should we choose for N?  Instructions that are executed   by different ALU hardware are easy to execute in parallel, <i>e.g.</i>, ADDs   and SHIFTs, or integer and floating-point operations.  Of course, if   we provided multiple adders, we could execute multiple integer   arithmetic instructions concurrently.  Having separate hardware for   address arithmetic (called LD/ST units) would support concurrent   execution of LD/ST instructions and integer arithmetic instructions.</p> <p>This set of lecture slides from Duke gives a nice overview of   techniques used in each pipeline stage to support concurrent   execution.</p> <p>Basically by increasing the number of functional units in the ALU and   the number of memory ports on the register file and main memory, we   would have what it takes to support concurrent execution of multiple   instructions.  So, what’s the right tradeoff between increased circuit   costs and increased concurrency?</p> <p>As a data point, the Intel Nehalem core can complete up to 4   micro-operations per cycle, where each micro-operation corresponds to   one of our simple RISC instructions.</p> <div class="lecslide"><a name="8"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide09.png" alt=""></a></div> <p>Here’s a simplified diagram of a modern out-of-order superscalar   processor.</p> <p>Instruction fetch and decode handles, say, 4 instructions at a time.   The ability to sustain this execution rate depends heavily on the   ability to predict the outcome of branch instructions, ensuring that   the wide pipeline will be mostly filled with instructions we actually   want to execute.  Good branch prediction requires the use of the   history from previous branches and there’s been a lot of cleverness   devoted to getting good predictions from the least amount of hardware!   If you’re interested in the details, search for “branch predictor”   on Wikipedia.</p> <p>The register renaming happens during instruction decode, after which   the instructions are ready to be dispatched to the functional units.</p> <p>If an instruction needs the result of an earlier instruction as an   operand, the dispatcher has identified which functional unit will be   producing the result.  The instruction waits in a queue until the   indicated functional unit produces the result and when all the operand   values are known, the instruction is finally taken from the queue and   executed.  Since the instructions are executed by different functional   units as soon as their operands are available, the order of execution   may not be the same as in the original program.</p> <p>After execution, the functional units broadcast their results so that   waiting instructions know when to proceed.  The results are also   collected in a large reorder buffer so that they can be retired   (<i>i.e.</i>, write their results in the register file) in the correct order.</p> <p>Whew!  There’s a lot of circuitry involved in keeping the functional   units fed with instructions, knowing when instructions have all their   operands, and organizing the execution results into the correct order.   So how much speed up should we expect from all this machinery?  The   effective CPI is very program-specific, depending as it does on cache   hit rates, successful branch prediction, available ILP, and so on.   Given the architecture described here the best speed up we could hope   for is a factor of 4.  Googling around, it seems that the reality is   an average speed-up of 2, maybe slightly less, over what would be   achieved by an in-order, single-issue processor.</p> <div class="lecslide"><a name="9"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide10.png" alt=""></a></div> <p>What can we expect for future performance improvements in   out-of-order, superscalar pipelines?</p> <p>Increases in pipeline depth can cause CPI_stall and timing overheads   to rise.  At the current pipeline depths the increase in CPI_stall is   larger than the gains from decreased \(t_{\textrm{CLK}}\) and so further increases in   depth are unlikely.</p> <p>A similar tradeoff exists between using more out-of-order execution to   increase ILP and the increase in CPI_stall caused by the impact of   mis-predicted branches and the inability to run main memories any   faster.</p> <p>Power consumption increases more quickly than the performance gains   from lower \(t_{\textrm{CLK}}\) and additional out-of-order execution logic.</p> <p>The additional complexity required to enable further improvements in   branch prediction and concurrent execution seems very daunting.</p> <p>All of these factors suggest that is unlikely that we’ll see   substantial future improvements in the performance of out-of-order   superscalar pipelined processors.</p> <p>So system architects have turned their attention to exploiting   data-level parallelism (DLP) and thread-level parallelism (TLP).   These are our next two topics.</p> <div class="lecslide"><a name="10"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide11.png" alt=""></a></div> <p>For some applications, data naturally comes in vector or matrix form.   For example, a vector of digitized samples representing an audio   waveform over time, or an matrix of pixel colors in a 2D image from a   camera.  When processing that data, it’s common to perform the same   sequence of operations on each data element.  The example code shown   here is computing a vector sum, where each component of one vector is   added to the corresponding component of another vector.</p> <p>By replicating the datapath portion of our CPU, we can design   special-purpose vector processors capable of performing the same   operation on many data elements in parallel. Here we see that the   register file and ALU have been replicated and the control signals   from decoding the current instruction are shared by all the datapaths.   Data is fetched from memory in big blocks (very much like fetching a   cache line) and the specified register in each datapath is loaded with   one of the words from the block.  Similarly each datapath can   contribute a word to be stored as a contiguous block in main memory.   In such machines, the width of the data buses to and from main memory   is many words wide, so a single memory access provides data for all   the datapaths in parallel.</p> <p>Executing a single instruction on a machine with N datapaths is   equivalent to executing N instructions on a conventional machine with   a single datapath.  The result achieves a lot of parallelism without   the complexities of out-of-order superscalar execution.</p> <div class="lecslide"><a name="11"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide12.png" alt=""></a></div> <p>Suppose we had a vector processor with 16 datapaths.  Let’s compare   its performance on a vector-sum operation to that of a conventional   pipelined Beta processor.</p> <p>Here’s the Beta code, carefully organized to avoid any data hazards   during execution.  There are 9 instructions in the loop, taking 10   cycles to execute if we count the NOP introduced into the pipeline   when the BNE at the end of the loop is taken.  It takes 160 cycles to   sum all 16 elements assuming no additional cycles are required due to   cache misses.</p> <p>And here’s the corresponding code for a vector processor where we’ve   assumed constant-sized 16-element vectors.  Note that “V” registers   refer to a particular location in the register file associated with   each datapath, while the “R” registers are the conventional Beta   registers used for address computations, etc.  It would only take 4   cycles for the vector processor to complete the desired operations, a   speed-up of 40.</p> <p>This example shows the best-possible speed-up.  The key to a good   speed-up is our ability to “vectorize” the code and take advantage   of all the datapaths operating in parallel.  This isn’t possible for   every application, but for tasks like audio or video encoding and   decoding, and all sorts of digital signal processing, vectorization is   very doable.  Memory operations enjoy a similar performance   improvement since the access overhead is amortized over large blocks   of data.</p> <div class="lecslide"><a name="12"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide13.png" alt=""></a></div> <p>You might wonder if it’s possible to efficiently perform   data-dependent operations on a vector processor.  Data-dependent   operations appear as conditional statements on conventional machines,   where the body of the statement is executed if the condition is true.   If testing and branching is under the control of the single   instruction execution engine, how can we take advantage of the   parallel datapaths?</p> <p>The trick is provide each datapath with a local predicate flag.  Use a   vectorized compare instruction (CMPLT.V) to perform the a[i] &lt; b[i]   comparisons in parallel and remember the result locally in each   datapath’s predicate flag.  Then extend the vector ISA to include   “predicated instructions” which check the local predicate to see if   they should execute or do nothing.  In this example, ADDC.V.iftrue   only performs the ADDC on the local data if the local predicate flag   is true.</p> <p>Instruction predication is also used in many non-vector architectures   to avoid the execution-time penalties associated with mis-predicted   conditional branches.  They are particularly useful for simple   arithmetic and boolean operations (<i>i.e.</i>, very short instruction   sequences) that should be executed only if a condition is met.  The   x86 ISA includes a conditional move instruction, and in the 32-bit ARM   ISA almost all instructions can be conditionally executed.</p> <div class="lecslide"><a name="13"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide14.png" alt=""></a></div> <p>The power of vector processors comes from having 1 instruction   initiate N parallel operations on N pairs of operands.</p> <p>Most modern CPUs incorporate vector extensions that operate in   parallel on 8-, 16-, 32- or 64-bit operands organized as blocks of   128-, 256-, or 512-bit data.  Often all that’s needed is some simple   additional logic on an ALU designed to process full-width operands.   The parallelism is baked into the vector program, not discovered   on-the-fly by the instruction dispatch and execution machinery.   Writing the specialized vector programs is a worthwhile investment for   certain library functions which see a lot use in processing today’s   information streams with their heavy use of images, and A/V material.</p> <p>Perhaps the best example of architectures with many datapaths   operating in parallel are the graphics processing units (GPUs) found   in almost all computer graphics systems.  GPU datapaths are typically   specialized for 32- and 64-bit floating point operations found in the   algorithms needed to display in real-time a 3D scene represented as   billions of triangular patches as a 2D image on the computer screen.   Coordinate transformation, pixel shading and antialiasing, texture   mapping, etc., are examples of “embarrassingly parallel”   computations where the parallelism comes from having to perform the   same computation independently on millions of different data objects.   Similar problems can be found in the fields of bioinformatics, big   data processing, neural net emulation used in deep machine learning,   and so on.  Increasingly, GPUs are used in many interesting scientific   and engineering calculations and not just as graphics engines.</p> <p>Data-level parallelism provides significant performance improvements   in a variety of useful situations.  So current and future ISAs will   almost certainly include support for vector operations.</p> <div class="lecslide"><a name="14"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide15.png" alt=""></a></div> <p>In discussing out-of-order superscalar pipelined CPUs we commented   that the costs grow very quickly relative the to performance gains,   leading to the cost-performance curve shown here.  If we move down the   curve, we can arrive at more efficient architectures that give, say,   1/2 the performance at a 1/4 of the cost.</p> <p>When our applications involve independent computations that can be   performed in a parallel, it may be that we would be able to use two   cores to provide the same performance as the original expensive core,   but a fraction of the cost. If the available parallelism allows us to   use additional cores, we’ll see a linear relationship between   increased performance vs. increased cost.  The key, of course, is that   desired computations can be divided into multiple tasks that can run   independently, with little or no need for communication or   coordination between the tasks.</p> <p>What is the optimal tradeoff between core cost and the number of   cores?  If our computation is arbitrarily divisible without incurring   additional overhead, then we would continue to move down the curve   until we found the cost-performance point that gave us the desired   performance at the least cost.  In reality, dividing the computation   across many cores does involve some overhead, <i>e.g.</i>, distributing the   data and code, then collecting and aggregating the results, so the   optimal tradeoff is harder to find.  Still, the idea of using a   larger number of smaller, more efficient cores seems attractive.</p> <div class="lecslide"><a name="15"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide16.png" alt=""></a></div> <p>Many applications have some computations that can be performed in   parallel, but also have computations that won’t benefit from   parallelism.  To understand the speedup we might expect from   exploiting parallelism, it’s useful to perform the calculation   proposed by computer scientist Gene Amdahl in 1967, now known as   Amdahl’s Law.</p> <p>Suppose we’re considering an enhancement that speeds up some fraction   F of the task at hand by a factor of S.  As shown in the figure, the   gray portion of the task now takes F/S of the time that it used to   require.</p> <p>Some simple arithmetic lets us calculate the overall speedup we get   from using the enhancement.  One conclusion we can draw is that we’ll   benefit the most from enhancements that affect a large portion of the   required computations, <i>i.e.</i>, we want to make F as large a possible.</p> <div class="lecslide"><a name="16"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide17.png" alt=""></a></div> <p>What’s the best speedup we can hope for if we have many cores that can   be used to speed up the parallel part of the task?  Here’s the speedup   formula based on F and S, where in this case F is the parallel   fraction of the task.  If we assume that the parallel fraction of the   task can be speed up arbitrarily by using more and more cores, we see   that the best possible overall speed up is 1/(1-F).</p> <p>For example, you write a program that can do 90% of its work in   parallel, but the other 10% must be done sequentially.  The best   overall speedup that can be achieved is a factor of 10, no matter how   many cores you have at your disposal.</p> <p>Turning the question around, suppose you have a 1000-core machine   which you hope to be able to use to achieve a speedup of 500 on your   target application.  You would need to be able parallelize 99.8% of   the computation in order to reach your goal!  Clearly multicore   machines are most useful when the target task has lots of natural   parallelism.</p> <div class="lecslide"><a name="17"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide18.png" alt=""></a></div> <p>Using multiple independent cores to execute a parallel task is called   thread-level parallelism (TLP), where each core executes a separate   computation “thread”.  The threads are independent programs, so the   execution model is potentially more flexible than the lock-step   execution provided by vector machines.</p> <p>When there are a small number of threads, you often see the cores   sharing a common main memory, allowing the threads to communicate and   synchronize by sharing a common address space.  We’ll discuss this   further in the next section.  This is the approach used in current   multicore processors, which have between 2 and 12 cores.</p> <p>Shared memory becomes a real bottleneck when there 10’s or 100’s of   cores, since collectively they quickly overwhelm the available memory   bandwidth.  In these architectures, threads communicate using a   communication network to pass messages back and forth.  We discussed   possible network topologies in an earlier lecture.  A cost-effective   on-chip approach is to use a nearest-neighbor mesh network, which   supports many parallel point-to-point communications, while still   allowing multi-hop communication between any two cores.  Message   passing is also used in computing clusters, where many ordinary CPUs   collaborate on large tasks.  There’s a standardized message passing   interface (MPI) and specialized, very high throughput, low latency   message-passing communication networks (<i>e.g.</i>, Infiniband) that make it   easy to build high-performance computing clusters.</p> <p>In the next couple of sections we’ll look more closely at some of the   issues involved in building shared-memory multicore processors.</p> <div class="lecslide"><a name="18"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide19.png" alt=""></a></div> <p>A conceptual schematic for a multicore processor is shown below.  To   reduce the average memory access time, each of the four cores has its   own cache, which will satisfy most memory requests.  If there’s a   cache miss, a request is sent to the shared main memory.  With a   modest number of cores and a good cache hit ratio, the number of   memory requests that must access main memory during normal operation   should be pretty small.  To keep the number of memory accesses to a   minimum, the caches implement a write-back strategy, where ST   instructions update the cache, but main memory is only updated when a   dirty cache line is replaced.</p> <p>Our goal is that each core should share the contents of main memory,   <i>i.e.</i>, changes made by one core should visible to all the other cores.   In the example shown here, core 0 is running Thread A and core 1 is   running Thread B.  Both threads reference two shared memory locations   holding the values for the variables X and Y.</p> <p>The current values of X and Y are 1 and 2, respectively.  Those values   are held in main memory as well as being cached by each core.</p> <div class="lecslide"><a name="19"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide20.png" alt=""></a></div> <p>What happens when the threads are executed?  Each thread executes   independently, updating its cache during stores to X and Y.  For any   possible execution order, either concurrent or sequential, the result   is the same: Thread A prints “2”, Thread B prints “1”.  Hardware   engineers would point to the consistent outcomes and declare victory!</p> <p>But closer examination of the final system state reveals some   problems.  After execution is complete, the two cores disagree on the   values of X and Y.  Threads running on core 0 will see X=3 and Y=2.   Threads running on core 1 will see X=1 and Y=4.  Because of the   caches, the system isn’t behaving as if there’s a single shared   memory.  On the other hand, we can’t eliminate the caches since that   would cause the average memory access time to skyrocket, ruining any   hoped-for performance improvement from using multiple cores.</p> <div class="lecslide"><a name="20"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide21.png" alt=""></a></div> <p>What outcome should we expect?  One plausible standard of correctness   is the outcome when the threads are run a single timeshared core.  The   argument would be that a multicore implementation should produce the   same outcome but more quickly, with parallel execution replacing   timesharing.</p> <p>The table shows the possible results of the timesharing experiment,   where the outcome depends on the order in which the statements are   executed.  Programmers will understand that there is more than one   possible outcome and know that they would have to impose additional   constraints on execution order, say, using semaphores, if they wanted   a specific outcome.</p> <p>Notice that the multicore outcome of 2,1 doesn’t appear anywhere on   the list of possible outcomes from sequential timeshared execution.</p> <div class="lecslide"><a name="21"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide22.png" alt=""></a></div> <p>The notion that executing N threads in parallel should correspond to   some interleaved execution of those threads on a single core is called   “sequential consistency”.  If multicore systems implement sequential   consistency, then programmers can think of the systems as providing   hardware-accelerated timesharing.</p> <p>So, our simple multicore system fails on two accounts.  First, it   doesn’t correctly implement a shared memory since, as we’ve seen, it’s   possible for the two cores to disagree about the current value of a   shared variable.  Second, as a consequence of the first problem, the   system doesn’t implement sequential consistency.</p> <p>Clearly, we’ll need to figure out a fix!</p> <div class="lecslide"><a name="22"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide23.png" alt=""></a></div> <p>One possible fix is to give up on sequential consistency.  An   alternative memory semantics is “weak consistency”, which only   requires that the memory operations from each thread appear to be   performed in the order issued by that thread. In other words in a   weakly consistent system, if a particular thread writes to X and then   writes to Y, the possible outcomes from reads of X and Y by any thread   would be one of</p> <p>(unchanged X, unchanged Y), or (changed X, unchanged Y), or (changed   X, changed Y).</p> <p>But no thread would see changed Y but unchanged X.</p> <p>In a weakly consistent system, memory operations from other threads   may overlap in arbitrary ways (not necessarily consistent with any   sequential interleaving).</p> <p>Note that our multicore cache system doesn’t itself guarantee even   weak consistency.  A thread that executes “write X; write Y” will   update its local cache, but later cache replacements may cause the   updated Y value to be written to main memory before the updated X   value.  To implement weak consistency, the thread should be modified   to “write X; communicate changes to all other processors; write Y”.   In the next section, we’ll discuss how to modify the caches to perform   the required communication automatically.</p> <p>Out-of-order cores have an extra complication since there’s no   guarantee that successive ST instructions will complete in the order   they appeared in the program.  These architectures provide a BARRIER   instruction that guarantees that memory operations before the BARRIER   are completed before memory operation executed after the BARRIER.</p> <p>There are many types of memory consistency — each   commercially-available multicore system has its own particular   guarantees about what happens when.  So the prudent programmer needs   to read the ISA manual carefully to ensure that her program will do   what she wants.  See the referenced PDF file for a very readable   discussion about memory semantics in multicore systems.</p> <div class="lecslide"><a name="23"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide24.png" alt=""></a></div> <p>The problem with our simple multicore system is that there is no   communication when the value of a shared variable is changed.  The fix   is to provide the necessary communications over a shared bus that’s   watched by all the caches.  A cache can then “snoop” on what’s   happening in other caches and then update its local state to be   consistent.  The required communications protocol is called a “cache   coherence protocol”.</p> <p>In designing the protocol, we’d like to incur the communications   overhead only when there’s actual sharing in progress, <i>i.e.</i>, when   multiple caches have local copies of a shared variable.</p> <div class="lecslide"><a name="24"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide25.png" alt=""></a></div> <p>To implement a cache coherence protocol, we’ll change the state   maintained for each cache line.</p> <p>The initial state for all cache lines is INVALID indicating that the   tag and data fields do not contain up-to-date information.  This   corresponds to setting the valid bit to 0 in our original cache   implementation.</p> <p>When the cache line state is EXCLUSIVE, this cache has the only copy   of those memory locations and indicates that the local data is the   same as that in main memory.  This corresponds to setting the valid   bit to 1 in our original cache implementation.</p> <p>If the cache line state is MODIFIED, that means the cache line data is   the sole valid copy of the data. This corresponds to setting both the   dirty and valid bits to 1 in our original cache implementation.</p> <p>To deal with sharing issues, there’s a fourth state called SHARED that   indicates when other caches may also have a copy of the same   unmodified memory data.</p> <p>When filling a cache from main memory, other caches can snoop on the   read access and participate if fulfilling the read request.</p> <p>If no other cache has the requested data, the data is fetched from   main memory and the requesting cache sets the state of that cache line   to EXCLUSIVE.</p> <p>If some other cache has the requested in line in the EXCLUSIVE or   SHARED state, it supplies the data and asserts the SHARED signal on   the snoopy bus to indicate that more than one cache now has a copy of   the data.  All caches will mark the state of the cache line as SHARED.</p> <p>If another cache has a MODIFIED copy of the cache line, it supplies   the changed data, providing the correct values for the requesting   cache as well as updating the values in main memory.  Again the SHARED   signal is asserted and both the reading and responding cache will set   the state for that cache line to SHARED.</p> <p>So, at the end of the read request, if there are multiple copies of   the cache line, they will all be in the SHARED state.  If there’s only   one copy of the cache line it will be in the EXCLUSIVE state.</p> <p>Writing to a cache line is when the sharing magic happens.  If there’s   a cache miss, the first cache performs a cache line read as described   above.  If the cache line is now in the SHARED state, a write will   cause the cache to send an INVALIDATE message on the snoopy bus,   telling all other caches to invalidate their copy of the cache line,   guaranteeing the local cache now has EXCLUSIVE access to the cache   line.  If the cache line is in the EXCLUSIVE state when the write   happens, no communication is necessary. Now the cache data can be   changed and the cache line state set to MODIFIED, completing the   write.</p> <p>This protocol is called “MESI” after the first initials of the   possible states.  Note that the valid and dirty state bits in our   original cache implementation have been repurposed to encode one of   the four MESI states.</p> <p>The key to success is that each cache now knows when a cache line may   be shared by another cache, prompting the necessary communication when   the value of a shared location is changed.  No attempt is made to   update shared values, they’re simply invalidated and the other caches   will issue read requests if they need the value of the shared variable   at some future time.</p> <div class="lecslide"><a name="25"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide26.png" alt=""></a></div> <p>To support cache coherence, the cache hardware has to be modified to   support two request streams: one from the CPU and one from the snoopy   bus.</p> <p>The CPU side includes a queue of store requests that were delayed by   cache misses.  This allows the CPU to proceed without having to wait   for the cache refill operation to complete.  Note that CPU read   requests will need to check the store queue before they check the   cache to ensure the most-recent value is supplied to the CPU.  Usually   there’s a STORE_BARRIER instruction that stalls the CPU until the   store queue is empty, guaranteeing that all processors have seen the   effect of the writes before execution resumes.</p> <p>On the snoopy-bus side, the cache has to snoop on the transactions   from other caches, invalidating or supplying cache line data as   appropriate, and then updating the local cache line state.  If the   cache is busy with, say, a refill operation, INVALIDATE requests may   be queued until they can be processed.  Usually there’s a READ_BARRIER   instruction that stalls the CPU until the invalidate queue is empty,   guaranteeing that updates from other processors have been applied to   the local cache state before execution resumes.</p> <p>Note that the “read with intent to modify” transaction shown here is   just protocol shorthand for a READ immediately followed by an   INVALIDATE, indicating that the requester will be changing the   contents of the cache line.</p> <div class="lecslide"><a name="26"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide27.png" alt=""></a></div> <p>How do the CPU and snoopy-bus requests affect the cache state?  Here   in micro type is a flow chart showing what happens when.  If you’re   interested, try following the actions required to complete various   transactions.</p> <p>Intel, in its wisdom, adds a fifth “F” state, used to determine   which cache will respond to read request when the requested cache line   is shared by multiple caches — basically it selects which of the   SHARED cache lines gets to be the responder.</p> <p>But this is a bit abstract.  Let’s try the MESI cache coherence   protocol on our earlier example!</p> <div class="lecslide"><a name="27"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide28.png" alt=""></a></div> <p>Here are our two threads and their local cache states indicating that   values of locations X and Y are shared by both caches.  Let’s see what   happens when the operations happen in the order (1 through 4) shown   here.  You can check what happens when the transactions are in a   different order or happen concurrently.</p> <p>First, Thread A changes X to 3.  Since this location is marked as   SHARED [S] in the local cache, the cache for core 0 (\\(_0) issues an   INVALIDATE transaction for location X to the other caches, giving it   exclusive access to location X, which it changes to have the value 3.   At the end of this step, the cache for core 1 (\\)_1) no longer has a   copy of the value for location X.</p> <p>In step 2, Thread B changes Y to 4.  Since this location is marked as   SHARED in the local cache, cache 1 issues an INVALIDATE transaction   for location Y to the other caches, giving it exclusive access to   location Y, which it changes to have the value 4.</p> <p>In step 3, execution continues in Thread B, which needs the value of   location X.  That’s a cache miss, so it issues a read request on the   snoopy bus, and cache 0 responds with its updated value, and both   caches mark the location X as SHARED.  Main memory, which is also   watching the snoopy bus, also updates its copy of the X value.</p> <p>Finally, in step 4, Thread A needs the value for Y, which results in a   similar transaction on the snoopy bus.</p> <p>Note the outcome corresponds exactly to that produced by the same   execution sequence on a timeshared core since the coherence protocol   guarantees that no cache has an out-of-date copy of a shared memory   location.  And both caches agree on the ending values for the shared   variables X and Y.</p> <p>If you try other execution orders, you’ll see that sequential   consistency and shared memory semantics are maintained in each case.   The cache coherency protocol has done its job!</p> <div class="lecslide"><a name="28"><img class="lecslideimg" src="../../../contents/c21/c21s1/Slide29.png" alt=""></a></div> <p>Let’s summarize our discussion of parallel processing.</p> <p>At the moment, it seems that the architecture of a single core has   reached a stable point.  At least with the current ISAs, pipeline   depths are unlikely to increase and out-of-order, superscalar   instruction execution has reached the point of diminishing performance   returns.  So it seems unlikely there will be dramatic performance   improvements due to architectural changes inside the CPU core.  GPU   architectures continue to evolve as they adapt to new uses in specific   application areas, but they are unlikely to impact general-purpose   computing.</p> <p>At the system level, the trend is toward increasing the number of   cores and figuring out how to best exploit parallelism with new   algorithms.</p> <p>Looking further ahead, notice that the brain is able to accomplish   remarkable results using fairly slow mechanisms (it takes ~.01 seconds   to get a message to the brain and synapses fire somewhere between 0.3   to 1.8 times per second).  Is it massive parallelism that gives the   brain its “computational” power?  Or is it that the brain uses a   different computation model, <i>e.g.</i>, neural nets, to decide upon new   actions given new inputs?  At least for applications involving   cognition there are new architectural and technology frontiers to   explore.  You have some interesting challenges ahead if you get   interested in the future of parallel processing!</p> <ul class="navigation progress">     <li id="bck_btn"><a href="../../../contents/c21/index.htm">Back<span>Parallel Processing</span></a></li>     <li id="continue_btn"><a href="../../../contents/c21/c21s2/index.htm">Continue<span>Topic Videos</span></a></li> </ul>
	                    
    
    
    



	        			
	                    
	                    
	                    
	                    

            		 </main><!--Course_inner_section tag close -->
           		     <div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer"><div id="footer">
<nav aria-label="Footer">     <nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses">       <span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
</ul>
</nav>
<div id="foot-c2" class="grid_2"><nav aria-labelledby="f-for-educators">         <span id="f-for-educators" class="footer" aria-hidden="true">For Educators</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
    <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal </a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
    <li><a href="https://openlearning.mit.edu/campus/digital-innovations/" aria-label="External Link: Residential Digital Innovations">Residential Digital Innovations </a></li>
    <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
</ul>
</nav></div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate">       <span id="f-donate" class="footer" aria-hidden="true">Give Now</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
    <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul>
</nav>
<div class="grid_2" id="foot-c4">
<nav aria-labelledby="f-about">         <span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
    <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
</ul>
</nav><!--about-->       <nav aria-labelledby="f-tools">         <span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="https://ocw.mit.edu/about/contactus">Contact Us</a></li>
    <li><a href="https://accessibility.mit.edu/" target="_blank">Accessibility</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul>
</nav><!--tools-->
</div>
</nav> <aside style="min-height: 289px;" aria-labelledby="f-our-corporate-supporters" class="grid_4 omega" id="foot-c5">           <span aria-hidden="true" class="footer" id="f-our-corporate-supporters">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div id="div-gpt-ad-1388181177156-0" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div id="div-gpt-ad-1388181177156-1" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div id="div-gpt-ad-1388181177156-2" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div id="div-gpt-ad-1388181177156-3" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div id="div-gpt-ad-1388181177156-4" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div id="div-gpt-ad-1388181177156-5" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside>
<div class="grid_12 alpha omega" itemprop="publisher" itemscope="" itemtype="http://schema.org/CollegeOrUniversity">
<h4 class="footer" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;">About <span itemprop="name">MIT OpenCourseWare</span>
</h4>
<p style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;" itemprop="description">MIT OpenCourseWare is an online publication of materials from over 2,500 MIT courses, freely sharing knowledge with learners and educators around the world. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
</div>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu"><img src="../../../common/images/logo_mit.png" alt="Massachusetts Institute of Technology logo and name." style="width: 195; height: 44;"></a><a href="https://openlearning.mit.edu/"><img src="https://ocw.mit.edu/images/mitol_logo.png" alt="MIT Open Learning logo and name." style="width: 265; height: 50; vertical-align: top; padding-left:30px;"></a><a href="https://www.oeglobal.org/"><img src="https://ocw.mit.edu/images/oeg_logo.gif" alt="Open Education Consortium logo." style="width: 219px; height: 59px; vertical-align: top; padding-left:20px;"></a><a rel="license" itemprop="useRightsUrl" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="../../../common/images/cc_by-nc-sa.png" alt="Creative Commons logo with terms BY-NC-SA." style="width: 126px; height: 44px; margin-right: 0; padding-left: 20px;"></a>
<p class="copyright">© 2001–2018<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="license">Creative Commons License</a> and other <a href="../../../common/terms/index.htm" rel="cc:morePermissions">terms of use</a>.</p>
</div>
</div></div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->


   </body>
 </html>
