<!DOCTYPE html><html lang="en">
      
      
        
    
    
    
    

      
      
      <head>
        <meta charset="utf-8">
        <meta name="format-detection" content="telephone=no">  
        
        <title>14.1 Annotated Slides | 14 Caches and the Memory Hierarchy | Computation Structures | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
    <!-- Begin Automatic Metadata Insertion -->
    <meta content="6-004-computation-structures-spring-2017" name="WT.cg_n">
    <meta content="14.1 Annotated Slides" name="WT.cg_s">
    <meta content="" name="Description">
    <meta content="Terman, Chris" name="Author">
    <meta content="6.004,computation,computation structure,primitives, gates,instructions,procedures,processes,concurrency,instruction set design,software structure,digital system,MOS transistor,logic gate,combinational circuit,sequential circuit,finite-state machines,computer architecture,programming,RISC processor,Computer Design and Engineering,Digital Systems" name="keywords">
    <meta content="6.004 Computation Structures | 14.1 Annotated Slides" name="Search_Display">
    <meta content="Computer Design and Engineering" itemprop="about">
    <meta content="Digital Systems" itemprop="about">
    <!-- End Automatic Metadata Insertion -->

	<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/search.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
	<link href="../../../common/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
	<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2017/c14/c14s1/">
	<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
	
	
      <script type="text/x-mathjax-config">
		MathJax.Hub.Config({
			TeX: { equationNumbers: { autoNumber: "AMS" } },		
	  		displayAlign: "left",
	  		displayIndent: "2em",
	  		menuSettings: {zoom: "Double-Click", mpContext: true, mpMouse: true},
			errorSettings: { message: ["[Math Error]"] }  		
			});
	</script>
	
	<script type="text/javascript" src="../../../common/scripts/jquery.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script>
	<script type="text/javascript" src="../../../common/scripts/expandy.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=70ac07d7-b28f-4071-816f-d292aba4849f"></script>
	<script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js?config=TeX-MML-AM_SVG"></script>
	
	
	
    
    
    
    
    
    
    
      
       
		 

        
        
        

        
        
        
        
        
        
        
        
        
      </head>
    <body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW">
<table class="social">
    <tbody>
        <tr>
            <td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>  <a aria-label="Instagram" href="https://www.instagram.com/mitocw/"><img src="https://ocw.mit.edu/images/icon_ig.png" alt="Click to visit our Instagram page."></a> <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="https://ocw.mit.edu/images/icon_twitter.png" alt="Click to visit our Twitter feed."></a><a aria-label="YouTube" href="https://www.youtube.com/mitocw" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_yt.png" alt="Click to visit our YouTube page."></a><span style="font-size: 12.208px;">   </span><a aria-label="Open Matters blog on WordPress" href="https://www.ocw-openmatters.org/" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_wp.png" alt="Click to visit our blog on WordPress."></a>
</td>
        </tr>
    </tbody>
</table>
</aside><nav aria-label="Help Links" class="helplinks">     <a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/about/contactus.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>

<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75">
<div class="portletStaticText portlet-static-mega-menu"><div><nav id="mega" class="grid_8 alpha" aria-label="Site">
<ul id="menu" role="presentation">
    <li id="menu_home">
<a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
</li>
    <!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses">
<a href="#" aria-hidden="true">FIND COURSES</a><!-- Begin 5 columns Item -->
    <div class="dropdown_5columns-a mega-courses">
    <div class="col_1a">
    <div class="row_1a">
<nav aria-labelledby="mm-find-courses-by">     <span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
    <ul class="find_by" role="presentation">
        <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
    </ul>
    </nav>     <nav aria-labelledby="mm-collections">     <span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
        <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
        <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
        <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    </ul>
    </nav>     <nav class="col_1b" aria-labelledby="mm-translated-courses">     <span id="mm-translated-courses" class="nav" aria-hidden="true" style="line-height: 1.3;">Cross-Disciplinary Topic Lists</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
        <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
        <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
        <li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
        <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
        <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
    </ul>
    </nav>
</div>
    <div class="row_1b"><nav aria-labelledby="mm-cross-disciplinary-topic-lists">     <span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Translated Courses</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
    </ul>
    </nav></div>
    </div>
    </div>
    </li>
    <li id="drop_2">
<a href="#" aria-label="For Educators">For Educators</a>
    <div class="dropdown_1column-a" style="width: 270px;"><nav aria-labelledby="mm-find-courses-by">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/chalk-radio-podcast">Chalk Radio Podcast</a></li>
        <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
        <li><a href="https://openlearning.mit.edu/campus/digital-innovations/">Residential Digital Innovations </a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_3">
<a href="#" aria-hidden="true">Give Now</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="Donate">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
        <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
        <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
        <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
        <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_4">
<a href="#" aria-hidden="true">About</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="About">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
        <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
        <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
        <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
        <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
        <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
    </ul>
    </nav></div>
    </li>
</ul>
</nav></div></div>

</div>





<!--googleoff: index-->
<script>
  (function() {
	var cx = '012626166551961672889:owjdpuboktq';
	var gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(gcse, s);
  })();
  window.onload = function(){
	document.getElementById('gsc-i-id1').placeholder = 'Search';	
  };

$(document).ready(function(){

$('.advanceSearch a').keydown(function(event){showSearchTips($(this),event);})
$('#searchTipsModal').keydown(function(event){showSearchTips($(this),event);})

function showSearchTips(obj,evt) {
// if pressed enter key
	if ( evt.which == 13 || evt.which == 32) {
		showModal();
		ga('send', 'pageview', "AdvanceSearch");
		$(".advanceSearch a").attr('aria-expanded', 'true');
		$('.searchTipsModal').focus();
		evt.preventDefault();
		}
	if ( evt.which == 27 ) {
		hideModal();
		$(".advanceSearch a").attr('aria-expanded', 'false');
		var modal = document.getElementById('searchTipsModal');
		modal.style.display = "none";
		$(".advanceSearch a").focus();
		evt.preventDefault();
		}
}

});
function showModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "block";
	ga('send', 'pageview', "AdvanceSearch");
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", true);
	window.setTimeout(function () {
    document.getElementById('searchTipsModal').focus(); }, 0);
}

function hideModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "none";
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", false);
}
</script>
<div id="search" role="search" class="grid_4 omega">
    	<table class="search">
				<tbody>
					<tr>
						<td><div class="searchboxheader"><searchbox-only resultsurl="/search/ocwsearch.htm"></searchbox-only></div></td>
						<td>
							<div class="advanceSearch">
								<a id="searchTipsBtn" onclick="showModal();" href="#" role="button" aria-label="search tips" aria-expanded="false" aria-describedby="searchtips">Search Tips</a>

								<!-- The Modal -->
								<div id="searchTipsModal" class="modal" tabindex="-1">
								  <!-- Modal content -->
									<div class="modal-content">
										<div class="modal-body">
											<button class="close" onclick="hideModal();" aria-label="close">X</button>
											<span>
												<b>Exclude words from your search</b>
												<br>Put - in front of a word you want to leave out. For example, jaguar speed -car
												<br><br>
												<b>Search for an exact match</b>
												<br>Put a word or phrase inside quotes. For example, "tallest building".
												<br><br>
												<b>Search for wildcards or unknown words</b>
												<br>Put a * in your word or phrase where you want to leave a placeholder. For example, "largest * in the world".
												<br><br>
												<b>Search within a range of numbers</b>
												<br>Put .. between two numbers. For example, camera $50..$100.
												<br><br>
												<b>Combine searches</b>
												<br>Put "OR" between each search query. For example,  marathon OR race.
												<br><br>
											</span>
										</div>
								  </div>
								</div>
							</div>
						</td>
					</tr>
				</tbody>
		</table>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end -->
			
		<div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb">
                      <p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Computation Structures</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/c14/index.htm">14 Caches and the Memory Hierarchy</a>
            
                »
                
            
            
         
    
    
        
            
            
            14.1 Annotated Slides
         
    
</p>

                 </nav>
                 <div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            14.1 Annotated Slides
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course">
               			 



<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script>
<!--Left Nav Starts -->


	<ul>			  
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="instructor-insights" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuinstructor-insights'); toggleClass('instructor-insights'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/instructor-insights/index.htm" class="">
		                  Instructor Insights  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuinstructor-insights" class="">
					               
		            <li class="">
				 		<a href="../../../contents/instructor-insights/an-interview-with-christopher-terman-on-teaching-computation-structures/index.htm" class="">An Interview with Christopher Terman</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/meet-the-educator/index.htm" class="">Meet the Educator</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/when-students-come-with-different-backgrounds-offer-a-buffet-of-learning-materials/index.htm" class="">A Buffet of Learning Materials</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-the-mitx-platform-to-structure-learning-sequences/index.htm" class="">Using the MITx Platform</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/conceptualizing-online-courses-as-educational-labs/index.htm" class="">Online Courses as Educational Labs</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/teaching-large-lecture-classes-the-importance-of-stories-and-disfluency/index.htm" class="">The Importance of Stories and Disfluency</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-teaching-team-from-lab-assistants-to-faculty-members-the-range-of-experience-is-key/index.htm" class="">A Teaching Team with a Range of Experience</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/with-online-fora-being-stuck-is-just-a-10-minute-process/index.htm" class="">Being Stuck Is a 10-Minute Process</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-browser-based-programming-environments-to-engage-students-in-the-practice-of-engineering/index.htm" class="">Browser-Based Programming Environments</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/a-common-challenge-students-face-developing-confidence-in-systematically-solving-problems/index.htm" class="">Confidence in Problem-Solving</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/hallway-learning-the-value-of-common-learning-experiences-at-the-undergraduate-level/index.htm" class="">The Value of Common Experiences</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-fun-is-in-the-doing-of-the-puzzle-self-paced-mastery-learning-and-moving-beyond/index.htm" class="">Self-Paced Mastery Learning</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/engineering-learning-materials-an-iterative-process/index.htm" class="">Engineering Learning Materials</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c1" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc1'); toggleClass('c1'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c1/index.htm" class="">
		                  1 Basics of Information  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc1" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c1/c1s1/index.htm" class="">1.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s2/index.htm" class="">1.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s3/index.htm" class="">1.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c2" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc2'); toggleClass('c2'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c2/index.htm" class="">
		                  2 The Digital Abstraction  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc2" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c2/c2s1/index.htm" class="">2.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s2/index.htm" class="">2.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s3/index.htm" class="">2.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c3" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc3'); toggleClass('c3'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c3/index.htm" class="">
		                  3 CMOS  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc3" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c3/c3s1/index.htm" class="">3.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s2/index.htm" class="">3.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s3/index.htm" class="">3.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c4" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc4'); toggleClass('c4'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c4/index.htm" class="">
		                  4 Combinational Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc4" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c4/c4s1/index.htm" class="">4.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s2/index.htm" class="">4.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s3/index.htm" class="">4.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c5" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc5'); toggleClass('c5'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c5/index.htm" class="">
		                  5 Sequential Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc5" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c5/c5s1/index.htm" class="">5.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s2/index.htm" class="">5.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s3/index.htm" class="">5.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c6" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc6'); toggleClass('c6'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c6/index.htm" class="">
		                  6 Finite State Machines  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc6" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c6/c6s1/index.htm" class="">6.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s2/index.htm" class="">6.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s3/index.htm" class="">6.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c7" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc7'); toggleClass('c7'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c7/index.htm" class="">
		                  7 Performance Measures  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc7" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c7/c7s1/index.htm" class="">7.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s2/index.htm" class="">7.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s3/index.htm" class="">7.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c8" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc8'); toggleClass('c8'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c8/index.htm" class="">
		                  8 Design Tradeoffs  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc8" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c8/c8s1/index.htm" class="">8.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c8/c8s2/index.htm" class="">8.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c9" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc9'); toggleClass('c9'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c9/index.htm" class="">
		                  9 Designing an Instruction Set  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc9" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c9/c9s1/index.htm" class="">9.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s2/index.htm" class="">9.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s3/index.htm" class="">9.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c10" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc10'); toggleClass('c10'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c10/index.htm" class="">
		                  10 Assembly Language, Models of Computation  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc10" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c10/c10s1/index.htm" class="">10.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c10/c10s2/index.htm" class="">10.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c11" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc11'); toggleClass('c11'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c11/index.htm" class="">
		                  11 Compilers  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc11" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c11/c11s1/index.htm" class="">11.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s2/index.htm" class="">11.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s3/index.htm" class="">11.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c12" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc12'); toggleClass('c12'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c12/index.htm" class="">
		                  12 Procedures and Stacks  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc12" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c12/c12s1/index.htm" class="">12.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s2/index.htm" class="">12.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s3/index.htm" class="">12.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c13" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc13'); toggleClass('c13'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c13/index.htm" class="">
		                  13 Building the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc13" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c13/c13s1/index.htm" class="">13.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s2/index.htm" class="">13.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s3/index.htm" class="">13.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c14" class="mC">
						<a href="#" class="" onclick="toggleMenu('menuc14'); toggleClass('c14'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Collapse Menu" title="Collapse Menu">
		                </a>
		                <a href="../../../contents/c14/index.htm" class="">
		                  14 Caches and the Memory Hierarchy  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc14" class="selected">
					               
		            <li class="selected">
				 		<a href="../../../contents/c14/c14s1/index.htm" class="selected">14.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s2/index.htm" class="">14.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s3/index.htm" class="">14.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c15" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc15'); toggleClass('c15'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c15/index.htm" class="">
		                  15 Pipelining the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc15" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c15/c15s1/index.htm" class="">15.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s2/index.htm" class="">15.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s3/index.htm" class="">15.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c16" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc16'); toggleClass('c16'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c16/index.htm" class="">
		                  16 Virtual Memory  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc16" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c16/c16s1/index.htm" class="">16.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s2/index.htm" class="">16.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s3/index.htm" class="">16.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c17" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc17'); toggleClass('c17'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c17/index.htm" class="">
		                  17 Virtualizing the Processor  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc17" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c17/c17s1/index.htm" class="">17.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s2/index.htm" class="">17.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s3/index.htm" class="">17.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c18" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc18'); toggleClass('c18'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c18/index.htm" class="">
		                  18 Devices and Interrupts  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc18" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c18/c18s1/index.htm" class="">18.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s2/index.htm" class="">18.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s3/index.htm" class="">18.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c19" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc19'); toggleClass('c19'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c19/index.htm" class="">
		                  19 Concurrency and Synchronization  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc19" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c19/c19s1/index.htm" class="">19.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s2/index.htm" class="">19.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s3/index.htm" class="">19.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c20" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc20'); toggleClass('c20'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c20/index.htm" class="">
		                  20 System-level Communication  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc20" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c20/c20s1/index.htm" class="">20.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c20/c20s2/index.htm" class="">20.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c21" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc21'); toggleClass('c21'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c21/index.htm" class="">
		                  21 Parallel Processing  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc21" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c21/c21s1/index.htm" class="">21.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c21/c21s2/index.htm" class="">21.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>


<!--Left Nav Ends -->









           		     </nav>
           		     <main id="course_inner_section" aria-labelledby="section_title">
           		     	
	       		     	<ul class="navigation pagination">     <li id="top_bck_btn"><a href="../../../contents/c14/index.htm">&lt;<span>Caches and the Memory Hierarchy</span></a></li>     <li id="flp_btn_1" class="button_selected"><a href="../../../contents/c14/c14s1/index.htm">14.1.1<span>Annotated slides</span></a></li>     <li id="top_continue_btn"><a href="../../../contents/c14/c14s2/index.htm">&gt;<span>Topic Videos</span></a></li> </ul> <p><style type="text/css">
.toc {
  margin-left: 2em;
}
.lecslide {
  margin-top: 1em;
  margin-bottom: 1em;
  border-top: 0.5px solid #808080;
  padding-top: 1em;
  text-align: center;
}
.lecslideimg {
  width: 5in;
  border: 1px solid black;
}
</style></p> <h1>L14: The Memory Hierarchy</h1> <div class="toc"><ol>     <li style="margin-bottom:0.1em;"><a href="#1">Our Memory Machine</a></li>     <li style="margin-bottom:0.1em;"><a href="#2">Memory Technologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#3">Static RAM (SRAM)</a></li>     <li style="margin-bottom:0.1em;"><a href="#4">SRAM Cell</a></li>     <li style="margin-bottom:0.1em;"><a href="#5">SRAM Read</a></li>     <li style="margin-bottom:0.1em;"><a href="#6">SRAM Write</a></li>     <li style="margin-bottom:0.1em;"><a href="#7">Multiported SRAMs</a></li>     <li style="margin-bottom:0.1em;"><a href="#8">Summary: SRAM</a></li>     <li style="margin-bottom:0.1em;"><a href="#9">1T Dynamic RAM (DRAM) Cell</a></li>     <li style="margin-bottom:0.1em;"><a href="#10">1T DRAM Writes and Reads</a></li>     <li style="margin-bottom:0.1em;"><a href="#11">Summary: DRAM</a></li>     <li style="margin-bottom:0.1em;"><a href="#12">Non-Volatile Storage: Flash</a></li>     <li style="margin-bottom:0.1em;"><a href="#13">Non-Volatile Storage: Hard Disk</a></li>     <li style="margin-bottom:0.1em;"><a href="#14">Summary: Memory Technologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#15">Memory Hierarchy Interface</a></li>     <li style="margin-bottom:0.1em;"><a href="#16">Memory Hierarchy Interface (continued)</a></li>     <li style="margin-bottom:0.1em;"><a href="#17">The Locality Principle</a></li>     <li style="margin-bottom:0.1em;"><a href="#18">Memory Reference Patterns</a></li>     <li style="margin-bottom:0.1em;"><a href="#19">Caches</a></li>     <li style="margin-bottom:0.1em;"><a href="#20">A Typical Memory Hierarchy</a></li>     <li style="margin-bottom:0.1em;"><a href="#21">Cache Access</a></li>     <li style="margin-bottom:0.1em;"><a href="#22">Cache Metrics</a></li>     <li style="margin-bottom:0.1em;"><a href="#23">Example: How High of a Hit Ratio?</a></li>     <li style="margin-bottom:0.1em;"><a href="#24">Basic Cache Algorithm</a></li>     <li style="margin-bottom:0.1em;"><a href="#25">Direct-Mapped Caches</a></li>     <li style="margin-bottom:0.1em;"><a href="#26">Example: Direct-Mapped Caches</a></li>     <li style="margin-bottom:0.1em;"><a href="#27">Block Size</a></li>     <li style="margin-bottom:0.1em;"><a href="#28">Block Size Trandeoffs</a></li>     <li style="margin-bottom:0.1em;"><a href="#29">Direct-Mapped Cache Problem: Conflict Misses</a></li>     <li style="margin-bottom:0.1em;"><a href="#30">Fully-Associative Cache</a></li>     <li style="margin-bottom:0.1em;"><a href="#31">N-way Set-Associative Cache I</a></li>     <li style="margin-bottom:0.1em;"><a href="#32">N-way Set-Associative Cache II</a></li>     <li style="margin-bottom:0.1em;"><a href="#33">“Let me count the ways.”</a></li>     <li style="margin-bottom:0.1em;"><a href="#34">Associativity Tradeoffs</a></li>     <li style="margin-bottom:0.1em;"><a href="#35">Associativity Implies Choices</a></li>     <li style="margin-bottom:0.1em;"><a href="#36">Replacement Policies</a></li>     <li style="margin-bottom:0.1em;"><a href="#37">Write Policy</a></li>     <li style="margin-bottom:0.1em;"><a href="#38">Write-Back</a></li>     <li style="margin-bottom:0.1em;"><a href="#39">Write-Back with “Dirty” Bits</a></li>     <li style="margin-bottom:0.1em;"><a href="#40">Summary: Cache Tradeoffs</a></li> </ol></div> <p><strong>Content of the following slides is described in the surrounding text.</strong></p> <div class="lecslide"><a name="1"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide02.png" alt=""></a></div> <p>In the last lecture we completed the design of the Beta, our reduced-instruction-set computer.  The simple organization of the Beta ISA meant that there was a lot commonality in the circuity needed to implement the instructions.  The final design has a few main building blocks with MUX steering logic to select input values as appropriate.</p> <p>If we were to count MOSFETs and think about propagation delays, we’d quickly determine that our 3-port main memory (shown here as the two yellow components) was the most costly component both in terms of space and percentage of the cycle time required by the memory accesses.  So in many ways, we really have a “memory machine” instead of a “computing machine”.</p> <p>The execution of every instruction starts by fetching the instruction from main memory. And ultimately all the data processed by the CPU is loaded from or stored to main memory.  A very few frequently-used variable values can be kept in the CPU’s register file, but most interesting programs manipulate *much* more data than can be accommodated by the storage available as part of the CPU datapath.</p> <p>In fact, the performance of most modern computers is limited by the bandwidth, <i>i.e.</i>, bytes/second, of the connection between the CPU and main memory, the so-called <i>memory bottleneck</i>.  The goal of this lecture is to understand the nature of the bottleneck and to see if there are architectural improvements we might make to minimize the problem as much as possible.</p> <p> </p> <div class="lecslide"><a name="2"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide03.png" alt=""></a></div> <p> </p> <p>We have a number of memory technologies at our disposal, varying widely in their capacity, latency, bandwidth, energy efficiency and their cost.  Not surprisingly, we find that each is useful for different applications in our overall system architecture.</p> <p>Our registers are built from sequential logic and provide very low latency access (20ps or so) to at most a few thousands of bits of data. Static and dynamic memories, which we’ll discuss further in the coming slides, offer larger capacities at the cost of longer access latencies.  Static random-access memories (SRAMs) are designed to provide low latencies (a few nanoseconds at most) to many thousands of locations.  Already we see that more locations means longer access latencies — this is a fundamental size vs. performance tradeoff of our current memory architectures.  The tradeoff comes about because increasing the number of bits will increase the area needed for the memory circuitry, which will in turn lead to longer signal lines and slower circuit performance due to increased capacitive loads.</p> <p>Dynamic random-access memories (DRAMs) are optimized for capacity and low cost, sacrificing access latency.  As we’ll see in this lecture, we’ll use both SRAMs and DRAMs to build a hybrid memory hierarchy that provides low average latency and high capacity — an attempt to get the best of both worlds!</p> <p>Notice that the word “average” has snuck into the performance claims. This means that we’ll be relying on statistical properties of memory accesses to achieve our goals of low latency and high capacity.  In the worst case, we’ll still be stuck with the capacity limitations of SRAMs and the long latencies of DRAMs, but we’ll work hard to ensure that the worst case occurs infrequently!</p> <p>Flash memory and hard-disk drives provide non-volatile storage. <i>Non-volatile</i> means that the memory contents are preserved even when the power is turned off.  Hard disks are at the bottom of the memory hierarchy, providing massive amounts of long-term storage for very little cost.  Flash memories, with a 100-fold improvement in access latency, are often used in concert with hard-disk drives in the same way that SRAMs are used in concert with DRAMs, <i>i.e.</i>, to provide a hybrid system for non-volatile storage that has improved latency *and* high capacity.</p> <p>Let’s learn a bit more about each of these four memory technologies, then we’ll return to the job of building our memory system.</p> <div class="lecslide"><a name="3"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide04.png" alt=""></a></div> <p>SRAMs are organized as an array of memory locations, where a memory access is either reading or writing all the bits in a single location. Here we see the component layout for a 8-location SRAM array where each location holds 6 bits of data.  You can see that the individual bit cells are organized as 8 rows (one row per location) by 6 columns (one column per bit in each memory word).  The circuitry around the periphery is used to decode addresses and support read and write operations.</p> <p>To access the SRAM, we need to provide enough address bits to uniquely specify the location.  In this case we need 3 address bits to select one of the 8 memory locations.  The address decoder logic sets one of the 8 wordlines (the horizontal wires in the array) high to enable a particular row (location) for the upcoming access.  The remaining wordlines are set low, disabling the cells they control.  The active wordline enables each of the SRAM bit cells on the selected row, connecting each cell to a pair of bit lines (the vertical wires in the array).  During read operations the bit lines carry the analog signals from the enabled bit cells to the sense amplifiers, which convert the analog signals to digital data.  During write operations incoming data is driven onto the bit lines to be stored into the enabled bit cells.</p> <p>Larger SRAMs will have a more complex organization in order to minimize the length, and hence the capacitance, of the bit lines.</p> <div class="lecslide"><a name="4"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide05.png" alt=""></a></div> <p>The heart of the SRAM are the bit cells.  The typical cell has two CMOS inverters wired in a positive feedback loop to create a bistable storage element.  The diagram on the right shows the two stable configurations.  In the top configuration, the cell is storing a 1 bit.  In the bottom configuration, it’s storing a 0 bit.  The cell provides stable storage in the sense that as long as there’s power, the noise immunity of the inverters will ensure that the logic values will be maintained even if there’s electrical noise on either inverter input.</p> <p>Both sides of the feedback loop are connected via access FETs to the two vertical bit lines.  When the wordline connected to the gates of the access FETs is high, the FETs are on, <i>i.e.</i>, they will make an electrical connection between the cell’s internal circuity and the bitlines.  When the wordline is low, the access FETs are off and the bistable feedback loop is isolated from the bitlines and will happily maintain the stored value as long as there’s power.</p> <div class="lecslide"><a name="5"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide06.png" alt=""></a></div> <p>During a read operation, the drivers first recharge all the bitlines to Vdd (<i>i.e.</i>, a logical 1 value) and then disconnect, leaving the bitlines floating at 1.  Then the address decoder sets one of the wordlines high, connecting a row of bit cells to their bitlines.  Each cell in the selected row then pulls one of its two bitlines to GND. In this example, it’s the right bitline that’s pulled low. Transitions on the bitlines are slow since the bitline has a large total capacitance and the MOSFETs in the two inverters are small to keep the cell as small as possible.  The large capacitance comes partly from the bitline’s length and partly from the diffusion capacitance of the access FETs in other cells in the same column.</p> <p>Rather than wait for the bitline to reach a valid logic level, sense amplifiers are used to quickly detect the small voltage difference developing between the two bitlines and generate the appropriate digital output.  Since detecting small changes in a voltage is very sensitive to electrical noise, the SRAM uses a pair of bitlines for each bit and a differential sense amplifier to provide greater noise immunity.</p> <p>As you can see, designing a low-latency SRAM involves a lot of expertise with the analog behavior of MOSFETs and some cleverness to ensure electrical noise will not interfere with the correct operation of the circuitry.</p> <div class="lecslide"><a name="6"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide07.png" alt=""></a></div> <p>Write operations start by driving the bitlines to the appropriate values.  In the example shown here, we want to write a 0-bit into the cell, so the left bitline is set to GND and the right bitline is set to VDD.  As before, the address decoder then sets one of the wordlines high, selecting all the cells in a particular row for the write operation.</p> <p>The drivers have much larger MOSFETs than those in the cell’s inverters, so the internal signals in the enabled cells are forced to the values on the bitlines and the bistable circuits “flip” into the new stable configuration.  We’re basically shorting together the outputs of the driver and the internal inverter, so this is another analog operation!  This would be a no-no in a strictly digital circuit.</p> <p>Since n-fets usually carry much higher source-drain currents than p-fets of the same width and given the threshold-drop of the n-fet access transistor, almost all the work of the write is performed by the large n-fet pulldown transistor connected to the bitline with the 0 value, which easily overpowers the small p-fet pullup of the inverters in the cell.  Again, SRAM designers need a lot of expertise to correctly balance the sizes of MOSFETs to ensure fast and reliable write operations.</p> <div class="lecslide"><a name="7"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide08.png" alt=""></a></div> <p>It’s not hard to augment the SRAM to support multiple read/write ports, a handy addition for register file circuits.  We’ll do this by adding additional sets of wordlines, bitlines, drivers, and sense amps.  This will give us multiple paths to independently access the bistable storage elements in the various rows of the memory array.</p> <p>With an N-port SRAM, for each bit we’ll need N wordlines, 2N bitlines and 2N access FETs.  The additional wordlines increase the effective height of the cell and the additional bitlines increase the effective width of the cell and so the area required by all these wires quickly dominates the size of the SRAM.  Since both the height and width of a cell increase when adding ports, the overall area grows as the square of the number of read/write ports.  So one has to take care not to gratuitously add ports lest the cost of the SRAM get out of hand.</p> <div class="lecslide"><a name="8"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide09.png" alt=""></a></div> <p>In summary, the circuitry for the SRAM is organized as an array of bit cells, with one row for each memory location and one column for each bit in a location.  Each bit is stored by two inverters connected to form a bistable storage element.  Reads and writes are essentially analog operations performed via the bitlines and access FETs.</p> <p>The SRAM uses 6 MOSFETs for each bit cell.  Can we do better?  What’s the minimum number of MOSFETs needed to store a single bit of information?</p> <div class="lecslide"><a name="9"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide10.png" alt=""></a></div> <p>Well, we’ll need at least one MOSFET to serve as the access FET so we can select which bits will be affected by read and write operations. We can use a simple capacitor for storage, where the value of a stored bit is represented by voltage across the plates of the capacitor.  The resulting circuit is termed a dynamic random-access memory (DRAM) cell.</p> <p>If the capacitor voltage exceeds a certain threshold, we’re storing a 1 bit, otherwise we’re storing a 0.  The amount of charge on the capacitor, which determines the speed and reliability of reading the stored value, is proportional to the capacitance.  We can increase the capacitance by increasing the dielectric constant of the insulating layer between the two plates of the capacitor, increasing the area of the plates, or by decreasing the the distance between the plates.  All of these are constantly being improved.</p> <p>A cross section of a modern DRAM cell is shown here.  The capacitor is formed in a large trench dug into the substrate material of the integrated circuit.  Increasing the depth of the trench will increase the area of the capacitor plates without increasing the cell’s area. The wordline forms the gate of the N-FET access transistor connecting the outer plate of the capacitor to the bitline.  A very thin insulating layer separates the outer plate from the inner plate, which is connected to some reference voltage (shown as GND in this diagram). You can Google <i>trench capacitor</i> to get the latest information on the dimensions and materials used in the construction of the capacitor.</p> <p>The resulting circuit is quite compact: about 20-times less area/bit than an SRAM bit cell.  There are some challenges however.  There’s no circuitry to main the static charge on the capacitor, so stored charge will leak from the outer plate of the capacitor, hence the name <i>dynamic memory</i>.  The leakage is caused by small picoamp currents through the PN junction with the surrounding substrate, or subthreshold conduction of the access FET even when it’s turned off. This limits the amount of time we can leave the capacitor unattended and still expect to read the stored value.  This means we’ll have to arrange to read then re-write each bit cell (called a <i>refresh</i> cycle) every 10ms or so, adding to the complexity of the DRAM interface circuitry.</p> <div class="lecslide"><a name="10"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide11.png" alt=""></a></div> <p>DRAM write operations are straightforward: simply turn on the access FET with the wordline and charge or discharge the storage capacitor through the bitline.</p> <p>Reads are bit more complicated. First the bitline is precharged to some intermediate voltage, <i>e.g.</i>, VDD/2, and then the precharge circuitry is disconnected.  The wordline is activated, connecting the storage capacitor of the selected cell to the bitline causing the charge on the capacitor to be shared with the charge stored by the capacitance of the bitline.  If the value stored by the cell capacitor is a 1, the bitline voltage will increase very slightly (<i>e.g.</i>, a few tens of millivolts).  If the stored value is a 0, the bitline voltage will decrease slightly.  Sense amplifiers are used to detect this small voltage change to produce a digital output value.</p> <p>This means that read operations wipe out the information stored in the bit cell, which must then be rewritten with the detected value at the end of the read operation.</p> <p>DRAM circuitry is usually organized to have wide rows, <i>i.e.</i>, multiple consecutive locations are read in a single access.  This particular block of locations is selected by the DRAM row address.  Then the DRAM column address is used to select a particular location from the block to be returned.  If we want to read multiple locations in a single row, then we only need to send a new column address and the DRAM will respond with that location without having to access the bit cells again.  The first access to a row has a long latency, but subsequent accesses to the same row have very low latency.  As we’ll see, we’ll be able to use fast column accesses to our advantage.</p> <div class="lecslide"><a name="11"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide12.png" alt=""></a></div> <p>In summary, DRAM bit cells consist of a single access FET connected to a storage capacitor that’s cleverly constructed to take up as little area as possible.  DRAMs must rewrite the contents of bit cells after they are read and every cell must be read and written periodically to ensure that the stored charge is refreshed before it’s corrupted by leakage currents.</p> <p>DRAMs have much higher capacities than SRAMs because of the small size of the DRAM bit cells, but the complexity of the DRAM interface circuitry means that the initial access to a row of locations is quite a bit slower than an SRAM access.  However subsequent accesses to the same row happen at speeds close to that of SRAM accesses.</p> <p>Both SRAMs and DRAMs will store values as long as their circuitry has power.  But if the circuitry is powered down, the stored bits will be lost.  For long-term storage we will need to use non-volatile memory technologies, the topic of the next lecture segment.</p> <div class="lecslide"><a name="12"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide13.png" alt=""></a></div> <p>Non-volatile memories are used to maintain system state even when the system is powered down.  In flash memories, long-term storage is achieved by storing charge on an well-insulated conductor called a floating gate, where it will remain stable for years.  The floating gate is incorporated in a standard MOSFET, placed between the MOSFET’s gate and the MOSFET’s channel.  If there is no charge stored on the floating gate, the MOSFET can be turned on, <i>i.e.</i>, be made to conduct, by placing a voltage \(V_1\) on the gate terminal, creating an inversion layer that connects the MOSFET’s source and drain terminals.  If there is a charge stored on the floating gate, a higher voltage \(V_2\) is required to turn on the MOSFET.  By setting the gate terminal to a voltage between \(V_1\) and \(V_2\), we can determine if the floating gate is charged by testing to see if the MOSFET is conducting.</p> <p>In fact, if we can measure the current flowing through the MOSFET, we can determine how much charge is stored on the floating gate, making it possible to store multiple bits of information in one flash cell by varying the amount of charge on its floating gate.  Flash cells can be connected in parallel or series to form circuits resembling CMOS NOR or NAND gates, allowing for a variety of access architectures suitable for either random or sequential access.</p> <p>Flash memories are very dense, approaching the areal density of DRAMs, particularly when each cell holds multiple bits of information.</p> <p>Read access times for NOR flash memories are similar to that of DRAMs, several tens of nanoseconds.  Read times for NAND flash memories are much longer, on the order of 10 microseconds.  Write times for all types of flash memories are quite long since high voltages have to be used to force electrons to cross the insulating barrier surrounding the floating gate.</p> <p>Flash memories can only be written some number of times before the insulating layer is damaged to the point that the floating gate will no longer reliably store charge.  Currently the number of guaranteed writes varies between 100,000 and 1,000,000.  To work around this limitation, flash chips contain clever address mapping algorithms so that writes to the same address actually are mapped to different flash cells on each successive write.</p> <p>The bottom line is that flash memories are a higher-performance but higher-cost replacement for the hard-disk drive, the long-time technology of choice for non-volatile storage.</p> <div class="lecslide"><a name="13"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide14.png" alt=""></a></div> <p>A hard-disk drive (HDD) contains one or more rotating platters coated with a magnetic material.  The platters rotate at speeds ranging from 5400 to 15000 RPM.  A read/write head positioned above the surface of a platter can detect or change the orientation of the magnetization of the magnetic material below.  The read/write head is mounted on an actuator that allows it to be positioned over different circular tracks.</p> <p>To read a particular sector of data, the head must be positioned radially over the correct track, then wait for the platter to rotate until it’s over the desired sector.  The average total time required to correctly position the head is on the order of 10 milliseconds, so hard disk access times are quite long.</p> <p>However, once the read/write head is in the correct position, data can be transferred at the respectable rate of 100 megabytes/second.  If the head has to be repositioned between each access, the effective transfer rate drops 1000-fold, limited by the time it takes to reposition the head.</p> <p>Hard disk drives provide cost-effective non-volatile storage for terabytes of data, albeit at the cost of slow access times.</p> <div class="lecslide"><a name="14"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide15.png" alt=""></a></div> <p>This completes our whirlwind tour of memory technologies.  If you’d like to learn a bit more, Wikipedia has useful articles on each type of device.  SRAM sizes and access times have kept pace with the improvements in the size and speed of integrated circuits. Interestingly, although capacities and transfer rates for DRAMs and HDDs have improved, their initial access times have not improved nearly as rapidly.  Thankfully over the past decade flash memories have helped to fill the performance gap between processor speeds and HDDs.  But the gap between processor cycle times and DRAM access times has continued to widen, increasing the challenge of designing low-latency high-capacity memory systems.</p> <p>The capacity of the available memory technologies varies over 10 orders of magnitude, and the variation in latencies varies over 8 orders of magnitude.  This creates a considerable challenge in figuring out how to navigate the speed vs size tradeoffs.</p> <p>Each transition in memory hierarchy shows the same fundamental design choice: we can pick smaller-and-faster or larger-and-slower.  This is a bit awkward actually — can we figure how to get the best of both worlds?</p> <div class="lecslide"><a name="15"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide16.png" alt=""></a></div> <p>We want our system to behave as if it had a large, fast, and cheap main memory.  Clearly we can’t achieve this goal using any single memory technology.</p> <p>Here’s an idea: can we use a hierarchical system of memories with different tradeoffs to achieve close to the same results as a large, fast, cheap memory?  Could we arrange for memory locations we’re using often to be stored, say, in SRAM and have those accesses be low latency?  Could the rest of the data could be stored in the larger and slower memory components, moving the between the levels when necessary?  Let’s follow this train of thought and see where it leads us.</p> <div class="lecslide"><a name="16"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide17.png" alt=""></a></div> <p>There are two approaches we might take.  The first is to expose the hierarchy, providing some amount of each type of storage and let the programmer decide how best to allocate the various memory resources for each particular computation.  The programmer would write code that moved data into fast storage when appropriate, then back to the larger and slower memories when low-latency access was no longer required. There would only be a small amount of the fastest memory, so data would be constantly in motion as the focus of the computation changed.</p> <p>This approach has had notable advocates.  Perhaps the most influential was Seymour Cray, the “Steve Jobs” of supercomputers.  Cray was the architect of the world’s fastest computers in each of three decades, inventing many of the technologies that form the foundation of high-performance computing.  His insight to managing the memory hierarchy was to organize data as vectors and move vectors in and out of fast memory under program control.  This was actually a good data abstraction for certain types of scientific computing and his vector machines had the top computing benchmarks for many years.</p> <p>The second alternative is to hide the hierarchy and simply tell the programmer they have a large, uniform address space to use as they wish.  The memory system would, behind the scenes, move data between the various levels of the memory hierarchy, depending on the usage patterns it detected.  This would require circuitry to examine each memory access issued by the CPU to determine where in the hierarchy to find the requested location.  And then, if a particular region of addresses was frequently accessed — say, when fetching instructions in a loop — the memory system would arrange for those accesses to be mapped to the fastest memory component and automatically move the loop instructions there.  All of this machinery would be transparent to the programmer: the program would simply fetch instructions and access data and the memory system would handle the rest.</p> <p>Could the memory system automatically arrange for the right data to be in the right place at the right time?  Cray was deeply skeptical of this approach.  He famously quipped “that you can’t fake what you haven’t got”.  Wouldn’t the programmer, with her knowledge of how data was going to be used by a particular program, be able to do a better job by explicitly managing the memory hierarchy?</p> <p>It turns out that when running general-purpose programs, it is possible to build an automatically managed, low-latency, high-capacity hierarchical memory system that appears as one large, uniform memory. What’s the insight that makes this possible?  That’s the topic of the next section.</p> <div class="lecslide"><a name="17"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide18.png" alt=""></a></div> <p>So, how can the memory system arrange for the right data to be in the right place at the right time?  Our goal is to have the frequently-used data in some fast SRAM.  That means the memory system will have to be able to predict which memory locations will be accessed.  And to keep the overhead of moving data into and out of SRAM manageable, we’d like to amortize the cost of the move over many accesses.  In other words we want any block of data we move into SRAM to be accessed many times.</p> <p>When not in SRAM, data would live in the larger, slower DRAM that serves as main memory.  If the system is working as planned, DRAM accesses would happen infrequently, <i>e.g.</i>, only when it’s time to bring another block of data into SRAM.</p> <p>If we look at how programs access memory, it turns out we *can* make accurate predictions about which memory locations will be accessed. The guiding principle is <i>locality of reference</i> which tells us that if there’s an access to address X at time t, it’s very probable that the program will access a nearby location in the near future.</p> <div class="lecslide"><a name="18"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide19.png" alt=""></a></div> <p>To understand why programs exhibit locality of reference, let’s look at how a running program accesses memory.</p> <p>Instruction fetches are quite predictable.  Execution usually proceeds sequentially since most of the time the next instruction is fetched from the location after that of the current instruction.  Code that loops will repeatedly fetch the same sequence of instructions, as shown here on the left of the time line.  There will of course be branches and subroutine calls that interrupt sequential execution, but then we’re back to fetching instructions from consecutive locations. Some programming constructs, <i>e.g.</i>, method dispatch in object-oriented languages, can produce scattered references to very short code sequences (as shown on the right of the time line) but order is quickly restored.</p> <p>This agrees with our intuition about program execution.  For example, once we execute the first instruction of a procedure, we’ll almost certainly execute the remaining instructions in the procedure.  So if we arranged for all the code of a procedure to moved to SRAM when the procedure’s first instruction was fetched, we’d expect that many subsequent instruction fetches could be satisfied by the SRAM.  And although fetching the first word of a block from DRAM has relatively long latency, the DRAM’s fast column accesses will quickly stream the remaining words from sequential addresses.  This will amortize the cost of the initial access over the whole sequence of transfers.</p> <p>The story is similar for accesses by a procedure to its arguments and local variables in the current stack frame.  Again there will be many accesses to a small region of memory during the span of time we’re executing the procedure’s code.</p> <p>Data accesses generated by LD and ST instructions also exhibit locality.  The program may be accessing the components of an object or struct.  Or it may be stepping through the elements of an array. Sometimes information is moved from one array or data object to another, as shown by the data accesses on the right of the timeline.</p> <p>Using simulations we can estimate the number of different locations that will be accessed over a particular span of time.  What we discover when we do this is the notion of a <i>working set</i> of locations that are accessed repeatedly.  If we plot the size of the working set as a function of the size of the time interval, we see that the size of the working set levels off.  In other words once the time interval reaches a certain size the number of locations accessed is approximately the same independent of when in time the interval occurs.</p> <p>As we see in our plot to the left, the actual addresses accessed will change, but the number of *different* addresses during the time interval will, on the average, remain relatively constant and, surprisingly, not all that large!</p> <p>This means that if we can arrange for our SRAM to be large enough to hold the working set of the program, most accesses will be able to be satisfied by the SRAM.  We’ll occasionally have to move new data into the SRAM and old data back to DRAM, but the DRAM access will occur less frequently than SRAM accesses.  We’ll work out the mathematics in a slide or two, but you can see that thanks to locality of reference we’re on track to build a memory out of a combination of SRAM and DRAM that performs like an SRAM but has the capacity of the DRAM.</p> <div class="lecslide"><a name="19"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide20.png" alt=""></a></div> <p>The SRAM component of our hierarchical memory system is called a <i>cache</i>.  It provides low-latency access to recently-accessed blocks of data.  If the requested data is in the cache, we have a <i>cache hit</i> and the data is supplied by the SRAM.</p> <p>If the requested data is not in the cache, we have a <i>cache miss</i> and a block of data containing the requested location will have to be moved from DRAM into the cache.  The locality principle tells us that we should expect cache hits to occur much more frequently than cache misses.</p> <p>Modern computer systems often use multiple levels of SRAM caches.  The levels closest to the CPU are smaller but very fast, while the levels further away from the CPU are larger and hence slower.  A miss at one level of the cache generates an access to the next level, and so on until a DRAM access is needed to satisfy the initial request.</p> <p>Caching is used in many applications to speed up access to frequently-accessed data.  For example, your browser maintains a cache of frequently-accessed web pages and uses its local copy of the web page if it determines the data is still valid, avoiding the delay of transferring the data over the Internet.</p> <div class="lecslide"><a name="20"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide21.png" alt=""></a></div> <p>Here’s an example of a memory hierarchy that might be found on a modern computer.  There are three levels of on-chip SRAM caches, followed by DRAM main memory and a flash-memory cache for the hard disk drive. The compiler is responsible for deciding which data values are kept in the CPU registers and which values require the use of LDs and STs. The 3-level cache and accesses to DRAM are managed by circuity in the memory system.  After that the access times are long enough (many hundreds of instruction times) that the job of managing the movement of data between the lower levels of the hierarchy is turned over to software.</p> <p>Today we’re discussing how the on-chip caches work.  In a later lecture, we’ll discuss how the software manages main memory and non-volatile storage devices.  Whether managed by hardware or software, each layer of the memory system is designed to provide lower-latency access to frequently-accessed locations in the next, slower layer.  But, as we’ll see, the implementation strategies will be quite different in the slower layers of the hierarchy.</p> <div class="lecslide"><a name="21"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide22.png" alt=""></a></div> <p>Okay, let’s review our plan.  The processor starts an access by sending an address to the cache.  If data for the requested address is held in the cache, it’s quickly returned to the CPU.</p> <p>If the data we request is not in the cache, we have a cache miss, so the cache has to make a request to main memory to get the data, which it then returns to processor.  Typically the cache will remember the newly fetched data, possibly replacing some older data in the cache.</p> <p>Suppose a cache access takes 4 ns and a main memory access takes 40 ns.  Then an access that hits in the cache has a latency of 4 ns, but an access that misses in the cache has a latency of 44 ns.  The processor has to deal with the variable memory access time, perhaps by simply waiting for the access to complete, or, in modern hyper-threaded processors, it might execute an instruction or two from another programming thread.</p> <div class="lecslide"><a name="22"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide23.png" alt=""></a></div> <p>The hit and miss ratios tell us the fraction of accesses which are cache hits and the fraction of accesses which are cache misses.  Of course, the ratios will sum to 1.</p> <p>Using these metrics we can compute the average memory access time (AMAT).  Since we always check in the cache first, every access includes the cache access time (called the hit time).  If we miss in the cache, we have to take the additional time needed to access main memory (called the miss penalty).  But the main memory access only happens on some fraction of the accesses: the miss ratio tells us how often that occurs.</p> <p>So the AMAT can be computed using the formula shown here.  The lower the miss ratio (or, equivalently, the higher the hit ratio), the smaller the average access time.  Our design goal for the cache is to achieve a high hit ratio.</p> <p>If we have multiple levels of cache, we can apply the formula recursively to calculate the AMAT at each level of the memory.  Each successive level of the cache is slower, <i>i.e.</i>, has a longer hit time, which is offset by lower miss ratio because of its increased size.</p> <div class="lecslide"><a name="23"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide24.png" alt=""></a></div> <p>Let’s try out some numbers.  Suppose the cache takes 4 processor cycles to respond, and main memory takes 100 cycles.  Without the cache, each memory access would take 100 cycles.  With the cache, a cache hit takes 4 cycles, and a cache miss takes 104 cycles.</p> <p>What hit ratio is needed to so that the AMAT with the cache is 100 cycles, the break-even point?  Using the AMAT formula from the previously slide, we see that we only need a hit ratio of 4% in order for memory system of the Cache + Main Memory to perform as well as Main Memory alone.  The idea, of course, is that we’ll be able to do much better than that.</p> <p>Suppose we wanted an AMAT of 5 cycles.  Clearly most of the accesses would have to be cache hits.  We can use the AMAT formula to compute the necessary hit ratio.  Working through the arithmetic we see that 99% of the accesses must be cache hits in order to achieve an average access time of 5 cycles.</p> <p>Could we expect to do that well when running actual programs? Happily, we can come close.  In a simulation of the Spec CPU2000 Benchmark, the hit ratio for a standard-size level 1 cache was measured to be 97.5% over some ~10 trillion accesses.</p> <p>[See the “All benchmarks” arithmetic-mean table at "<a href="http://research.cs.wisc.edu/multifacet/misc/spec2000cache-data/">Cache Performance for SPEC CPU2000 Benchmarks</a>," Jason F. Cantin and Mark D. Hill.</p> <div class="lecslide"><a name="24"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide25.png" alt=""></a></div> <p>Here’s a start at building a cache.  The cache will hold many different blocks of data; for now let’s assume each block is an individual memory location.  Each data block is <i>tagged</i> with its address. A combination of a data block and its associated address tag is called a cache line.</p> <p>When an address is received from the CPU, we’ll search the cache looking for a block with a matching address tag.  If we find a matching address tag, we have a cache hit.  On a read access, we’ll return the data from the matching cache line.  On a write access, we’ll update the data stored in the cache line and, at some point, update the corresponding location in main memory.</p> <p>If no matching tag is found, we have a cache miss.  So we’ll have to choose a cache line to use to hold the requested data, which means that some previously cached location will no longer be found in the cache.  For a read operation, we’ll fetch the requested data from main memory, add it to the cache (updating the tag and data fields of the cache line) and, of course, return the data to the CPU.  On a write, we’ll update the tag and data in the selected cache line and, at some point, update the corresponding location in main memory.</p> <p>So the contents of the cache are determined by the memory requests made by the CPU.  If the CPU requests a recently-used address, chances are good the data will still be in the cache from the previous access to the same location.  As the working set slowly changes, the cache contents will be updated as needed.  If the entire working set can fit into the cache, most of the requests will be hits and the AMAT will be close to the cache access time.  So far, so good!</p> <p>Of course, we’ll need to figure how to quickly search the cache, <i>i.e.</i>, we’ll a need fast way to answer the question of whether a particular address tag can be found in some cache line.  That’s our next topic.</p> <div class="lecslide"><a name="25"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide26.png" alt=""></a></div> <p>The simplest cache hardware consists of an SRAM with a few additional pieces of logic.  The cache hardware is designed so that each memory location in the CPU’s address space maps to a particular cache line, hence the name <i>direct-mapped (DM) cache</i>.  There are, of course, many more memory locations then there are cache lines, so many addresses are mapped to the same cache line and the cache will only be able to hold the data for one of those addresses at a time.</p> <p>The operation of a DM cache is straightforward.  We’ll use part of the incoming address as an index to select a single cache line to be searched.  The search consists of comparing the rest of the incoming address with the address tag of the selected cache line.  If the tag matches the address, there’s a cache hit and we can immediately use the data in the cache to satisfy the request.</p> <p>In this design, we’ve included an additional <i>valid bit</i> which is 1 when the tag and data fields hold valid information.  The valid bit for each cache line is initialized to 0 when the cache is powered on, indicating that all cache lines are empty.  As data is brought into the cache, the valid bit is set to 1 when the cache line’s tag and data fields are filled.  The CPU can request that the valid bit be cleared for a particular cache line — this is called <i>flushing the   cache</i>.  If, for example, the CPU initiates a read from disk, the disk hardware will read its data into a block of main memory, so any cached values for that block will be out-of-date.  So the CPU will flush those locations from the cache by marking any matching cache lines as invalid.</p> <p>Let’s see how this works using a small DM cache with 8 lines where each cache line contains a single word (4 bytes) of data.  Here’s a CPU request for the location at byte address 0xE8. Since there 4 bytes of data in each cache line, the bottom 2 address bits indicate the appropriate byte offset into the cached word.  Since the cache deals only with word accesses, the byte offset bits aren’t used.</p> <p>Next, we’ll need to use 3 address bits to select which of the 8 cache lines to search.  We choose these cache index bits from the low-order bits of the address.  Why?  Well, it’s because of locality.  The principle of locality tells us that it’s likely that the CPU will be requesting nearby addresses and for the cache to perform well, we’d like to arrange for nearby locations to be able to be held in the cache at the same time.  This means that nearby locations will have to be mapped to different cache lines.  The addresses of nearby locations differ in their low-order address bits, so we’ll use those bits as the cache index bits — that way nearby locations will map to different cache lines.</p> <p>The data, tag and valid bits selected by the cache line index are read from the SRAM.  To complete the search, we check the remaining address against the tag field of the cache.  If they’re equal and the valid bit is 1, we have a cache hit, and the data field can be used to satisfy the request.</p> <p>How come the tag field isn’t 32 bits, since we have a 32-bit address? We could have done that, but since all values stored in cache line 2 will have the same index bits (0b010), we saved a few bits of SRAM and chose not save those bits in the tag.  In other words, there’s no point in using SRAM to save bits we can generate from the incoming address.</p> <p>So the cache hardware in this example is an 8-location by 60 bit SRAM plus a 27-bit comparator and a single AND gate.  The cache access time is the access time of the SRAM plus the propagation delays of the comparator and AND gate.  About as simple and fast as we could hope for.</p> <p>The downside of the simplicity is that for each CPU request, we’re only looking in a single cache location to see if the cache holds the desired data.  Not much of search is it?  But the mapping of addresses to cache lines helps us out here.  Using the low-order address bit as the cache index, we’ve arranged for nearby locations to be mapped to different cache lines.  So, for example, if the CPU were executing an 8-instruction loop, all 8 instructions can be held in the cache at the same time.  A more complicated search mechanism couldn’t improve on that.  The bottom line: this extremely simple search is sufficient to get good cache hit ratios for the cases we care about.</p> <div class="lecslide"><a name="26"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide27.png" alt=""></a></div> <p>Let’s try a few more examples, in this case using a DM cache with 64 lines.</p> <p>Suppose the cache gets a read request for location 0x400C. To see how the request is processed, we first write the address in binary so we can easily divide it into the offset, index and tag fields.  For this address the offset bits have the value 0, the cache line index bits have the value 3, and the tag bits have the value 0x40.  So the tag field of cache line 3 is compared with the tag field of the address. Since there’s a match, we have a cache hit and the value in the data field of cache line can be used to satisfy the request.</p> <p>Would an access to location 0x4008 be a cache hit?  This address is similar to that in our first example, except the cache line index is now 2 instead of 3.  Looking in cache line 2, we that its tag field (0x58) doesn’t match the tag field in the address (0x40), so this access would be a cache miss.</p> <p>What are the addresses of the words held by cache lines 0, 1, and 2, all of which have the same tag field?  Well, we can run the address matching process backwards!  For an address to match these three cache lines it would have look like the binary shown here, where we’ve used the information in the cache tag field to fill in the high-order address bits and low-order address bits will come from the index value.  If we fill in the indices 0, 1, and 2, then convert the resulting binary to hex we get 0x5800, 0x5804, and 0x5808 as the addresses for the data held in cache lines 0, 1, and 2.</p> <p>Note that the complete address of the cached locations is formed by combining the tag field of the cache line with the index of the cache line.  We of course need to be able to recover the complete address from the information held in the cache so it can be correctly compared against address requests from the CPU.</p> <div class="lecslide"><a name="27"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide28.png" alt=""></a></div> <p>We can tweak the design of the DM cache a little to take advantage of locality and save some of the overhead of tag fields and valid bits.</p> <p>We can increase the size of the data field in a cache from 1 word to 2 words, or 4 words, etc.  The number of data words in each cache line is called the <i>block size</i> and is always a power of two.  Using a larger block size makes sense.  If there’s a high probability of accessing nearby words, why not fetch a larger block of words on a cache miss, trading the increased cost of the miss against the increased probability of future hits.</p> <p>Compare the 16-word DM cache shown here with a block size of 4 with a different 16-word DM cache with a block size of 1.  In this cache for every 128 bits of data there are 27 bits of tags and valid bit, so ~17% of the SRAM bits are overhead in the sense that they’re not being used to store data.  In the cache with block size 1, for every 32 bits of data there are 27 bits of tag and valid bit, so ~46% of the SRAM bits are overhead.  So a larger block size means we’ll be using the SRAM more efficiently.</p> <p>Since there are 16 bytes of data in each cache line, there are now 4 offset bits.  The cache uses the high-order two bits of the offset to select which of the 4 words to return to the CPU on a cache hit.</p> <p>There are 4 cache lines, so we’ll need two cache line index bits from the incoming address.</p> <p>And, finally, the remaining 26 address bits are used as the tag field.</p> <p>Note that there’s only a single valid bit for each cache line, so either the entire 4-word block is present in the cache or it’s not. Would it be worth the extra complication to support caching partial blocks?  Probably not.  Locality tells us that we’ll probably want those other words in the near future, so having them in the cache will likely improve the hit ratio.</p> <div class="lecslide"><a name="28"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide29.png" alt=""></a></div> <p>What’s the tradeoff between block size and performance?  We’ve argued that increasing the block size from 1 was a good idea.  Is there a limit to how large blocks should be?  Let’s look at the costs and benefits of an increased block size.</p> <p>With a larger block size we have to fetch more words on a cache miss and the miss penalty grows linearly with increasing block size.  Note that since the access time for the first word from DRAM is quite high, the increased miss penalty isn’t as painful as it might be.</p> <p>Increasing the block size past 1 reduces the miss ratio since we’re bringing words into the cache that will then be cache hits on subsequent accesses.  Assuming we don’t increase the overall cache capacity, increasing the block size means we’ll make a corresponding reduction in the number of cache lines.  Reducing the number of lines impacts the number of separate address blocks that can be accommodated in the cache.  As we saw in the discussion on the size of the working set of a running program, there are a certain number of separate regions we need to accommodate to achieve a high hit ratio: program, stack, data, etc.  So we need to ensure there are a sufficient number of blocks to hold the different addresses in the working set.  The bottom line is that there is an optimum block size that minimizes the miss ratio and increasing the block size past that point will be counterproductive.</p> <p>Combining the information in these two graphs, we can use the formula for AMAT to choose the block size the gives us the best possible AMAT. In modern processors, a common block size is 64 bytes (16 words).</p> <div class="lecslide"><a name="29"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide30.png" alt=""></a></div> <p>DM caches do have an Achilles heel.  Consider running the 3-instruction LOOPA code with the instructions located starting at word address 1024 and the data starting at word address 37 where the program is making alternating accesses to instruction and data, <i>e.g.</i>, a loop of LD instructions.</p> <p>Assuming a 1024-line DM cache with a block size of 1, the steady state hit ratio will be 100% once all six locations have been loaded into the cache since each location is mapped to a different cache line.</p> <p>Now consider the execution of the same program, but this time the data has been relocated to start at word address 2048.  Now the instructions and data are competing for use of the same cache lines. For example, the first instruction (at address 1024) and the first data word (at address 2048) both map to cache line 0, so only one them can be in the cache at a time.  So fetching the first instruction fills cache line 0 with the contents of location 1024, but then the first data access misses and then refills cache line 0 with the contents of location 2048.  The data address is said to <i>conflict</i> with the instruction address. The next time through the loop, the first instruction will no longer be in the cache and its fetch will cause a cache miss, called a <i>conflict miss</i>.  So in the steady state, the cache will never contain the word requested by the CPU.</p> <p>This is very unfortunate!  We were hoping to design a memory system that offered the simple abstraction of a flat, uniform address space. But in this example we see that simply changing a few addresses results in the cache hit ratio dropping from 100% to 0%.  The programmer will certainly notice her program running 10 times slower!</p> <p>So while we like the simplicity of DM caches, we’ll need to make some architectural changes to avoid the performance problems caused by conflict misses.</p> <div class="lecslide"><a name="30"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide31.png" alt=""></a></div> <p>A fully-associative (FA) cache has a tag comparator for each cache line.  So the tag field of *every* cache line in a FA cache is compared with the tag field of the incoming address.  Since all cache lines are searched, a particular memory location can be held in any cache line, which eliminates the problems of address conflicts causing conflict misses.  The cache shown here can hold 4 different 4-word blocks, regardless of their address.  The example from the end of the previous segment required a cache that could hold two 3-word blocks, one for the instructions in the loop, and one for the data words. This FA cache would use two of its cache lines to perform that task and achieve a 100% hit ratio regardless of the addresses of the instruction and data blocks.</p> <p>FA caches are very flexible and have high hit ratios for most applications.  Their only downside is cost: the inclusion of a tag comparator for each cache line to implement the parallel search for a tag match adds substantially the amount of circuitry required when there are many cache lines.  Even the use of hybrid storage/comparison circuitry, called a content-addressable memory, doesn’t make a big dent in the overall cost of a FA cache.</p> <p>DM caches searched only a single cache line.  FA caches search all cache lines.  Is there a happy middle ground where some small number of cache lines are searched in parallel?</p> <p>Yes!  If you look closely at the diagram of the FA cache shown here, you’ll see it looks like four 1-line DM caches operating in parallel. What would happen if we designed a cache with four multi-line DM caches operating in parallel?</p> <div class="lecslide"><a name="31"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide32.png" alt=""></a></div> <p>The result would be what we call an 4-way set-associative (SA) cache. An N-way SA cache is really just N DM caches (let’s call them sub-caches) operating in parallel.  Each of the N sub-caches compares the tag field of the incoming address with the tag field of the cache line selected by the index bits of the incoming address.  The N cache lines searched on a particular request form a search <i>set</i> and the desired location might be held in any member of the set.</p> <p>The 4-way SA cache shown here has 8 cache lines in each sub-cache, so each set contains 4 cache lines (one from each sub-cache) and there are a total of 8 sets (one for each line of the sub-caches).</p> <p>An N-way SA cache can accommodate up to N blocks whose addresses map to the same cache index.  So access to up to N blocks with conflicting addresses can still be accommodated in this cache without misses. This a big improvement over a DM cache where an address conflict will cause the current resident of a cache line to be evicted in favor of the new request.</p> <p>And an N-way SA cache can have a very large number of cache lines but still only have to pay the cost of N tag comparators.  This is a big improvement over a FA cache where a large number of cache lines would require a large number of comparators.</p> <p>So N-way SA caches are a good compromise between a conflict-prone DM cache and the flexible but very expensive FA cache.</p> <div class="lecslide"><a name="32"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide33.png" alt=""></a></div> <p>Here’s a slightly more detailed diagram, in this case of a 3-way 8-set cache.  Note that there’s no constraint that the number of ways be a power of two since we aren’t using any address bits to select a particular way.  This means the cache designer can fine tune the cache capacity to fit her space budget.</p> <p>Just to review the terminology: the N cache lines that will be searched for a particular cache index are called a set.  And each of N sub-caches is called a way.</p> <p>The hit logic in each <i>way</i> operates in parallel with the logic in other ways.  Is it possible for a particular address to be matched by more than one way?  That possibility isn’t ruled out by the hardware, but the SA cache is managed so that doesn’t happen.  Assuming we write the data fetched from DRAM during a cache miss into a single sub-cache - we’ll talk about how to choose that way in a minute — there’s no possibility that more than one sub-cache will ever match an incoming address.</p> <div class="lecslide"><a name="33"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide34.png" alt=""></a></div> <p>How many ways to do we need?  We’d like enough ways to avoid the cache line conflicts we experienced with the DM cache.  Looking at the graph we saw earlier of memory accesses vs. time, we see that in any time interval there are only so many potential address conflicts that we need to worry about.</p> <p>The mapping from addresses to cache lines is designed to avoid conflicts between neighboring locations.  So we only need to worry about conflicts between the different regions: code, stack and data. In the examples shown here there are three such regions, maybe 4 if you need two data regions to support copying from one data region to another.  If the time interval is particularly large, we might need double that number to avoid conflicts between accesses early in the time interval and accesses late in the time interval.</p> <p>The point is that a small number of ways should be sufficient to avoid most cache line conflicts in the cache.</p> <div class="lecslide"><a name="34"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide35.png" alt=""></a></div> <p>As with block size, it’s possible to have too much of a good thing: there’s an optimum number of ways that minimizes the AMAT.  Beyond that point, the additional circuity needed to combine the hit signals from a large number of ways will start have a significant propagation delay of its own, adding directly to the cache hit time and the AMAT.</p> <p>More to the point, the chart on the left shows that there’s little additional impact on the miss ratio beyond 4 to 8 ways.  For most programs, an 8-way set-associative cache with a large number of sets will perform on a par with the much more-expensive FA cache of equivalent capacity.</p> <div class="lecslide"><a name="35"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide36.png" alt=""></a></div> <p>There’s one final issue to resolve with SA and FA caches.  When there’s a cache miss, which cache line should be chosen to hold the data that will be fetched from main memory?  That’s not an issue with DM caches, since each data block can only be held in one particular cache line, determined by its address.  But in N-way SA caches, there are N possible cache lines to choose from, one in each of the ways. And in a FA cache, any of the cache lines can be chosen.</p> <p>So, how to choose?  Our goal is to choose to replace the contents of the cache line which will minimize the impact on the hit ratio in the future.</p> <div class="lecslide"><a name="36"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide37.png" alt=""></a></div> <p>The optimal choice is to replace the block that is accessed furthest in the future (or perhaps is never accessed again).  But that requires knowing the future...</p> <p>Here’s an idea: let’s predict future accesses by looking at recent accesses and applying the principle of locality.  If a block has not been recently accessed, it’s less likely to be accessed in the near future.</p> <p>That suggests the least-recently-used replacement strategy, usually referred to as LRU: replace the block that was accessed furthest in the past.  LRU works well in practice, but requires us to keep a list ordered by last use for each set of cache lines, which would need to be updated on each cache access.  When we needed to choose which member of a set to replace, we’d choose the last cache line on this list.  For an 8-way SA cache there are 8! possible orderings, so we’d need log2(8!) = 16 state bits to encode the current ordering.  The logic to update these state bits on each access isn’t cheap; basically you need a lookup table to map the current 16-bit value to the next 16-bit value.  So most caches implement an approximation to LRU where the update function is much simpler to compute.</p> <p>There are other possible replacement policies: First-in, first-out, where the oldest cache line is replaced regardless of when it was last accessed.  And Random, where some sort of pseudo-random number generator is used to select the replacement.</p> <p>All replacement strategies except for random can be defeated.  If you know a cache’s replacement strategy you can design a program that will have an abysmal hit rate by accessing addresses you know the cache just replaced.  I’m not sure I care about how well a program designed to get bad performance runs on my system, but the point is that most replacement strategies will occasionally cause a particular program to execute much more slowly than expected.</p> <p>When all is said and done, an LRU replacement strategy or a close approximation is a reasonable choice.</p> <div class="lecslide"><a name="37"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide38.png" alt=""></a></div> <p>Okay, one more cache design decision to make, then we’re done!</p> <p>How should we handle memory writes in the cache?  Ultimately we’ll need update main memory with the new data, but when should that happen?</p> <p>The most obvious choice is to perform the write immediately. In other words, whenever the CPU sends a write request to the cache, the cache then performs the same write to main memory.  This is called <i>write-through</i>.  That way main memory always has the most up-to-date value for all locations.  But this can be slow if the CPU has to wait for a DRAM write access — writes could become a real bottleneck!  And what if the program is constantly writing a particular memory location, <i>e.g.</i>, updating the value of a local variable in the current stack frame?  In the end we only need to write the last value to main memory.  Writing all the earlier values is waste of memory bandwidth.</p> <p>Suppose we let the CPU continue execution while the cache waits for the write to main memory to complete — this is called <i>write-behind</i>. This will overlap execution of the program with the slow writes to main memory.  Of course, if there’s another cache miss while the write is still pending, everything will have to wait at that point until both the write and subsequent refill read finish, since the CPU can’t proceed until the cache miss is resolved.</p> <p>The best strategy is called <i>write-back</i> where the contents of the cache are updated and the CPU continues execution immediately.  The updated cache value is only written to main memory when the cache line is chosen as the replacement line for a cache miss.  This strategy minimizes the number of accesses to main memory, preserving the memory bandwidth for other operations.  This is the strategy used by most modern processors.</p> <div class="lecslide"><a name="38"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide39.png" alt=""></a></div> <p>Write-back is easy to implement.  Returning to our original cache recipe, we simply eliminate the start of the write to main memory when there’s a write request to the cache.  We just update the cache contents and leave it at that.</p> <p>However, replacing a cache line becomes a more complex operation, since we can’t reuse the cache line without first writing its contents back to main memory in case they had been modified by an earlier write access.</p> <p>Hmm.  Seems like this does a write-back of all replaced cache lines whether or not they’ve been written to.</p> <div class="lecslide"><a name="39"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide40.png" alt=""></a></div> <p>We can avoid unnecessary write-backs by adding another state bit to each cache line: the <i>dirty</i> bit.  The dirty bit is set to 0 when a cache line is filled during a cache miss.  If a subsequent write operation changes the data in a cache line, the dirty bit is set to 1, indicating that value in the cache now differs from the value in main memory.</p> <p>When a cache line is selected for replacement, we only need to write its data back to main memory if its dirty bit is 1.</p> <p>So a write-back strategy with a dirty bit gives an elegant solution that minimizes the number of writes to main memory and only delays the CPU on a cache miss if a dirty cache line needs to be written back to memory.</p> <div class="lecslide"><a name="40"><img class="lecslideimg" src="../../../contents/c14/c14s1/Slide41.png" alt=""></a></div> <p>That concludes our discussion of caches, which was motivated by our desire to minimize the average memory access time by building a hierarchical memory system that had both low latency and high capacity.</p> <p>There were a number of strategies we employed to achieve our goal.</p> <p>Increasing the number of cache lines decreases AMAT by decreasing the miss ratio.</p> <p>Increasing the block size of the cache let us take advantage of the fast column accesses in a DRAM to efficiently load a whole block of data on a cache miss.  The expectation was that this would improve AMAT by increasing the number of hits in the future as accesses were made to nearby locations.</p> <p>Increasing the number of ways in the cache reduced the possibility of cache line conflicts, lowering the miss ratio.</p> <p>Choosing the least-recently used cache line for replacement minimized the impact of replacement on the hit ratio.</p> <p>And, finally, we chose to handle writes using a write-back strategy with dirty bits.</p> <p>How do we make the tradeoffs among all these architectural choices? As usual, we’ll simulate different cache organizations and chose the architectural mix that provides the best performance on our benchmark programs.</p> <ul class="navigation progress">     <li id="bck_btn"><a href="../../../contents/c14/index.htm">Back<span>Caches and the Memory Hierarchy</span></a></li>     <li id="continue_btn"><a href="../../../contents/c14/c14s2/index.htm">Continue<span>Topic Videos</span></a></li> </ul>
	                    
    
    
    



	        			
	                    
	                    
	                    
	                    

            		 </main><!--Course_inner_section tag close -->
           		     <div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer"><div id="footer">
<nav aria-label="Footer">     <nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses">       <span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
</ul>
</nav>
<div id="foot-c2" class="grid_2"><nav aria-labelledby="f-for-educators">         <span id="f-for-educators" class="footer" aria-hidden="true">For Educators</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
    <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal </a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
    <li><a href="https://openlearning.mit.edu/campus/digital-innovations/" aria-label="External Link: Residential Digital Innovations">Residential Digital Innovations </a></li>
    <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
</ul>
</nav></div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate">       <span id="f-donate" class="footer" aria-hidden="true">Give Now</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
    <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul>
</nav>
<div class="grid_2" id="foot-c4">
<nav aria-labelledby="f-about">         <span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
    <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
</ul>
</nav><!--about-->       <nav aria-labelledby="f-tools">         <span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="https://ocw.mit.edu/about/contactus">Contact Us</a></li>
    <li><a href="https://accessibility.mit.edu/" target="_blank">Accessibility</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul>
</nav><!--tools-->
</div>
</nav> <aside style="min-height: 289px;" aria-labelledby="f-our-corporate-supporters" class="grid_4 omega" id="foot-c5">           <span aria-hidden="true" class="footer" id="f-our-corporate-supporters">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div id="div-gpt-ad-1388181177156-0" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div id="div-gpt-ad-1388181177156-1" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div id="div-gpt-ad-1388181177156-2" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div id="div-gpt-ad-1388181177156-3" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div id="div-gpt-ad-1388181177156-4" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div id="div-gpt-ad-1388181177156-5" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside>
<div class="grid_12 alpha omega" itemprop="publisher" itemscope="" itemtype="http://schema.org/CollegeOrUniversity">
<h4 class="footer" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;">About <span itemprop="name">MIT OpenCourseWare</span>
</h4>
<p style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;" itemprop="description">MIT OpenCourseWare is an online publication of materials from over 2,500 MIT courses, freely sharing knowledge with learners and educators around the world. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
</div>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu"><img src="../../../common/images/logo_mit.png" alt="Massachusetts Institute of Technology logo and name." style="width: 195; height: 44;"></a><a href="https://openlearning.mit.edu/"><img src="https://ocw.mit.edu/images/mitol_logo.png" alt="MIT Open Learning logo and name." style="width: 265; height: 50; vertical-align: top; padding-left:30px;"></a><a href="https://www.oeglobal.org/"><img src="https://ocw.mit.edu/images/oeg_logo.gif" alt="Open Education Consortium logo." style="width: 219px; height: 59px; vertical-align: top; padding-left:20px;"></a><a rel="license" itemprop="useRightsUrl" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="../../../common/images/cc_by-nc-sa.png" alt="Creative Commons logo with terms BY-NC-SA." style="width: 126px; height: 44px; margin-right: 0; padding-left: 20px;"></a>
<p class="copyright">© 2001–2018<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="license">Creative Commons License</a> and other <a href="../../../common/terms/index.htm" rel="cc:morePermissions">terms of use</a>.</p>
</div>
</div></div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->


   </body>
 </html>
