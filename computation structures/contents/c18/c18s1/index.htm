<!DOCTYPE html><html lang="en">
      
      
        
    
    
    
    

      
      
      <head>
        <meta charset="utf-8">
        <meta name="format-detection" content="telephone=no">  
        
        <title>18.1 Annotated Slides | 18 Devices and Interrupts | Computation Structures | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
    <!-- Begin Automatic Metadata Insertion -->
    <meta content="6-004-computation-structures-spring-2017" name="WT.cg_n">
    <meta content="18.1 Annotated Slides" name="WT.cg_s">
    <meta content="" name="Description">
    <meta content="Terman, Chris" name="Author">
    <meta content="6.004,computation,computation structure,primitives, gates,instructions,procedures,processes,concurrency,instruction set design,software structure,digital system,MOS transistor,logic gate,combinational circuit,sequential circuit,finite-state machines,computer architecture,programming,RISC processor,Computer Design and Engineering,Digital Systems" name="keywords">
    <meta content="6.004 Computation Structures | 18.1 Annotated Slides" name="Search_Display">
    <meta content="Computer Design and Engineering" itemprop="about">
    <meta content="Digital Systems" itemprop="about">
    <!-- End Automatic Metadata Insertion -->

	<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/search.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
	<link href="../../../common/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
	<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2017/c18/c18s1/">
	<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
	
	
      <script type="text/x-mathjax-config">
		MathJax.Hub.Config({
			TeX: { equationNumbers: { autoNumber: "AMS" } },		
	  		displayAlign: "left",
	  		displayIndent: "2em",
	  		menuSettings: {zoom: "Double-Click", mpContext: true, mpMouse: true},
			errorSettings: { message: ["[Math Error]"] }  		
			});
	</script>
	
	<script type="text/javascript" src="../../../common/scripts/jquery.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script>
	<script type="text/javascript" src="../../../common/scripts/expandy.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=70ac07d7-b28f-4071-816f-d292aba4849f"></script>
	<script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js?config=TeX-MML-AM_SVG"></script>
	
	
	
    
    
    
    
    
    
    
      
       
		 

        
        
        

        
        
        
        
        
        
        
        
        
      </head>
    <body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW">
<table class="social">
    <tbody>
        <tr>
            <td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>  <a aria-label="Instagram" href="https://www.instagram.com/mitocw/"><img src="https://ocw.mit.edu/images/icon_ig.png" alt="Click to visit our Instagram page."></a> <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="https://ocw.mit.edu/images/icon_twitter.png" alt="Click to visit our Twitter feed."></a><a aria-label="YouTube" href="https://www.youtube.com/mitocw" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_yt.png" alt="Click to visit our YouTube page."></a><span style="font-size: 12.208px;">   </span><a aria-label="Open Matters blog on WordPress" href="https://www.ocw-openmatters.org/" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_wp.png" alt="Click to visit our blog on WordPress."></a>
</td>
        </tr>
    </tbody>
</table>
</aside><nav aria-label="Help Links" class="helplinks">     <a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/about/contactus.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>

<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75">
<div class="portletStaticText portlet-static-mega-menu"><div><nav id="mega" class="grid_8 alpha" aria-label="Site">
<ul id="menu" role="presentation">
    <li id="menu_home">
<a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
</li>
    <!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses">
<a href="#" aria-hidden="true">FIND COURSES</a><!-- Begin 5 columns Item -->
    <div class="dropdown_5columns-a mega-courses">
    <div class="col_1a">
    <div class="row_1a">
<nav aria-labelledby="mm-find-courses-by">     <span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
    <ul class="find_by" role="presentation">
        <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
    </ul>
    </nav>     <nav aria-labelledby="mm-collections">     <span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
        <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
        <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
        <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    </ul>
    </nav>     <nav class="col_1b" aria-labelledby="mm-translated-courses">     <span id="mm-translated-courses" class="nav" aria-hidden="true" style="line-height: 1.3;">Cross-Disciplinary Topic Lists</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
        <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
        <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
        <li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
        <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
        <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
    </ul>
    </nav>
</div>
    <div class="row_1b"><nav aria-labelledby="mm-cross-disciplinary-topic-lists">     <span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Translated Courses</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
    </ul>
    </nav></div>
    </div>
    </div>
    </li>
    <li id="drop_2">
<a href="#" aria-label="For Educators">For Educators</a>
    <div class="dropdown_1column-a" style="width: 270px;"><nav aria-labelledby="mm-find-courses-by">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/chalk-radio-podcast">Chalk Radio Podcast</a></li>
        <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
        <li><a href="https://openlearning.mit.edu/campus/digital-innovations/">Residential Digital Innovations </a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_3">
<a href="#" aria-hidden="true">Give Now</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="Donate">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
        <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
        <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
        <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
        <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_4">
<a href="#" aria-hidden="true">About</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="About">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
        <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
        <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
        <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
        <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
        <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
    </ul>
    </nav></div>
    </li>
</ul>
</nav></div></div>

</div>





<!--googleoff: index-->
<script>
  (function() {
	var cx = '012626166551961672889:owjdpuboktq';
	var gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(gcse, s);
  })();
  window.onload = function(){
	document.getElementById('gsc-i-id1').placeholder = 'Search';	
  };

$(document).ready(function(){

$('.advanceSearch a').keydown(function(event){showSearchTips($(this),event);})
$('#searchTipsModal').keydown(function(event){showSearchTips($(this),event);})

function showSearchTips(obj,evt) {
// if pressed enter key
	if ( evt.which == 13 || evt.which == 32) {
		showModal();
		ga('send', 'pageview', "AdvanceSearch");
		$(".advanceSearch a").attr('aria-expanded', 'true');
		$('.searchTipsModal').focus();
		evt.preventDefault();
		}
	if ( evt.which == 27 ) {
		hideModal();
		$(".advanceSearch a").attr('aria-expanded', 'false');
		var modal = document.getElementById('searchTipsModal');
		modal.style.display = "none";
		$(".advanceSearch a").focus();
		evt.preventDefault();
		}
}

});
function showModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "block";
	ga('send', 'pageview', "AdvanceSearch");
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", true);
	window.setTimeout(function () {
    document.getElementById('searchTipsModal').focus(); }, 0);
}

function hideModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "none";
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", false);
}
</script>
<div id="search" role="search" class="grid_4 omega">
    	<table class="search">
				<tbody>
					<tr>
						<td><div class="searchboxheader"><searchbox-only resultsurl="/search/ocwsearch.htm"></searchbox-only></div></td>
						<td>
							<div class="advanceSearch">
								<a id="searchTipsBtn" onclick="showModal();" href="#" role="button" aria-label="search tips" aria-expanded="false" aria-describedby="searchtips">Search Tips</a>

								<!-- The Modal -->
								<div id="searchTipsModal" class="modal" tabindex="-1">
								  <!-- Modal content -->
									<div class="modal-content">
										<div class="modal-body">
											<button class="close" onclick="hideModal();" aria-label="close">X</button>
											<span>
												<b>Exclude words from your search</b>
												<br>Put - in front of a word you want to leave out. For example, jaguar speed -car
												<br><br>
												<b>Search for an exact match</b>
												<br>Put a word or phrase inside quotes. For example, "tallest building".
												<br><br>
												<b>Search for wildcards or unknown words</b>
												<br>Put a * in your word or phrase where you want to leave a placeholder. For example, "largest * in the world".
												<br><br>
												<b>Search within a range of numbers</b>
												<br>Put .. between two numbers. For example, camera $50..$100.
												<br><br>
												<b>Combine searches</b>
												<br>Put "OR" between each search query. For example,  marathon OR race.
												<br><br>
											</span>
										</div>
								  </div>
								</div>
							</div>
						</td>
					</tr>
				</tbody>
		</table>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end -->
			
		<div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb">
                      <p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Computation Structures</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/c18/index.htm">18 Devices and Interrupts</a>
            
                »
                
            
            
         
    
    
        
            
            
            18.1 Annotated Slides
         
    
</p>

                 </nav>
                 <div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            18.1 Annotated Slides
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course">
               			 



<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script>
<!--Left Nav Starts -->


	<ul>			  
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="instructor-insights" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuinstructor-insights'); toggleClass('instructor-insights'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/instructor-insights/index.htm" class="">
		                  Instructor Insights  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuinstructor-insights" class="">
					               
		            <li class="">
				 		<a href="../../../contents/instructor-insights/an-interview-with-christopher-terman-on-teaching-computation-structures/index.htm" class="">An Interview with Christopher Terman</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/meet-the-educator/index.htm" class="">Meet the Educator</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/when-students-come-with-different-backgrounds-offer-a-buffet-of-learning-materials/index.htm" class="">A Buffet of Learning Materials</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-the-mitx-platform-to-structure-learning-sequences/index.htm" class="">Using the MITx Platform</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/conceptualizing-online-courses-as-educational-labs/index.htm" class="">Online Courses as Educational Labs</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/teaching-large-lecture-classes-the-importance-of-stories-and-disfluency/index.htm" class="">The Importance of Stories and Disfluency</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-teaching-team-from-lab-assistants-to-faculty-members-the-range-of-experience-is-key/index.htm" class="">A Teaching Team with a Range of Experience</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/with-online-fora-being-stuck-is-just-a-10-minute-process/index.htm" class="">Being Stuck Is a 10-Minute Process</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-browser-based-programming-environments-to-engage-students-in-the-practice-of-engineering/index.htm" class="">Browser-Based Programming Environments</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/a-common-challenge-students-face-developing-confidence-in-systematically-solving-problems/index.htm" class="">Confidence in Problem-Solving</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/hallway-learning-the-value-of-common-learning-experiences-at-the-undergraduate-level/index.htm" class="">The Value of Common Experiences</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-fun-is-in-the-doing-of-the-puzzle-self-paced-mastery-learning-and-moving-beyond/index.htm" class="">Self-Paced Mastery Learning</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/engineering-learning-materials-an-iterative-process/index.htm" class="">Engineering Learning Materials</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c1" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc1'); toggleClass('c1'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c1/index.htm" class="">
		                  1 Basics of Information  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc1" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c1/c1s1/index.htm" class="">1.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s2/index.htm" class="">1.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s3/index.htm" class="">1.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c2" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc2'); toggleClass('c2'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c2/index.htm" class="">
		                  2 The Digital Abstraction  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc2" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c2/c2s1/index.htm" class="">2.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s2/index.htm" class="">2.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s3/index.htm" class="">2.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c3" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc3'); toggleClass('c3'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c3/index.htm" class="">
		                  3 CMOS  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc3" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c3/c3s1/index.htm" class="">3.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s2/index.htm" class="">3.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s3/index.htm" class="">3.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c4" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc4'); toggleClass('c4'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c4/index.htm" class="">
		                  4 Combinational Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc4" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c4/c4s1/index.htm" class="">4.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s2/index.htm" class="">4.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s3/index.htm" class="">4.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c5" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc5'); toggleClass('c5'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c5/index.htm" class="">
		                  5 Sequential Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc5" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c5/c5s1/index.htm" class="">5.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s2/index.htm" class="">5.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s3/index.htm" class="">5.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c6" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc6'); toggleClass('c6'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c6/index.htm" class="">
		                  6 Finite State Machines  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc6" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c6/c6s1/index.htm" class="">6.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s2/index.htm" class="">6.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s3/index.htm" class="">6.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c7" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc7'); toggleClass('c7'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c7/index.htm" class="">
		                  7 Performance Measures  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc7" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c7/c7s1/index.htm" class="">7.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s2/index.htm" class="">7.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s3/index.htm" class="">7.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c8" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc8'); toggleClass('c8'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c8/index.htm" class="">
		                  8 Design Tradeoffs  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc8" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c8/c8s1/index.htm" class="">8.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c8/c8s2/index.htm" class="">8.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c9" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc9'); toggleClass('c9'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c9/index.htm" class="">
		                  9 Designing an Instruction Set  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc9" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c9/c9s1/index.htm" class="">9.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s2/index.htm" class="">9.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s3/index.htm" class="">9.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c10" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc10'); toggleClass('c10'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c10/index.htm" class="">
		                  10 Assembly Language, Models of Computation  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc10" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c10/c10s1/index.htm" class="">10.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c10/c10s2/index.htm" class="">10.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c11" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc11'); toggleClass('c11'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c11/index.htm" class="">
		                  11 Compilers  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc11" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c11/c11s1/index.htm" class="">11.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s2/index.htm" class="">11.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s3/index.htm" class="">11.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c12" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc12'); toggleClass('c12'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c12/index.htm" class="">
		                  12 Procedures and Stacks  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc12" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c12/c12s1/index.htm" class="">12.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s2/index.htm" class="">12.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s3/index.htm" class="">12.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c13" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc13'); toggleClass('c13'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c13/index.htm" class="">
		                  13 Building the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc13" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c13/c13s1/index.htm" class="">13.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s2/index.htm" class="">13.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s3/index.htm" class="">13.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c14" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc14'); toggleClass('c14'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c14/index.htm" class="">
		                  14 Caches and the Memory Hierarchy  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc14" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c14/c14s1/index.htm" class="">14.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s2/index.htm" class="">14.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s3/index.htm" class="">14.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c15" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc15'); toggleClass('c15'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c15/index.htm" class="">
		                  15 Pipelining the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc15" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c15/c15s1/index.htm" class="">15.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s2/index.htm" class="">15.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s3/index.htm" class="">15.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c16" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc16'); toggleClass('c16'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c16/index.htm" class="">
		                  16 Virtual Memory  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc16" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c16/c16s1/index.htm" class="">16.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s2/index.htm" class="">16.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s3/index.htm" class="">16.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c17" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc17'); toggleClass('c17'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c17/index.htm" class="">
		                  17 Virtualizing the Processor  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc17" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c17/c17s1/index.htm" class="">17.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s2/index.htm" class="">17.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s3/index.htm" class="">17.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c18" class="mC">
						<a href="#" class="" onclick="toggleMenu('menuc18'); toggleClass('c18'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Collapse Menu" title="Collapse Menu">
		                </a>
		                <a href="../../../contents/c18/index.htm" class="">
		                  18 Devices and Interrupts  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc18" class="selected">
					               
		            <li class="selected">
				 		<a href="../../../contents/c18/c18s1/index.htm" class="selected">18.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s2/index.htm" class="">18.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s3/index.htm" class="">18.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c19" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc19'); toggleClass('c19'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c19/index.htm" class="">
		                  19 Concurrency and Synchronization  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc19" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c19/c19s1/index.htm" class="">19.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s2/index.htm" class="">19.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s3/index.htm" class="">19.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c20" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc20'); toggleClass('c20'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c20/index.htm" class="">
		                  20 System-level Communication  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc20" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c20/c20s1/index.htm" class="">20.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c20/c20s2/index.htm" class="">20.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c21" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc21'); toggleClass('c21'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c21/index.htm" class="">
		                  21 Parallel Processing  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc21" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c21/c21s1/index.htm" class="">21.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c21/c21s2/index.htm" class="">21.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>


<!--Left Nav Ends -->









           		     </nav>
           		     <main id="course_inner_section" aria-labelledby="section_title">
           		     	
	       		     	<ul class="navigation pagination">     <li id="top_bck_btn"><a href="../../../contents/c18/index.htm">&lt;<span>Devices and Interrupts</span></a></li>     <li id="flp_btn_1" class="button_selected"><a href="../../../contents/c18/c18s1/index.htm">18.1.1<span>Annotated slides</span></a></li>     <li id="top_continue_btn"><a href="../../../contents/c18/c18s2/index.htm">&gt;<span>Topic Videos</span></a></li> </ul> <p><style type="text/css">
.toc {
  margin-left: 2em;
}
.lecslide {
  margin-top: 1em;
  margin-bottom: 1em;
  border-top: 0.5px solid #808080;
  padding-top: 1em;
  text-align: center;
}
.lecslideimg {
  width: 5in;
  border: 1px solid black;
}
</style></p> <h1>L18: Devices and Interrupts</h1> <div class="toc"><ol>     <li style="margin-bottom:0.1em;"><a href="#1">OS Organization: I/O Devices</a></li>     <li style="margin-bottom:0.1em;"><a href="#2">Asynchronous I/O Handling</a></li>     <li style="margin-bottom:0.1em;"><a href="#3">Interrupt-based Asynch I/O</a></li>     <li style="margin-bottom:0.1em;"><a href="#4">ReadKey SVC: Attempt #1</a></li>     <li style="margin-bottom:0.1em;"><a href="#5">ReadKey SVC: Attempt #2</a></li>     <li style="margin-bottom:0.1em;"><a href="#6">ReadKey SVC: Attempt #3</a></li>     <li style="margin-bottom:0.1em;"><a href="#7">Sophisticated Scheduling</a></li>     <li style="margin-bottom:0.1em;"><a href="#8">ReadKey SVC: Attempt #4</a></li>     <li style="margin-bottom:0.1em;"><a href="#9">Example: Match Handler to OS</a></li>     <li style="margin-bottom:0.1em;"><a href="#10">Which Handler and OS? #1</a></li>     <li style="margin-bottom:0.1em;"><a href="#11">Which Handler and OS? #2</a></li>     <li style="margin-bottom:0.1em;"><a href="#12">Which Handler and OS? #3</a></li>     <li style="margin-bottom:0.1em;"><a href="#13">The Need for “Real Time”</a></li>     <li style="margin-bottom:0.1em;"><a href="#14">Interrupt Latency</a></li>     <li style="margin-bottom:0.1em;"><a href="#15">Sources of Interrupt Latency</a></li>     <li style="margin-bottom:0.1em;"><a href="#16">Scheduling of Multiple Devices</a></li>     <li style="margin-bottom:0.1em;"><a href="#17">Weak (Non-preemptive) Priorities</a></li>     <li style="margin-bottom:0.1em;"><a href="#18">Setting Priorities</a></li>     <li style="margin-bottom:0.1em;"><a href="#19">The Need for Preemption</a></li>     <li style="margin-bottom:0.1em;"><a href="#20">Strong Priority Implementation</a></li>     <li style="margin-bottom:0.1em;"><a href="#21">Recurring Interrupts</a></li>     <li style="margin-bottom:0.1em;"><a href="#22">Interrupt Load</a></li>     <li style="margin-bottom:0.1em;"><a href="#23">Mr. Blue Visits the ISS</a></li>     <li style="margin-bottom:0.1em;"><a href="#24">Mr. Blue Visits the ISS (cont’'d.)</a></li>     <li style="margin-bottom:0.1em;"><a href="#25">Summary</a></li> </ol></div> <p><strong>Content of the following slides is described in the surrounding text.</strong></p> <div class="lecslide"><a name="1"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide02.png" alt=""></a></div> <p>Let’s turn our attention to how the operating system (OS)   deals with input/output devices.  There are actually two parts   to the discussion.  First, we’ll talk about how the OS   interacts with the devices themselves.  This will involve a   combination of interrupt handlers and kernel buffers.  Then   we’ll discuss how supervisor calls access the kernel   buffers in response to requests from user-mode processes.  As   we’ll see, this can get a bit tricky when the OS cannot   complete the request at the time the SVC was executed.</p> <div class="lecslide"><a name="2"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide03.png" alt=""></a></div> <p>Here’s the plan!  When the user types a key on the   keyboard, the keyboard triggers an interrupt request to the CPU.   The interrupt suspends execution of the currently-running   process and executes the handler whose job it is to deal with   this particular I/O event.</p> <p>In this case, the keyboard handler reads the character from the   keyboard and saves it in a kernel buffer associated with the   process that has been chosen to receive incoming keystrokes.  In   the language of OSes, we’d say that process has the   keyboard focus.  This transfer takes just a handful of   instructions and when the handler exits, we resume running the   interrupted process.</p> <p>Assuming the interrupt request is serviced promptly, the CPU   can easily keep up with the arrival of typed characters.  Humans   are pretty slow compared to the rate of executing instructions!   But the buffer in the kernel can hold only so many characters   before it fills up.  What happens then?</p> <p>Well, there are a couple of choices.  Overwriting characters   received earlier doesn’t make much sense: why keep later   characters if the earlier ones have been discarded.  Better that   the CPU discard any characters received after the buffer was   full, but it should give some indication that it’s doing   so.  And, in fact, many systems beep at the user to signal that   the character they’ve just typed is being ignored.</p> <p>At some later time, a user-mode program executes a ReadKey()   supervisor call, requesting that the OS return the next   character in R0.  In the OS, the ReadKey SVC handler grabs the   next character from the buffer, places it in the user’s   R0, and resumes execution at the instruction following the   SVC.</p> <p>There are few tricky bits we need to figure out.  The ReadKey()   SVC is what we call a “blocking I/O”   request, <i>i.e.</i>, the program assumes that when the SVC   returns, the next character is in R0.  If there isn’t   (yet) a character to be returned, execution should be   “blocked”,   <i>i.e.</i>, suspended, until such time that a character is   available.</p> <p>Many OSes also provide for non-blocking I/O requests, which   always return immediately with both a status flag and a result.   The program can check the status flag to see if there was a   character and do the right thing if there   wasn’t, <i>e.g.</i>, reissue the request at a later   time.</p> <div class="lecslide"><a name="3"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide04.png" alt=""></a></div> <p>Note that the user-mode program didn’t have any direct   interaction with the keyboard, <i>i.e.</i>, it’s not   constantly polling the device to see if there’s a   keystroke to be processed.  Instead, we’re using an   “event-driven” approach, where the device signals   the OS, via an interrupt, when it needs attention.</p> <p>This is an elegant separation of responsibilities.  Imagine how   cumbersome it would be if every program had to check constantly   to see if there were pending I/O operations.  Our event-driven   organization provides for on-demand servicing of devices, but   doesn’t devote CPU resources to the I/O subsystem until   there’s actually work to be done.  The interrupt-driven OS   interactions with I/O devices are completely transparent to user   programs.</p> <p>Here’s sketch of what the OS keyboard handler code might   actually look like.  Depending on the hardware, the CPU might   access device status and data using special I/O instructions in   the ISA.  For example, in the simulated Beta used for lab   assignments, there’s a RDCHAR() instruction for reading   keyboard characters and a CLICK() instruction for reading the   coordinates of a mouse click.</p> <p>Another common approach is to use “memory-mapped   I/O”, where a portion of the kernel address space is   devoted to servicing I/O devices.  In this scheme, ordinary LD   and ST store instructions are used to access specific addresses,   which the CPU recognizes as accesses to the keyboard or mouse   device interfaces.  This is the scheme shown in the code here.   The C data structure represents the two I/O locations devoted to   the keyboard: one for status and one for the actual keyboard   data.</p> <p>The keyboard interrupt handler reads the keystroke data from   the keyboard and places the character into the next location in   the circular character buffer in the kernel.</p> <p>In real life keyboard processing is usually a bit more   complicated.  What one actually reads from a keyboard is a key   number and a flag indicating whether the event is a key press or   a key release.  Knowing the keyboard layout, the OS translates   the key number into the appropriate ASCII character, dealing   with complications like holding down the shift key or control   key to indicate a capital character or a control character.  And   certain combination of keystrokes, <i>e.g.</i>, CTRL-ALT-DEL on   a Windows system, are interpreted as special user commands to   start running particular applications like the Task Manager.   Many OSes let the user specify whether they want   “raw” keyboard input (<i>i.e.</i>, the key numbers   and status) or “digested” input (<i>i.e.</i>, ASCII   characters).</p> <p>Whew!  Who knew that processing keystrokes could be so complicated!</p> <p>Next, we’ll figure out how to code the associated   supervisor call that lets user programs read characters.</p> <div class="lecslide"><a name="4"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide05.png" alt=""></a></div> <p>When a user-mode program wants to read a typed character it   executes a ReadKey() SVC.  The binary representation of the SVC   has an illegal value in the opcode field, so the CPU hardware   causes an exception, which starts executing the illegal opcode   handler in the OS.  The OS handler recognizes the illegal opcode   value as being an SVC and uses the low-order bits of the SVC   instruction to determine which sub-handler to call.</p> <p>Here’s our first draft for the ReadKey sub-handler, this   time written in C.  The handler starts by looking at the process   table entry for the current process to determine which keyboard   buffer holds the characters for the process.  Let’s assume   for the moment the buffer is *not* empty and skip to the last   line, which reads the character from the buffer and uses it to   replace the saved value for the user’s R0 in the array   holding the saved register values.  When the handler exits, the   OS will reload the saved registers and resume execution of the   user-mode program with the just-read character in R0.</p> <p>Now let’s figure what to do when the keyboard buffer is   empty.  The code shown here simply loops until the buffer is no   longer empty.  The theory is that eventually the user will type   a character, causing an interrupt, which will run the keyboard   interrupt handler discussed in the previous section, which will   store a new character into the buffer.</p> <p>This all sounds good until we remember that the SVC handler is   running with the supervisor bit (PC[31]) set to 1, disabling   interrupts.  Oops!  Since the keyboard interrupt will never   happen, the while loop shown here is actually an infinite loop.   So if the user-mode program tries to read a character from an   empty buffer, the system will appear to hang, not responding to   any external inputs since interrupts are disabled.  Time to   reach for the power switch :)</p> <div class="lecslide"><a name="5"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide06.png" alt=""></a></div> <p>We’ll fix the looping problem by adding code to subtract   4 from the saved value of the XP register before returning.  How   does this fix the problem?</p> <p>Recall that when the SVC illegal instruction exception   happened, the CPU stored the PC+4 value of the illegal   instruction in the user’s XP register.  When the handler   exits, the OS will resume execution of the user-mode program by   reloading the registers and then executing a JMP(XP), which   would normally then execute the instruction *following* the SVC   instruction.  By subtracting 4 from the saved XP value, it will   be the SVC itself that gets re-executed.</p> <p>That, of course, means we’ll go through the same set of   steps again, repeating the cycle until the keyboard buffer is no   longer empty.  It’s just a more complicated loop!  But   with a crucial difference: one of the instructions — the   ReadKey() SVC — is executed in user-mode with PC[31] = 0.  So   during that cycle, if there’s a pending interrupt from the   keyboard, the device interrupt will supersede the execution of   the ReadKey() and the keyboard buffer will be filled.  When the   keyboard interrupt handler finishes, the ReadKey() SVC will be   executed again, this time finding that the buffer is no longer   empty.  Yay!</p> <p>So this version of the handler actually works, with one small   caveat.  If the buffer is empty, the user-mode program will   continually re-execute the complicated user-mode/kernel-mode   loop until the timer interrupt eventually transfers control to   the next process.  This seems pretty inefficient.  Once   we’ve checked and found the buffer is empty, it would be   better to give other processes a chance to run before we try   again.</p> <div class="lecslide"><a name="6"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide07.png" alt=""></a></div> <p>This problem is easy to fix!  We’ll just add a call to   Scheduler() right after arranging for the ReadKey() SVC to be   re-executed.  The call to Scheduler() suspends execution of the   current process and arranges for the next process to run when   the handler exits.  Eventually the round-robin scheduling will   come back to the current process and the ReadKey() SVC will try   again.</p> <p>With this simple one-line fix the system will spend much less   time wasting cycles checking the empty buffer and instead use   those cycles to run other, hopefully more productive, processes.   The cost is a small delay in restarting the program after a   character is typed, but typically the time slices for each   process are small enough that one round of process execution   happens more quickly than the time between two typed characters,   so the extra delay isn’t noticeable.</p> <p>So now we have some insights into one of the traditional   arguments against timesharing.  The argument goes as follows.   Suppose we have 10 processes, each of which takes 1 second to   complete its computation.  Without timesharing, the first   process would be done after 1 second, the second after 2   seconds, and so on.  With timesharing using, say, a 1/10 second   time slice, all the processes will complete sometime after 10   seconds since there’s a little extra time needed for the   hundred or so process switches that would happen before   completion.  So in a timesharing system the time-to-completion   for *all* processes is as long the worst-case completion time   without time sharing!  So why bother with timesharing?</p> <p>We saw one answer to this question earlier in this slide.  If a   process can’t make productive use of its time slice, it   can donate those cycles to completion of some other task.  So in   a system where most processes are waiting for some sort of I/O,   timesharing is actually a great way of spending cycles where   they’ll do the most good.</p> <p>If you open the Task Manager or Activity Monitor on the system   you’re using now, you’ll see there are hundreds of   processes, almost all of which are in some sort of I/O wait.  So   timesharing does extract a cost when running compute-intensive   computations, but in an actual system where there’s a mix   of I/O and compute tasks, time sharing is the way to go.</p> <div class="lecslide"><a name="7"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide08.png" alt=""></a></div> <p>We can actually go one step further to ensure we don’t   run processes waiting for an I/O event that hasn’t yet   happened.  We’ll add a status field to the process state   indicating whether the process is ACTIVE (<i>e.g.</i>, status is   0) or WAITING (<i>e.g.</i>, status is non-zero).  We’ll   use different non-zero values to indicate what event the process   is waiting for.  Then we’ll change the Scheduler() to only   run ACTIVE processes.</p> <p>To see how this works, it’s easiest to use a concrete   example.  The UNIX OS has two kernel subroutines: sleep() and   wakeup() both of which require a non-zero argument.  The   argument will be used as the value of the status field.   Let’s see this in action.</p> <div class="lecslide"><a name="8"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide09.png" alt=""></a></div> <p>When the ReadKey() SVC detects the buffer is empty, it calls   sleep() with an argument that uniquely identifies the I/O event   it’s waiting for, in this case the arrival of a character   in a particular buffer.  sleep() sets the process status to this   unique identifier, then calls Scheduler().</p> <p>Scheduler() has been modified to skip over processes with a   non-zero status, not giving them a chance to run.  Meanwhile, a   keyboard interrupt will cause the interrupt handler to add a   character to the keyboard buffer and call wakeup() to signal any   process waiting on that buffer.  Watch what happens when the   kbdnum in the interrupt handler matches the kbdnum in the   ReadKey() handler.</p> <p>wakeup() loops through all processes, looking for ones that are   waiting for this particular I/O event.  When it finds one, it   sets the status for the process to zero, marking it as ACTIVE.   The zero status will cause the process to run again next time   the Scheduler() reaches it in its round-robin search for things   to do.</p> <p>The effect is that once a process goes to sleep() WAITING for   an event, it’s not considered for execution again until   the event occurs and wakeup() marks the process as ACTIVE.   Pretty neat!  Another elegant fix to ensure that no CPU cycles   are wasted on useless activity.  I can remember how impressed I   was when I first saw this many years ago in a (very) early   version of the UNIX code :)</p> <div class="lecslide"><a name="9"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide10.png" alt=""></a></div> <p>Here’s an old quiz problem we can use to test our   understanding of all the factors that went into the final design   of our ReadKey() SVC code.  We’re considering three   different versions (R1, R2, and R3) of the ReadKey() SVC code,   all variants of the various attempts from the previous section.   And there are three types of systems (Models A, B, and C).   We’ve been asked to match the three handlers to the   appropriate system.</p> <p>Looking at R1, we see it’s similar to Attempt #2 from the   previous section, except it always reads from the same keyboard   regardless of the process making the SVC request.  That   wouldn’t make much sense in a timesharing system since a   single stream of input characters would be shared across all the   processes.  So this handler must be intended for the Model C   system, which has only a single process.</p> <p>Looking at R2, we see it’s similar to Attempt #1 from the   previous section, which had the fatal flaw of a potentially   infinite loop if attempting to read from an empty buffer.  So   this code would only run successfully on the Model B system,   which *does* allow device interrupts even when the CPU is   running inside an SVC call.  So the keyboard interrupt would   interrupt the while loop in R2 and the next iteration of the   loop would discover that buffer was no longer empty.</p> <p>By the process of elimination that leaves the R3 handler to be   paired with the Model A system.  R3 is Attempt #3 from the   previous section and is designed for our standard system in   which the kernel is uninterruptible.</p> <div class="lecslide"><a name="10"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide11.png" alt=""></a></div> <p>The problem goes on to say that a fumble-fingered summer intern   has jumbled up the disks containing the handlers and sent an   unknown handler version to each user running one of the three   model systems.  To atone for the mistake, he’s been   assigned the task of reading various user messages sent after   the user has tried the new handler disk on their particular   system.  Based on the message, he’s been asked to identify   which handler disk and system the user is using.</p> <p>The first message says “I get compile-time errors;   Scheduler and ProcTbl are undefined.”</p> <p>On the right of the slide we’ve included a table   enumerating all the combinations of handlers and systems, where   we’ve X-ed the matches from the previous slide since they   correspond to when the new handler would be the same as the old   handler and the user wouldn’t be sending a message!</p> <p>The phrase “Scheduler and ProcTbl are undefined”   wouldn’t apply to a timesharing system, which includes   both symbols.  So we can eliminate the first two columns from   consideration.  And we can also eliminate the second row, since   handler R2 doesn’t include a call to Scheduler.</p> <p>So this message came from a user trying to run handler R3 on a   Model C system.  Since Model C doesn’t support   timesharing, it would have neither Scheduler nor ProcTbl as part   the OS code.</p> <div class="lecslide"><a name="11"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide12.png" alt=""></a></div> <p>Okay, here’s the next message: “Hey, now the system   always reads everybody’s input from keyboard 0.  Besides   that, it seems to waste a lot more CPU cycles than it used   to.”</p> <p>R1 is the only handler that always reads from keyboard 0, so we   can eliminate rows 2 and 3.</p> <p>So how can we tell if R1 is being run on a Model A or a Model B   system.  The R1 handler wastes a lot of cycles looping while   waiting for a character to arrive and the implication is that   was a big change for the user since they’re complaining   that running R1 is wasting time compared to their previous   handler.  If the user had been running R2 on a model B system,   they’re already used to the performance hit of looping and   so wouldn’t have noticed a performance difference   switching to R1, so we can eliminate Model B from   consideration.</p> <p>So this message came from a user running handler R1 on a model   A system.</p> <div class="lecslide"><a name="12"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide13.png" alt=""></a></div> <p>The final message reads “Neat, the new system seems to   work fine.  It even wastes less CPU time than it used   to!”</p> <p>Since the system works as expected with the new handler, we can   eliminate a lot of possibilities.</p> <p>Handler R1 wouldn’t work fine on a timesharing system   since the user could tell that the processes were now all   reading from the same keyboard buffer, so we can eliminate R1 on   Models A and B.</p> <p>And handlers R2 and R3 wouldn’t work on a Model C system   since that doesn’t include process tables or scheduling,   eliminating the right-most column.</p> <p>Finally handler R2 wouldn’t work on a Model A system with   its uninterruptible kernel since any attempt to read from an   empty buffer would cause an infinite loop.</p> <p>So, the message must have been sent by a Model B user now running R3.</p> <p>Well, that was fun!  Just like solving the logic puzzles you   find in games magazines :)</p> <div class="lecslide"><a name="13"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide14.png" alt=""></a></div> <p>So far in constructing our timesharing system, we’ve   worked hard to build an execution environment that gives each   process the illusion of running on its own independent virtual   machine.  The processes appear to run concurrently although   we’re really quickly switching between running processes   on a single hardware system.  This often leads to better overall   utilization since if a particular process is waiting for an I/O   event, we can devote the unneeded cycles to running other   processes.</p> <p>The downside of timesharing is that it can be hard to predict   exactly how long a process will take to complete since the CPU   time it will receive depends on how much time the other   processes are using.  So we’d need to know how many other   processes there are, whether they’re waiting for I/O   events, etc.  In a timesharing system we can’t make any   guarantees on completion times.</p> <p>And we chose to have the OS play the intermediary between   interrupt events triggered by the outside world and the   user-mode programs where the event processing occurs.  In other   words, we’ve separated event handling (where the data is   stored by the OS) and event processing (where the data is passed   to user-mode programs via SVCs).</p> <p>This means that using a conventional timesharing system,   it’s hard to ensure that event processing will be complete   by a specified event deadline, <i>i.e.</i>, before the end of a   specified time period after the event was triggered.</p> <p>Since modern CPU chips provide inexpensive, high-performance,   general-purpose computing, they are often used as the   “brains” of control systems where deadlines are a   fact of life.</p> <p>For example, consider the electronic stability control (ESC)   system on modern cars.  This system helps drivers maintain   control of their vehicle during steering and braking maneuvers   by keeping the car headed in the driver’s intended   direction.  The computer at the heart of the system measures the   forces on the car, the direction of steering, and the rotation   of the wheels to determine if there’s been a loss of   control due to a loss of traction, <i>i.e.</i>, is the car   “spinning out”?  If so, the ESC uses rapid automatic   braking of individual wheels to prevent the car’s heading   from veering from the driver’s intended heading.  With ESC   you can slam on your brakes or swerve to avoid an obstacle and   not worry that the car will suddenly fishtail out of control.   You can feel the system working as a chatter in the brakes.</p> <p>To be effective, the ESC system has to guarantee the correct   braking action at each wheel within a certain time of receiving   dangerous sensor settings.  This means that it has to be able to   guarantee that certain subroutines will run to completion within   some predetermined time of a sensor event.  To be able to make   these guarantees we’ll have to come up with a better way   to schedule process execution — round-robin scheduling   won’t get the job done!  Systems that can make such   guarantees are called “real-time systems”.</p> <div class="lecslide"><a name="14"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide15.png" alt=""></a></div> <p>One measure of performance in a real-time system is the   interrupt latency L, the amount of time that elapses between a   request to run some code and when that code actually starts   executing.  If there’s a deadline D associated with   servicing the request, we can compute the maximum allowable   latency that still permits the service routine to complete by   the deadline.  In other words, what’s the largest L such   that \(L_{\textrm{max}}+S = D\)?</p> <p>Bad things can happen if we miss certain deadlines.  Maybe   that’s why we call them “dead”-lines :) In   those cases we want our real time system to guarantee that the   actual latency is always less than the maximum allowable   latency.  These critical deadlines give rise to what we call   “hard real-time constraints”.</p> <div class="lecslide"><a name="15"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide16.png" alt=""></a></div> <p>What factors contribute to interrupt latency?</p> <p>Well, while handling an interrupt it takes times to save the   process state, switch to the kernel context, and dispatch to the   correct interrupt handler.  When writing our OS, we can work to   minimize the amount of code involved in the setup phase of an   interrupt handler.</p> <p>We also have to avoid long periods of time when the processor   cannot be interrupted.  Some ISAs have complex multi-cycle   instructions, <i>e.g.</i>, block move instructions where a   single instruction makes many memory accesses as it moves a   block of data from one location to another.  In designing the   ISA, we need to avoid such instructions or design them so that   they can be interrupted and restarted.</p> <p>The biggest problem comes when we’re executing another   interrupt handler in kernel mode.  In kernel mode, interrupts   are disabled, so the actual latency will be determined by the   time it takes to complete the current interrupt handler in   addition to the other costs mentioned above.  This latency is   not under the control of the CPU designer and will depend on the   particular application.  Writing programs with hard real-time   constraints can get complicated!</p> <p>Our goal is to bound and minimize interrupt latency.   We’ll do this by optimizing the cost of taking an   interrupt and dispatching to the correct handler code.   We’ll avoid instructions whose execution time is data   dependent.  And we’ll work to minimize the time spent in   kernel mode.</p> <p>But even with all these measures, we’ll see that in some   cases we’ll have to modify our system to allow interrupts   even in kernel mode.</p> <p>Next we’ll look at some concrete examples and see what   mechanisms are required to make guarantees about hard real-time   constraints.</p> <div class="lecslide"><a name="16"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide17.png" alt=""></a></div> <p>Suppose we have a real-time system supporting three devices: a   keyboard whose interrupt handler has a service time of 800 us, a   disk with a service time of 500 us, and a printer with a service   time of 400 us.</p> <p>What is the worst-case latency seen by each device?  For now   we’ll assume that requests are infrequent, <i>i.e.</i>,   that each request only happens once in each scenario.  Requests   can arrive at any time and in any order.  If we serve the   requests in first-come-first-served order, each device might be   delayed by the service of all other devices.</p> <p>So the start of the keyboard handler might be delayed by the   execution of the disk and printer handlers, a worst-case latency   of 900 us.</p> <p>The start of the disk handler might be delayed by the keyboard   and printer handlers, a worst-case latency of 1200 us.</p> <p>And the printer handler might be delayed by the keyboard and   disk handlers, a worst-case latency of 1300 us.</p> <p>In this scenario we see that long-running handlers have a huge   impact on the worst-case latency seen by the other devices.   What are the possibilities for reducing the worst-case   latencies?  Is there a better scheduling algorithm than   first-come-first-served?</p> <div class="lecslide"><a name="17"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide18.png" alt=""></a></div> <p>One strategy is to assign priorities to the pending requests   and to serve the requests in priority order.  If the handlers   are uninterruptible, the priorities will be used to select the   *next* task to be run at the completion of the current task.   Note that under this strategy, the current task always runs to   completion even if a higher-priority request arrives while   it’s executing.  This is called a   “nonpreemptive” or “weak” priority   system.</p> <p>Using a weak priority system, the worst-case latency seen by   each device is the worst-case service time of all the other   devices (since that handler may have just started running when   the new request arrives), plus the service time of all   higher-priority devices (since they’ll be run first).</p> <p>In our example, suppose we assigned the highest priority to the   disk, the next priority to the printer, and the lowest priority   to the keyboard.</p> <p>The worst-case latency of the keyboard is unchanged since it   has the lowest priority and hence can be delayed by the   higher-priority disk and printer handlers.</p> <p>The disk handler has the highest priority and so will always be   selected for execution after the current handler completes.  So   its worst-case latency is the worst-case service time for the   currently-running handler, which in this case is the keyboard,   so the worst-case latency for the disk is 800 us. This is a   considerable improvement over the first-come-first-served   scenario.</p> <p>Finally the worst-case scenario for the printer is 1300 us   since it may have to wait for the keyboard handler to finish   running (which can take up to 800 us) and then for a   higher-priority disk request to be serviced (which takes 500   us).</p> <div class="lecslide"><a name="18"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide19.png" alt=""></a></div> <p>How should priorities be assigned given hard real-time   constraints?  We’ll assume each device has a service   deadline D after the arrival of its service request.</p> <p>If not otherwise specified, assume D is the time until the   *next* request for the same device.  This is a reasonably   conservative assumption that prevents the system from falling   further and further behind.  For example, it makes sense that   the keyboard handler should finish processing one character   before the next arrives.</p> <p>“Earliest Deadline” is a strategy for assigning   priorities that is guaranteed to meet the deadlines if any   priority assignment can meet the deadlines.  It’s very   simple: Sort the requests by their deadlines.  Assign the   highest priority to the earliest deadline, second priority to   the next deadline, and so on.  A weak priority system will   choose the pending request with the highest   priority, <i>i.e.</i>, the request that has the earliest   deadline.</p> <p>Earliest Deadline has an intuitive appeal.  Imagine standing in   a long security line at the airport.  It would make sense to   prioritize the processing of passengers who have the earliest   flights assuming that there’s enough time to process   everyone before their flight leaves.  Processing 10 people whose   flights leave in 30 minutes before someone whose flight leaves   in 5 min will cause that last person to miss their flight.  But   if that person is processed first, the other passengers may be   slightly delayed but everyone will make their flight.  This is   the sort of scheduling problem that Earliest Deadline and a weak   priority system can solve.</p> <p>It’s outside the scope of our discussion, but it’s   interesting to think about what should happen if some flights   are going to be missed.  If the system is overloaded,   prioritizing by earliest deadline may mean that everyone will   miss their flights!  In this scenario it might be better to   assign priorities to minimize the total number of missed   flights.  This gets complicated in a hurry since the assignment   of priorities now depends on exactly what requests are pending   and how long it will take them to be serviced.  An intriguing   problem to think about!</p> <div class="lecslide"><a name="19"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide20.png" alt=""></a></div> <p>In a weak priority system the currently-running task will   always run to completion before considering what to run next.   This means the worst-case latency for a device always includes   the worst-case service time across all the other   devices, <i>i.e.</i>, the maximum time we have to wait for the   currently-running task to complete.</p> <p>If there’s a long-running task that usually means it will   be impossible to meet tight deadlines for other tasks.  For   example, suppose disk requests have a 800 us deadline in order   to guarantee the best throughput from the disk subsystem.  Since   the disk handler service time is 500 us, the maximum allowable   latency between a disk request and starting to execute the disk   service routine is 300 us.</p> <p>Oops!  The weak priority scheme can only guarantee a maximum   latency of 800 us, not nearly fast enough to meet the disk   deadline.  We can’t meet the disk deadline using weak   priorities.</p> <p>We need to introduce a preemptive priority system that allows   lower-priority handlers to be interrupted by higher-priority   requests.  We’ll refer to this as a “strong”   priority system.  Suppose we gave the disk the highest priority,   the printer second priority, and keyboard the lowest priority,   just like we did before.</p> <p>Now when a disk request arrives, it will start executing   immediately without having to wait for the completion of the   lower-priority printer or keyboard handlers.  The worst-case   latency for the disk has dropped to 0.</p> <p>The printer can only be preempted by the disk, so it’s   worst-case latency is 500 us.  Since it has the lowest priority,   the worst-case latency for the keyboard is unchanged at 900 us   since it might still have to wait on the disk and printer.</p> <p>The good news: with the proper assignment of priorities, the   strong priority system can guarantee that disk requests will be   serviced by the 800 us deadline.</p> <div class="lecslide"><a name="20"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide21.png" alt=""></a></div> <p>We’ll need to make a small tweak to our Beta hardware to   implement a strong priority system.  We’ll replace the   single supervisor mode bit in PC[31] with, say, a three-bit   field (PRI) in PC[31:29] that indicates which of the eight   priority levels the processor is currently running at.</p> <p>Next, we’ll modify the interrupt mechanism as follows.   In addition to requesting an interrupt, the requesting device   also specifies the 3-bit priority it was assigned by the system   architect.  We’ll add a priority encoder circuit to the   interrupt hardware to select the highest-priority request and   compare the priority of that request (PDEV) to the 3-bit PRI   value in the PC.  The system will take the interrupt request   only if PDEV &gt; PRI, <i>i.e.</i>, if the priority of the request   is *higher* than the priority the system is running at.</p> <p>When the interrupt is taken, the old PC and PRI information is   saved in XP, and the new PC is determined by the type of   interrupt and the new PRI field is set to PDEV.  So the   processor will now be running at the higher priority specified   by the device.</p> <p>A strong priority system allows low-priority handlers to be   interrupted by higher-priority requests, so the worst-case   latencies seen at high priorities is unaffected by the service   times of lower-priority handlers.</p> <div class="lecslide"><a name="21"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide22.png" alt=""></a></div> <p>Using strong priorities allows us to assign a high priority to   devices with tight deadlines and thus guarantee their deadlines   are met.</p> <p>Now let’s consider the impact of recurring   interrupts, <i>i.e.</i>, multiple interrupt requests from each   device.  We’ve added a “maximum frequency”   column to our table, which gives the maximum rate at which   requests will be generated by each device.</p> <p>The execution diagram for a strong priority system is shown   below the table.  Here we see there are multiple requests from   each device, in this case shown at their maximum possible rate   of request.  Each tick on the timeline represent 100 us of real   time. Printer requests occur every 1 ms (10 ticks), disk   requests every 2 ms (20 ticks), and keyboard requests every 10   ms (100 ticks).</p> <p>In the diagram you can see that the high-priority disk requests   are serviced as soon as they’re received.  And that   medium-priority printer requests preempt lower-priority   execution of the keyboard handler.  Printer requests would be   preempted by disk requests, but given their request patterns,   there’s never a printer request in progress when a disk   request arrives, so we don’t see that happening here.</p> <p>The maximum latency before a keyboard requests starts is indeed   900 us.  But that doesn’t tell the whole story!  As you   can see, the poor keyboard handler is continually preempted by   higher-priority disk and printer requests and so the keyboard   handler doesn’t complete until 3 ms after its request was   received!  This illustrates why real-time constraints are best   expressed in terms of deadlines and not latencies.</p> <p>If the keyboard deadline had been less than 3 ms, even the   strong priority system would have failed to meet the hard   real-time constraints.  The reason would be that there simply   aren’t enough CPU cycles to meet the recurring demands of   the devices in the face of tight deadlines.</p> <div class="lecslide"><a name="22"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide23.png" alt=""></a></div> <p>Speaking of having enough CPU cycles, there are several   calculations we need to do when thinking about recurring   interrupts.</p> <p>The first is to consider how much load each periodic request   places on the system.  There’s one keyboard request every   10 ms and servicing each request takes 800 us, which consumes   800us/10ms = 8% of the CPU.  A similar calculation shows that   servicing the disk takes 25% of the CPU and servicing the   printer takes 40% of the CPU.</p> <p>Collectively servicing all the devices takes 73% of the CPU   cycles, leaving 27% for running user-mode programs.  Obviously   we’d be in trouble if takes more than 100% of the   available cycles to service the devices.</p> <p>Another way to get in trouble is to not have enough CPU cycles   to meet each of the deadlines.  We need 500/800 = 67.5% of the   cycles to service the disk in the time between the disk request   and disk deadline.</p> <p>If we assume we want to finish serving one printer request   before receiving the next, the effective printer deadline is   1000 us.  In 1000 us we need to be able to service one   higher-priority disk request (500 us) and, obviously, the   printer request (400 us).  So we’ll need to use 900 us of   CPU in that 1000 us interval.  Whew, just barely made it!</p> <p>Suppose we tried setting the keyboard deadline to 2000 us.  In   that time interval we’d also need to service 1 disk   request and 2 printer requests.  So the total service time   needed is 500 + 2*400 + 800 = 2100 us.  Oops, that exceeds the   2000 us window we were given, so we can’t meet the 2000 us   deadline with the available CPU resources.</p> <p>But if the keyboard deadline is 3000 us, let’s see what   happens.  In a 3000 us interval we need to service 2 disk   requests, 3 printer requests, and, of course, 1 keyboard   request, for a total service time of 2*500 + 3*400 + 800 = 3000   us.  Whew! Just made it!</p> <div class="lecslide"><a name="23"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide24.png" alt=""></a></div> <p>Let’s finish up by looking at two extended examples.  The   scenario for both examples is the control system for the   International Space Station, which has to handle three recurring   tasks: supply ship guidance (SSG), gyroscope control (G), and   cabin pressure (CP).  For each device, the table shows us the   time between successive requests (the period), the service time   for each request, and the service deadline for each request.</p> <p>We’ll first analyze the system assuming that it’s   using a weak priority system.</p> <p>First question: What is the maximum service time for the cabin   pressure task that still allows all constraints to be met?   Well, the SSG task has a maximum allowable latency of 20   ms, <i>i.e.</i>, it’s service routine must start execution   within 20 ms if it is to meet its 25 ms deadline.  The G task   has a maximum allowable latency of 10 ms if it’s to meet   its deadline.  So no other handler can take longer than 10 ms to   run or the G task will miss its deadline.</p> <p>2. Give a weak priority ordering that meets the constraints.   Using the earliest deadline strategy discussed earlier, the   priority would be G with the highest priority, SSG with the   middle priority, and CP with the lowest priority.</p> <p>3. What fraction of time will the processor spend idle?  We   need to compute the fraction of CPU cycles need to service the   recurring requests for each task.  SSG takes 5/30 = 16.67% of   the CPU cycles.  G takes 10/40 = 25% of the CPU cycles.  And CP   takes 10/100 = 10% of the CPU cycles.  So servicing the task   requests takes 51.67% of the cycles, leaving 48.33% of the   cycles unused.  So the astronauts will be able to play Minecraft   in their spare time :)</p> <p>4. What is the worst-case delay for each task until completion   of its service routine?  Each task might have to wait for the   longest-running lower-priority handler to complete plus the   service times of any other higher-priority tasks plus, of   course, its own service time.</p> <p>SSG might have to wait for CP and G to complete (a total of 20   ms), then add its own service time (5 ms).  So its   worst-case completion time is 25 ms after the request.</p> <p>G might to wait for CP to complete (10 ms), then add its own   service time (10 ms) for a worst-case completion time of 20   ms.</p> <p>CP might have to wait for SSG to finish (5 ms), then wait for G   to run (10 ms), then add its own service time (10 ms) for a   worst-case completion time of 25 ms.</p> <div class="lecslide"><a name="24"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide25.png" alt=""></a></div> <p>Let’s redo the problem, this timing assuming a strong   priority system where, as before, G has the highest priority,   SSG the middle priority, and CP the lowest priority.</p> <p>1.  What is the maximum service time for CP that still allows   all constraints to be met?  This calculation is different in a   strong priority system, since the service time of CP is no   longer constrained by the maximum allowable latency of the   higher-priority tasks — they’ll simply preempt CP when   they need to run!</p> <p>Instead we need to think about how much CPU time will be used   by the SSG and G tasks in the 100 ms interval between the CP   request and its deadline.</p> <p>In a 100 ms interval, there might be four SSG requests (at   times 0, 30, 60, and 90) and three G requests (at times 0, 40,   and 80).  Together these require a total of 50 ms to service.   So the service time for CP can be up 50 ms and still meet the   100 ms deadline.</p> <p>2. What fraction of the time will the processor spend idle?   Assuming a 50 ms service time for CP, it now consumes 50% of the   CPU.  The other request loads are as before, so 91.67% of the   CPU cycles will be spent servicing requests, leaving 8.33% of   idle time.</p> <p>3. What is the worst-case completion time for each task?</p> <p>The G task has the highest priority, so its service routine   runs immediately after the request is received and its   worst-case completion time is exactly its service time.</p> <p>In the 25 ms interval between an SSG request and its deadline,   there might be at most one G request that will preempt   execution.  So the worst-case completion time is one G service   time (10 ms) plus the SSG service time (5 ms).</p> <p>Finally, from the calculation for problem 1, we chose the   service time for the CP task so that it will complete just at   its deadline of 100 ms, taking into account the service time for   multiple higher-priority requests.</p> <div class="lecslide"><a name="25"><img class="lecslideimg" src="../../../contents/c18/c18s1/Slide26.png" alt=""></a></div> <p>We covered a lot of ground in this lecture!</p> <p>We saw that the computation needed for user-mode programs to   interact with external devices was split into two parts.  On the   device-side, the OS handles device interrupts and performs the   task of moving data between kernel buffers and the device.  On   the application side, user-mode programs access the information   via SVC calls to the OS.</p> <p>We worried about how to handle SVC requests that needed to wait   for an I/O event before the request could be satisfied.   Ultimately we came up with a sleep/wakeup mechanism that   suspends execution of the process until the some interrupt   routine signals that the needed information has arrived, causing   the sleeping process to marked as active. Then the SVC is   retried the next time the now active process is scheduled for   execution.</p> <p>We discussed hard real-time constraints with their latencies,   service times and deadlines.  Then we explored the   implementation of interrupt systems using both weak and strong   priorities.</p> <p>Real-life computer systems usual implement strong priorities   and support a modest number of priority levels, using a weak   priority system to deal with multiple devices assigned to the   same strong priority level.  This seems to work quite well in   practice, allowing the systems to meet the variety of real-time   constraints imposed by their I/O devices.</p> <ul class="navigation progress">     <li id="bck_btn"><a href="../../../contents/c18/index.htm">Back<span>Devices and Interrupts</span></a></li>     <li id="continue_btn"><a href="../../../contents/c18/c18s2/index.htm">Continue<span>Topic Videos</span></a></li> </ul>
	                    
    
    
    



	        			
	                    
	                    
	                    
	                    

            		 </main><!--Course_inner_section tag close -->
           		     <div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer"><div id="footer">
<nav aria-label="Footer">     <nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses">       <span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
</ul>
</nav>
<div id="foot-c2" class="grid_2"><nav aria-labelledby="f-for-educators">         <span id="f-for-educators" class="footer" aria-hidden="true">For Educators</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
    <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal </a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
    <li><a href="https://openlearning.mit.edu/campus/digital-innovations/" aria-label="External Link: Residential Digital Innovations">Residential Digital Innovations </a></li>
    <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
</ul>
</nav></div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate">       <span id="f-donate" class="footer" aria-hidden="true">Give Now</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
    <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul>
</nav>
<div class="grid_2" id="foot-c4">
<nav aria-labelledby="f-about">         <span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
    <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
</ul>
</nav><!--about-->       <nav aria-labelledby="f-tools">         <span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="https://ocw.mit.edu/about/contactus">Contact Us</a></li>
    <li><a href="https://accessibility.mit.edu/" target="_blank">Accessibility</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul>
</nav><!--tools-->
</div>
</nav> <aside style="min-height: 289px;" aria-labelledby="f-our-corporate-supporters" class="grid_4 omega" id="foot-c5">           <span aria-hidden="true" class="footer" id="f-our-corporate-supporters">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div id="div-gpt-ad-1388181177156-0" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div id="div-gpt-ad-1388181177156-1" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div id="div-gpt-ad-1388181177156-2" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div id="div-gpt-ad-1388181177156-3" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div id="div-gpt-ad-1388181177156-4" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div id="div-gpt-ad-1388181177156-5" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside>
<div class="grid_12 alpha omega" itemprop="publisher" itemscope="" itemtype="http://schema.org/CollegeOrUniversity">
<h4 class="footer" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;">About <span itemprop="name">MIT OpenCourseWare</span>
</h4>
<p style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;" itemprop="description">MIT OpenCourseWare is an online publication of materials from over 2,500 MIT courses, freely sharing knowledge with learners and educators around the world. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
</div>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu"><img src="../../../common/images/logo_mit.png" alt="Massachusetts Institute of Technology logo and name." style="width: 195; height: 44;"></a><a href="https://openlearning.mit.edu/"><img src="https://ocw.mit.edu/images/mitol_logo.png" alt="MIT Open Learning logo and name." style="width: 265; height: 50; vertical-align: top; padding-left:30px;"></a><a href="https://www.oeglobal.org/"><img src="https://ocw.mit.edu/images/oeg_logo.gif" alt="Open Education Consortium logo." style="width: 219px; height: 59px; vertical-align: top; padding-left:20px;"></a><a rel="license" itemprop="useRightsUrl" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="../../../common/images/cc_by-nc-sa.png" alt="Creative Commons logo with terms BY-NC-SA." style="width: 126px; height: 44px; margin-right: 0; padding-left: 20px;"></a>
<p class="copyright">© 2001–2018<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="license">Creative Commons License</a> and other <a href="../../../common/terms/index.htm" rel="cc:morePermissions">terms of use</a>.</p>
</div>
</div></div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->


   </body>
 </html>
