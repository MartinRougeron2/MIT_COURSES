<!DOCTYPE html><html lang="en">
      
      
        
    
    
    
    

      
      
      <head>
        <meta charset="utf-8">
        <meta name="format-detection" content="telephone=no">  
        
        <title>20.1 Annotated Slides | 20 System-level Communication | Computation Structures | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
    <!-- Begin Automatic Metadata Insertion -->
    <meta content="6-004-computation-structures-spring-2017" name="WT.cg_n">
    <meta content="20.1 Annotated Slides" name="WT.cg_s">
    <meta content="" name="Description">
    <meta content="Terman, Chris" name="Author">
    <meta content="6.004,computation,computation structure,primitives, gates,instructions,procedures,processes,concurrency,instruction set design,software structure,digital system,MOS transistor,logic gate,combinational circuit,sequential circuit,finite-state machines,computer architecture,programming,RISC processor,Computer Design and Engineering,Digital Systems" name="keywords">
    <meta content="6.004 Computation Structures | 20.1 Annotated Slides" name="Search_Display">
    <meta content="Computer Design and Engineering" itemprop="about">
    <meta content="Digital Systems" itemprop="about">
    <!-- End Automatic Metadata Insertion -->

	<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/search.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
	<link href="../../../common/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
	<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2017/c20/c20s1/">
	<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
	
	
      <script type="text/x-mathjax-config">
		MathJax.Hub.Config({
			TeX: { equationNumbers: { autoNumber: "AMS" } },		
	  		displayAlign: "left",
	  		displayIndent: "2em",
	  		menuSettings: {zoom: "Double-Click", mpContext: true, mpMouse: true},
			errorSettings: { message: ["[Math Error]"] }  		
			});
	</script>
	
	<script type="text/javascript" src="../../../common/scripts/jquery.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script>
	<script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script>
	<script type="text/javascript" src="../../../common/scripts/expandy.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;adInstanceId=70ac07d7-b28f-4071-816f-d292aba4849f"></script>
	<script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
	<script type="text/javascript" src="https://ocw.mit.edu//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js?config=TeX-MML-AM_SVG"></script>
	
	
	
    
    
    
    
    
    
    
      
       
		 

        
        
        

        
        
        
        
        
        
        
        
        
      </head>
    <body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top">
			<div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW">
<table class="social">
    <tbody>
        <tr>
            <td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>  <a aria-label="Instagram" href="https://www.instagram.com/mitocw/"><img src="https://ocw.mit.edu/images/icon_ig.png" alt="Click to visit our Instagram page."></a> <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="https://ocw.mit.edu/images/icon_twitter.png" alt="Click to visit our Twitter feed."></a><a aria-label="YouTube" href="https://www.youtube.com/mitocw" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_yt.png" alt="Click to visit our YouTube page."></a><span style="font-size: 12.208px;">   </span><a aria-label="Open Matters blog on WordPress" href="https://www.ocw-openmatters.org/" style="font-size: 12.208px;"><img src="https://ocw.mit.edu/images/icon_wp.png" alt="Click to visit our blog on WordPress."></a>
</td>
        </tr>
    </tbody>
</table>
</aside><nav aria-label="Help Links" class="helplinks">     <a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/about/contactus.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>

<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a6d6567612d6d656e75">
<div class="portletStaticText portlet-static-mega-menu"><div><nav id="mega" class="grid_8 alpha" aria-label="Site">
<ul id="menu" role="presentation">
    <li id="menu_home">
<a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
</li>
    <!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses">
<a href="#" aria-hidden="true">FIND COURSES</a><!-- Begin 5 columns Item -->
    <div class="dropdown_5columns-a mega-courses">
    <div class="col_1a">
    <div class="row_1a">
<nav aria-labelledby="mm-find-courses-by">     <span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
    <ul class="find_by" role="presentation">
        <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
        <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
    </ul>
    </nav>     <nav aria-labelledby="mm-collections">     <span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
        <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
        <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
        <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
        <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    </ul>
    </nav>     <nav class="col_1b" aria-labelledby="mm-translated-courses">     <span id="mm-translated-courses" class="nav" aria-hidden="true" style="line-height: 1.3;">Cross-Disciplinary Topic Lists</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
        <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
        <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
        <li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
        <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
        <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
    </ul>
    </nav>
</div>
    <div class="row_1b"><nav aria-labelledby="mm-cross-disciplinary-topic-lists">     <span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Translated Courses</span>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
        <li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
    </ul>
    </nav></div>
    </div>
    </div>
    </li>
    <li id="drop_2">
<a href="#" aria-label="For Educators">For Educators</a>
    <div class="dropdown_1column-a" style="width: 270px;"><nav aria-labelledby="mm-find-courses-by">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/chalk-radio-podcast">Chalk Radio Podcast</a></li>
        <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
        <li><a href="https://openlearning.mit.edu/campus/digital-innovations/">Residential Digital Innovations </a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    </ul>
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_3">
<a href="#" aria-hidden="true">Give Now</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="Donate">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
        <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
        <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
        <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
        <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
    </ul>
    </nav></div>
    </li>
    <li id="drop_4">
<a href="#" aria-hidden="true">About</a>
    <div class="dropdown_1column-a"><nav class="col_1" aria-label="About">
    <ul role="presentation">
        <li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
        <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
        <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
        <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
        <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
        <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
    </ul>
    </nav></div>
    </li>
</ul>
</nav></div></div>

</div>





<!--googleoff: index-->
<script>
  (function() {
	var cx = '012626166551961672889:owjdpuboktq';
	var gcse = document.createElement('script');
	gcse.type = 'text/javascript';
	gcse.async = true;
	gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(gcse, s);
  })();
  window.onload = function(){
	document.getElementById('gsc-i-id1').placeholder = 'Search';	
  };

$(document).ready(function(){

$('.advanceSearch a').keydown(function(event){showSearchTips($(this),event);})
$('#searchTipsModal').keydown(function(event){showSearchTips($(this),event);})

function showSearchTips(obj,evt) {
// if pressed enter key
	if ( evt.which == 13 || evt.which == 32) {
		showModal();
		ga('send', 'pageview', "AdvanceSearch");
		$(".advanceSearch a").attr('aria-expanded', 'true');
		$('.searchTipsModal').focus();
		evt.preventDefault();
		}
	if ( evt.which == 27 ) {
		hideModal();
		$(".advanceSearch a").attr('aria-expanded', 'false');
		var modal = document.getElementById('searchTipsModal');
		modal.style.display = "none";
		$(".advanceSearch a").focus();
		evt.preventDefault();
		}
}

});
function showModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "block";
	ga('send', 'pageview', "AdvanceSearch");
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", true);
	window.setTimeout(function () {
    document.getElementById('searchTipsModal').focus(); }, 0);
}

function hideModal(){
	var modal = document.getElementById('searchTipsModal');
	modal.style.display = "none";
	document.getElementById("searchTipsBtn").setAttribute("aria-expanded", false);
}
</script>
<div id="search" role="search" class="grid_4 omega">
    	<table class="search">
				<tbody>
					<tr>
						<td><div class="searchboxheader"><searchbox-only resultsurl="/search/ocwsearch.htm"></searchbox-only></div></td>
						<td>
							<div class="advanceSearch">
								<a id="searchTipsBtn" onclick="showModal();" href="#" role="button" aria-label="search tips" aria-expanded="false" aria-describedby="searchtips">Search Tips</a>

								<!-- The Modal -->
								<div id="searchTipsModal" class="modal" tabindex="-1">
								  <!-- Modal content -->
									<div class="modal-content">
										<div class="modal-body">
											<button class="close" onclick="hideModal();" aria-label="close">X</button>
											<span>
												<b>Exclude words from your search</b>
												<br>Put - in front of a word you want to leave out. For example, jaguar speed -car
												<br><br>
												<b>Search for an exact match</b>
												<br>Put a word or phrase inside quotes. For example, "tallest building".
												<br><br>
												<b>Search for wildcards or unknown words</b>
												<br>Put a * in your word or phrase where you want to leave a placeholder. For example, "largest * in the world".
												<br><br>
												<b>Search within a range of numbers</b>
												<br>Put .. between two numbers. For example, camera $50..$100.
												<br><br>
												<b>Combine searches</b>
												<br>Put "OR" between each search query. For example,  marathon OR race.
												<br><br>
											</span>
										</div>
								  </div>
								</div>
							</div>
						</td>
					</tr>
				</tbody>
		</table>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end -->
			
		<div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb">
                      <p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Computation Structures</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/c20/index.htm">20 System-level Communication</a>
            
                »
                
            
            
         
    
    
        
            
            
            20.1 Annotated Slides
         
    
</p>

                 </nav>
                 <div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            20.1 Annotated Slides
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course">
               			 



<script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script>
<!--Left Nav Starts -->


	<ul>			  
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="instructor-insights" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuinstructor-insights'); toggleClass('instructor-insights'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/instructor-insights/index.htm" class="">
		                  Instructor Insights  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuinstructor-insights" class="">
					               
		            <li class="">
				 		<a href="../../../contents/instructor-insights/an-interview-with-christopher-terman-on-teaching-computation-structures/index.htm" class="">An Interview with Christopher Terman</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/meet-the-educator/index.htm" class="">Meet the Educator</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/when-students-come-with-different-backgrounds-offer-a-buffet-of-learning-materials/index.htm" class="">A Buffet of Learning Materials</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-the-mitx-platform-to-structure-learning-sequences/index.htm" class="">Using the MITx Platform</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/conceptualizing-online-courses-as-educational-labs/index.htm" class="">Online Courses as Educational Labs</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/teaching-large-lecture-classes-the-importance-of-stories-and-disfluency/index.htm" class="">The Importance of Stories and Disfluency</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-teaching-team-from-lab-assistants-to-faculty-members-the-range-of-experience-is-key/index.htm" class="">A Teaching Team with a Range of Experience</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/with-online-fora-being-stuck-is-just-a-10-minute-process/index.htm" class="">Being Stuck Is a 10-Minute Process</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/using-browser-based-programming-environments-to-engage-students-in-the-practice-of-engineering/index.htm" class="">Browser-Based Programming Environments</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/a-common-challenge-students-face-developing-confidence-in-systematically-solving-problems/index.htm" class="">Confidence in Problem-Solving</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/hallway-learning-the-value-of-common-learning-experiences-at-the-undergraduate-level/index.htm" class="">The Value of Common Experiences</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/the-fun-is-in-the-doing-of-the-puzzle-self-paced-mastery-learning-and-moving-beyond/index.htm" class="">Self-Paced Mastery Learning</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/instructor-insights/engineering-learning-materials-an-iterative-process/index.htm" class="">Engineering Learning Materials</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c1" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc1'); toggleClass('c1'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c1/index.htm" class="">
		                  1 Basics of Information  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc1" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c1/c1s1/index.htm" class="">1.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s2/index.htm" class="">1.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c1/c1s3/index.htm" class="">1.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c2" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc2'); toggleClass('c2'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c2/index.htm" class="">
		                  2 The Digital Abstraction  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc2" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c2/c2s1/index.htm" class="">2.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s2/index.htm" class="">2.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c2/c2s3/index.htm" class="">2.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c3" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc3'); toggleClass('c3'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c3/index.htm" class="">
		                  3 CMOS  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc3" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c3/c3s1/index.htm" class="">3.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s2/index.htm" class="">3.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c3/c3s3/index.htm" class="">3.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c4" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc4'); toggleClass('c4'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c4/index.htm" class="">
		                  4 Combinational Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc4" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c4/c4s1/index.htm" class="">4.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s2/index.htm" class="">4.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c4/c4s3/index.htm" class="">4.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c5" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc5'); toggleClass('c5'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c5/index.htm" class="">
		                  5 Sequential Logic  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc5" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c5/c5s1/index.htm" class="">5.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s2/index.htm" class="">5.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c5/c5s3/index.htm" class="">5.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c6" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc6'); toggleClass('c6'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c6/index.htm" class="">
		                  6 Finite State Machines  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc6" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c6/c6s1/index.htm" class="">6.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s2/index.htm" class="">6.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c6/c6s3/index.htm" class="">6.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c7" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc7'); toggleClass('c7'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c7/index.htm" class="">
		                  7 Performance Measures  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc7" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c7/c7s1/index.htm" class="">7.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s2/index.htm" class="">7.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c7/c7s3/index.htm" class="">7.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c8" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc8'); toggleClass('c8'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c8/index.htm" class="">
		                  8 Design Tradeoffs  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc8" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c8/c8s1/index.htm" class="">8.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c8/c8s2/index.htm" class="">8.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c9" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc9'); toggleClass('c9'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c9/index.htm" class="">
		                  9 Designing an Instruction Set  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc9" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c9/c9s1/index.htm" class="">9.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s2/index.htm" class="">9.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c9/c9s3/index.htm" class="">9.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c10" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc10'); toggleClass('c10'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c10/index.htm" class="">
		                  10 Assembly Language, Models of Computation  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc10" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c10/c10s1/index.htm" class="">10.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c10/c10s2/index.htm" class="">10.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c11" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc11'); toggleClass('c11'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c11/index.htm" class="">
		                  11 Compilers  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc11" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c11/c11s1/index.htm" class="">11.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s2/index.htm" class="">11.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c11/c11s3/index.htm" class="">11.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c12" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc12'); toggleClass('c12'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c12/index.htm" class="">
		                  12 Procedures and Stacks  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc12" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c12/c12s1/index.htm" class="">12.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s2/index.htm" class="">12.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c12/c12s3/index.htm" class="">12.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c13" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc13'); toggleClass('c13'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c13/index.htm" class="">
		                  13 Building the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc13" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c13/c13s1/index.htm" class="">13.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s2/index.htm" class="">13.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c13/c13s3/index.htm" class="">13.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c14" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc14'); toggleClass('c14'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c14/index.htm" class="">
		                  14 Caches and the Memory Hierarchy  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc14" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c14/c14s1/index.htm" class="">14.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s2/index.htm" class="">14.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c14/c14s3/index.htm" class="">14.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c15" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc15'); toggleClass('c15'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c15/index.htm" class="">
		                  15 Pipelining the Beta  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc15" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c15/c15s1/index.htm" class="">15.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s2/index.htm" class="">15.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c15/c15s3/index.htm" class="">15.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c16" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc16'); toggleClass('c16'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c16/index.htm" class="">
		                  16 Virtual Memory  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc16" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c16/c16s1/index.htm" class="">16.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s2/index.htm" class="">16.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c16/c16s3/index.htm" class="">16.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c17" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc17'); toggleClass('c17'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c17/index.htm" class="">
		                  17 Virtualizing the Processor  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc17" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c17/c17s1/index.htm" class="">17.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s2/index.htm" class="">17.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c17/c17s3/index.htm" class="">17.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c18" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc18'); toggleClass('c18'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c18/index.htm" class="">
		                  18 Devices and Interrupts  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc18" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c18/c18s1/index.htm" class="">18.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s2/index.htm" class="">18.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c18/c18s3/index.htm" class="">18.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c19" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc19'); toggleClass('c19'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c19/index.htm" class="">
		                  19 Concurrency and Synchronization  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc19" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c19/c19s1/index.htm" class="">19.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s2/index.htm" class="">19.2 Topic Videos</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c19/c19s3/index.htm" class="">19.3 Worksheet</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c20" class="mC">
						<a href="#" class="" onclick="toggleMenu('menuc20'); toggleClass('c20'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Collapse Menu" title="Collapse Menu">
		                </a>
		                <a href="../../../contents/c20/index.htm" class="">
		                  20 System-level Communication  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc20" class="selected">
					               
		            <li class="selected">
				 		<a href="../../../contents/c20/c20s1/index.htm" class="selected">20.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c20/c20s2/index.htm" class="">20.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
         	<li class="">
       		<div class="tlp_links">
	        	<div id="c21" class="mO">
						<a href="#" class="" onclick="toggleMenu('menuc21'); toggleClass('c21'); return false">
		                  <img src="../../../common/images/trans.gif" class="expandCollapseTrans" border="0" width="10" height="12" onclick="changeAlt(this)" alt="Expand Menu" title="Expand Menu">
		                </a>
		                <a href="../../../contents/c21/index.htm" class="">
		                  21 Parallel Processing  			                
	                    </a>
	                 			                
	            </div>
			    
	        	<ul id="menuc21" class="">
					               
		            <li class="">
				 		<a href="../../../contents/c21/c21s1/index.htm" class="">21.1 Annotated Slides</a>
		            </li>
		            <li class="">
				 		<a href="../../../contents/c21/c21s2/index.htm" class="">21.2 Topic Videos</a>
		            </li>
			    </ul>
			    
			</div>
			</li>
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>


<!--Left Nav Ends -->









           		     </nav>
           		     <main id="course_inner_section" aria-labelledby="section_title">
           		     	
	       		     	<ul class="navigation pagination">     <li id="top_bck_btn"><a href="../../../contents/c20/index.htm">&lt;<span>System-level Communication</span></a></li>     <li id="flp_btn_1" class="button_selected"><a href="../../../contents/c20/c20s1/index.htm">20.1.1<span>Annotated slides</span></a></li>     <li id="top_continue_btn"><a href="../../../contents/c20/c20s2/index.htm">&gt;<span>Topic Videos</span></a></li> </ul> <p><style type="text/css">
.toc {
  margin-left: 2em;
}
.lecslide {
  margin-top: 1em;
  margin-bottom: 1em;
  border-top: 0.5px solid #808080;
  padding-top: 1em;
  text-align: center;
}
.lecslideimg {
  width: 5in;
  border: 1px solid black;
}
</style></p> <h1>L20: System-level communication</h1> <div class="toc"><ol>     <li style="margin-bottom:0.1em;"><a href="#1">Computer System Technologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#2">Interfaces Last Forever</a></li>     <li style="margin-bottom:0.1em;"><a href="#3">System Interfaces &amp; Modularity</a></li>     <li style="margin-bottom:0.1em;"><a href="#4">Buses, Interconnect, So...?</a></li>     <li style="margin-bottom:0.1em;"><a href="#5">Electrical Model for Real Wires</a></li>     <li style="margin-bottom:0.1em;"><a href="#6">Real-world Consequences</a></li>     <li style="margin-bottom:0.1em;"><a href="#7">Space &amp; Time Constraints</a></li>     <li style="margin-bottom:0.1em;"><a href="#8">Gates, Wires, &amp; Delays</a></li>     <li style="margin-bottom:0.1em;"><a href="#9">Interface Standard: Backplane Bus</a></li>     <li style="margin-bottom:0.1em;"><a href="#10">A Parallel Bus Transaction</a></li>     <li style="margin-bottom:0.1em;"><a href="#11">Bus Lines as Transmission Lines</a></li>     <li style="margin-bottom:0.1em;"><a href="#12">Meanwhile, Outside the Box...</a></li>     <li style="margin-bottom:0.1em;"><a href="#13">Lessons learned: Single driver; point-to-point</a></li>     <li style="margin-bottom:0.1em;"><a href="#14">Lessons learned: Clock recovery</a></li>     <li style="margin-bottom:0.1em;"><a href="#15">Serial, Point-to-point Communications</a></li>     <li style="margin-bottom:0.1em;"><a href="#16">Improving on the Bus</a></li>     <li style="margin-bottom:0.1em;"><a href="#17">Communications in Today's Computers</a></li>     <li style="margin-bottom:0.1em;"><a href="#18">Example serial link: PCI Express (PCIe)</a></li>     <li style="margin-bottom:0.1em;"><a href="#19">Communication Topologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#20">Quadratic-cost Topologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#21">Mesh Topologies</a></li>     <li style="margin-bottom:0.1em;"><a href="#22">Logarithmic-latency Networks</a></li>     <li style="margin-bottom:0.1em;"><a href="#23">Communication Technologies: Latency</a></li>     <li style="margin-bottom:0.1em;"><a href="#24">Communications Futures</a></li> </ol></div> <p><strong>Content of the following slides is described in the surrounding text.</strong></p> <div class="lecslide"><a name="1"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide02.png" alt=""></a></div> <p>Computer systems bring together many technologies and harness   them to provide fast execution of programs.  Some of these   technologies are relatively new, others have been with us for   decades.  Each of the system components comes with a detailed   specification of their functionality and interface.  The   expectation is that system designers can engineer the system   based on the component specifications without having to know the   details of the implementations of each component.  This is good   since many of the underlying technologies change, often in ways   that allow the components to become smaller, faster, cheaper,   more energy efficient, and so on.  Assuming the new components   still implement same interfaces, they can be integrated into the   system with very little effort.</p> <p>The moral of this story is that the important part of the   system architecture is the interfaces.</p> <div class="lecslide"><a name="2"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide03.png" alt=""></a></div> <p>Our goal is to design interface specifications that can survive   many generations of technological change.  One approach to   long-term survival is to base the specification on a useful   abstraction that hides most, if not all, of the low-level   implementation details.  Operating systems provide many   interfaces that have remained stable for many years.  For   example, network interfaces that reliably deliver streams of   bytes to named hosts, hiding the details of packets, sockets,   error detection and recovery, etc.  Or windowing and graphics   systems that render complex images, shielding the application   from details about the underlying graphics engine.  Or journaled   file systems that behind-the-scenes defend against corruption in   the secondary storage arrays.</p> <p>Basically, we’re long since past the point where we can   afford to start from scratch each time the integrated circuit   gurus are able to double the number of transistors on a chip, or   the communication wizards figure out how to go from 1GHz   networks to 10GHz networks, or the memory mavens are able to   increase the size of main memory by a factor of 4.  The   interfaces that insulate us from technological change are   critical to ensure that improved technology isn’t a   constant source of disruption.</p> <p>There are some famous examples of where an apparently   convenient choice of interface has had embarrassing long-term   consequences.  For example, back in the days of stand-alone   computing, different ISAs made different choices on how to store   multi-byte numeric values in main memory.  IBM architectures are   store the most-significant byte in the lowest address (so called   “big endian”), while Intel’s x86 architectures   store the least-significant byte first (so called “little   endian”).  But this leads to all sorts of complications in   a networked world where numeric data is often transferred from   system to system.  This is a prime example of a locally-optimal   choice having an unfortunate global impact.  As the phrase goes:   “a moment of convenience, a lifetime of regret.”</p> <p>Another example is the system-level communication strategy   chosen for the first IBM PC, the original personal computer   based Intel CPU chips.  IBM built their expansion bus for adding   I/O peripherals, memory cards, etc., by simply using the   interface signals provided by then-current x86 CPU.  So the   width of the data bus, the number of address pins, the   data-transfer protocol, etc. where are exactly as designed for   interfacing to that particular CPU.  A logical choice since it   got the job done while keeping costs as low a possible.  But   that choice quickly proved unfortunate as newer,   higher-performance CPUs were introduced, capable of addressing   more memory or providing 32-bit instead of 16-bit external data   paths.  So system architects were forced into offering customers   the Hobson’s choice of crippling system throughput for the   sake of backward compatibility, or discarding the networking   card they bought last year since it was now incompatible with   this year’s system.</p> <p>But there are success stories too.  The System/360 interfaces   chosen by IBM in the early 1960s carried over to the System/370   in the 70’s and 80’s and to the Enterprise System   Architecture/390 of the 90’s.  Customers had the   expectation that software written for the earlier machines would   continue to work on the newer systems and IBM was able to   fulfill that expectation.</p> <p>Maybe the most notable long-term interface success is the   design the TCP and IP network protocols in the early 70’s,   which formed the basis for most packet-based network   communication.  A recent refresh expanded the network addresses   from 32 to 128 bits, but that was largely invisible to   applications using the network.  It was a remarkably prescient   set of engineering choices that stood the test of time for over   four decades of exponential growth in network connectivity.</p> <div class="lecslide"><a name="3"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide04.png" alt=""></a></div> <p>Today’s lecture topic is figuring out the appropriate   interface choices for interconnecting system components.  In the   earliest systems these connections were very ad hoc in the sense   that the protocols and physical implementation were chosen   independently for each connection that had to be made.  The   cable connecting the CPU box to the memory box (yes, in those   days, they lived in separate 19-inch racks!) was different than   the cable connecting the CPU to the disk.</p> <p>Improving circuit technologies allowed system components to   shrink from cabinet-size to board-size and system engineers   designed a modular packaging scheme that allowed users to   mix-and-match board types that plugged into a communication   backplane.  The protocols and signals on the backplane reflected   the different choices made by each vendor — IBM boards   didn’t plug into Digital Equipment backplanes, and vice   versa.</p> <p>This evolved into some standardized communication backplanes   that allowed users to do their own system integration, choosing   different vendors for their CPU, memory, networking, etc.   Healthy competition quickly brought prices down and drove   innovation.  However this promising development was overtaken by   rapidly improving performance, which required communication   bandwidths that simply could not be supported across a   multi-board backplane.</p> <p>These demands for higher performance and the ability to   integrate many different communication channels into a single   chip, lead to a proliferation of different channels.  In many   ways, the system architecture was reminiscent of the original   systems — ad-hoc purpose-built communication channels   specialized to a specific task.</p> <p>As we’ll see, engineering considerations have led to the   widespread adoption of general-purpose unidirectional   point-to-point communication channels.  There are still several   types of channels depending on the required performance, the   distance travelled, etc., but asynchronous point-to-point   channels have mostly replaced the synchronous multi-signal   channels of earlier systems.</p> <p>Most system-level communications involve signaling over wires,   so next we’ll look into some the engineering issues   we’ve had to deal with as communication speeds have   increased from kHz to GHz.</p> <div class="lecslide"><a name="4"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide05.png" alt=""></a></div> <p>So, how hard can it be to build a communication channel?   Aren’t they just logic circuits with a long wire that runs   from one component to another?</p> <p>A circuit theorist would tell you that wires in a schematic   diagram are intended to represent the equipotential nodes of the   circuit, which are used to connect component terminals.  In this   simple model, a wire has the same voltage at all points and any   changes in the voltage or current at one component terminal is   instantly propagated to the other component terminals connected   to the same wire.  The notion of distance is abstracted out of   our circuit models: terminals are either connected by a wire, or   they’re not.  If there are resistances, capacitances, and   inductances that need to be accounted for, the necessary   components can be added to the circuit model.  Wires are   timeless.  They are used to show how components connect, but   they aren’t themselves components.</p> <p>In fact, thinking of wires as equipotential nodes is a very   workable model when the rate of change of the voltage on the   wire is slow compared to the time it takes for an   electromagnetic wave to propagate down the wire.  Only as   circuit speeds have increased with advances in integrated   circuit technologies did this rule-of-thumb start to be violated   in logic circuits where the components were separated by at most   10’s of inches.</p> <p>In fact, it has been known since the late 1800s that changes in   voltage levels take finite time to propagate down a wire.   Oliver Heaviside was a self-taught English electrical engineer   who, in the 1880’s, developed a set of   “telegrapher’s equations” that described how   signals propagate down wires.  Using these, he was able to show   how to improve the rate of transmission on then new   transatlantic telegraph cable by a factor of 10.</p> <p>We now know that for high-speed signaling we have to treat   wires as transmission lines, which we’ll say more about in   the next few slides.  In this domain, the distance between   components and hence the lengths of wires is of critical concern   if we want to correctly predict the performance of our circuits.   Distance and signal propagation matter — real-world wires are,   in fact, fairly complex components!</p> <div class="lecslide"><a name="5"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide06.png" alt=""></a></div> <p>Here’s an electrical model for an infinitesimally small   segment of a real-world wire.  An actual wire is correctly   modeled by imagining a many copies of the model shown here   connected end-to-end.  The signal,   <i>i.e.</i>, the voltage on the wire, is measured with respect   to the reference node which is also shown in the model.</p> <p>There are 4 parameters that characterize the behavior of the   wire.  R tells us the resistance of the conductor.  It’s   usually negligible for the wiring on printed circuit boards, but   it can be significant for long wires in integrated circuits.  L   represents the self-inductance of the conductor, which   characterizes how much energy will be absorbed by the   wire’s magnetic fields when the current flowing through   the wire changes.  The conductor and reference node are   separated by some sort insulator (which might be just air!) and   hence form a capacitor with capacitance C.  Finally, the   conductance G represents the current that leaks through the   insulator.  Usually this is quite small.</p> <p>The table shows the parameter values we might measure for wires   inside an integrated circuit and on printed circuit boards.</p> <p>If we analyze what happens when sending signals down the wire,   we can describe the behavior of the wires using a single   component called a transmission line which has a characteristic   complex-valued impedance \(Z_0\).  At high signaling frequencies   and over the distances found on-chip or on circuit boards, such   as one might find in a modern digital system, the transmission   line is lossless, and voltage changes (“steps”)   propagate down the wire at the rate of \(1/\sqrt(LC)\) meters per   second.  Using the values given here for a printed circuit   board, the characteristic impedance is approximately 50 ohms and   the speed of propagation is about 18 cm (7 in.) per ns.</p> <p>To send digital information from one component to another, we   change the voltage on the connecting wire, and that voltage step   propagates from the sender to the receiver.  We have to pay some   attention to what happens to that energy front when it gets to   the end of the wire!  If we do nothing to absorb that energy,   conservation laws tell us that it reflects off the end of the   wire as an “echo” and soon our wire will be full of   echoes from previous voltage steps!</p> <p>To prevent these echoes we have to terminate the wire with a   resistance to ground that matches the characteristic impedance   of the transmission line.  If the signal can propagate in both   directions, we’ll need termination at both ends.</p> <p>What this model is telling is the time it takes to transmit   information from one component to another and that we have to be   careful to absorb the energy associated with the transmission   when the information has reached its destination.</p> <div class="lecslide"><a name="6"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide07.png" alt=""></a></div> <p>With that little bit of theory as background, we’re in a   position to describe the real-world consequences of poor   engineering of our signal wires.  The key observation is that   unless we’re careful there can still be energy left over   from previous transmissions that might corrupt the current   transmission.  The general fix to this problem is   time, <i>i.e.</i>, giving the transmitted value a longer time to   settle to an interference-free value.  But slowing down   isn’t usually acceptable in high-performance systems, so   we have to do our best to minimize these energy storage   effects.</p> <p>If there the termination isn’t exactly right, we’ll   get some reflections from any voltage step reaching the end of   the wire, and it will take a while for the echoes to die out.   In fact, as we’ll see, energy will reflect off of any   impedance discontinuity, which mean we’ll want to minimize   the number of such discontinuities.</p> <p>We need to be careful to allow sufficient time for signals to   reach valid logic levels.  The shaded region shows a transition   of the wire A from 1 to 0 to 1.  The first inverter is trying to   produce a 1-output from the initial input transition to 0, but   doesn’t have sufficient time to complete the transition on   wire B before the input changes again.  This leads to a runt   pulse on wire C, the output of the second inverter, and we see   that the sequence of bits on A has been corrupted by the time   the signal reaches C.  This problem was caused by the energy   storage in the capacitance of the wire between the inverters,   which will limit the speed at which we can run the logic.</p> <p>And here see we what happens when a large voltage step triggers   oscillations in wire, called ringing, voltages due to the   wire’s inductance and capacitance.  The graph shows it   takes some time before the ringing dampens to the point that we   have a reliable digital signal.  The ringing can be diminished   by spreading the voltage step over a longer time.</p> <p>The key idea here is that by paying close attention to the   design of our wiring and the drivers that put information onto   the wire, we can minimize the performance implications of these   energy-storage effects.</p> <div class="lecslide"><a name="7"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide08.png" alt=""></a></div> <p>Okay, enough electrical engineering!  Suppose we have some   information in our system.  If we preserve that information over   time, we call that storage.  If we send that information to   another component, we call that communication.  In the real   world, we’ve seen that communication takes time and we   have to budget for that time in our system timing.  Our   engineering has to accommodate the fundamental bounds on   propagating speeds, distances between components and how fast we   can change wire voltages without triggering the effects we saw   on the previous slide.  The upshot: our timing models will have   to account for wire delays.</p> <div class="lecslide"><a name="8"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide09.png" alt=""></a></div> <p>Earlier in the course, we had a simple timing model that   assigned a fixed propagation delay, \(t_{\textrm{PD}}\), to the   time it took for the output of a logic gate to reflect a change   to the gate’s input.</p> <p>We’ll need to change our timing model to account for   delay of transmitting the output of a logic gate to the next   components.  The timing will be load dependent, so signals that   connect to the inputs of many other gates will be slower than   signals that connect to only one other gate.  The Jade simulator   takes the loading of a gate’s output signal into account   when calculating the effective propagation delay of the   gate.</p> <p>We can improve propagation delays by reducing the number of   loads on output signals or by using specially-design gates   called buffers (the component shown in red) to drive signals   that have very large loads.  A common task when optimizing the   performance of a circuit is to track down heavily loaded and   hence slow wires and re-engineering the circuit to make them   faster.</p> <p>Today our concern is wires used to connect components at the   system level.  So next we’ll turn our attention to   possible designs for system-level interconnect and the issues   that might arise.</p> <div class="lecslide"><a name="9"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide10.png" alt=""></a></div> <p>If we want our system to be modular and expandable, how should   its design accommodate components that the user might add at a   later time?  For many years the approach was to provide a way to   plug additional printed circuit boards into the main   “motherboard” that holds the CPU, memory, and the   initial collection of I/O components.  The socket on the   motherboard connects the circuitry on the add-in card to the   signals on the motherboard that allow the CPU to communicate   with the add-in card.  These signals include power and a clock   signal used to time the communication, along with the   following.</p> <p>* Address wires to select different communication end points on   the add-in card.  The end points might include memory locations,   control registers, diagnostic ports, etc.</p> <p>* Data wires for transferring data to and from the CPU.  In   older systems, there would many data wires to support byte- or   word-width data transfers.</p> <p>* Some number of control wires that tell the add-in card when a   particular transfer has started and that allow the add-in card   to indicate when it has responded.</p> <p>If there are multiple slots for plugging in multiple add-in   cards, the same signals might be connected to all the cards and   the address wires would be used to sort out which transfers were   intended for which cards.  Collectively these signals are   referred to as the system bus.  “Bus” is system   architect jargon for a collection of wires used to transfer data   using a pre-determined communication protocol.</p> <div class="lecslide"><a name="10"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide11.png" alt=""></a></div> <p>Here’s an example of how a bus transaction might work.</p> <p>The CLK signal is used to time when signals are placed on the   bus wires (at the assertion edge of CLK) and when they’re   read by the recipient (at the sample edge of the CLK).  The   timing of the clock waveform is designed to allow enough time   for the signals to propagate down the bus and reach valid logic   levels at all the receivers.</p> <p>The component initiating the transaction is called the bus   master who is said to “own” the bus.  Most buses   provide a mechanism for transferring ownership from one   component to another.  The master sets the bus lines to indicate   the desired operation (read, write, block transfer, etc.), the   address of the recipient, and, in the case of a write operation,   the data to be sent to the recipient.</p> <p>The intended recipient, called the slave, is watching the bus   lines looking for its address at each sample edge.  When it sees   a transaction for itself, the slave performs the requested   operation, using a bus signal to indicate when the operation is   complete.  On completion it may use the data wires to return   information to the master.</p> <p>The bus itself may include circuitry to look for transactions   where the slave isn’t responding and, after an appropriate   interval, generate an error response so the master can take the   appropriate action.</p> <p>This sort of bus architecture proved to be a very workable   design for accommodating add-in cards as long as the rate of   transactions wasn’t too fast, say less than 50 MHz.</p> <div class="lecslide"><a name="11"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide12.png" alt=""></a></div> <p>But as system speeds increased, transaction rates had to   increase to keep system performance at acceptable levels, so the   time for each transaction got smaller.  With less time for   signaling on the bus wires, various effects began loom   large.</p> <p>If the clock had too short a period, there wasn’t enough   time for the master to see the assertion edge, enable its   drivers, have the signal propagate down a long bus to the   intended receiver and be stable at each receiver for long enough   before the sample edge.</p> <p>Another problem was that the clock signal would arrive at   different cards at different times.  So a card with an   early-arriving clock might decide it was its turn to start   driving the bus signals, while a card with a late-arriving clock   might still be driving the bus from the previous cycle.  These   momentary conflicts between drivers could add huge amounts of   electrical noise to the system.</p> <p>Another big issue is that energy would reflect off all the   small impedance discontinuities caused by the bus connectors.   If there were many connectors, there would be many small echoes   which could corrupt the signal seen by various receivers.   The equations in the upper right show how much of the signal   energy is transmitted and how much is reflected at each   discontinuity.  The net effect was like trying to talk very fast   while yelling into the Grand Canyon — the echoes could distort   the message beyond recognition unless sufficient time was   allocated between words for the echoes to die away.</p> <p>Eventually buses were relegated to relatively low-speed   communication tasks and a different approach had to be developed   for high-speed communication.</p> <div class="lecslide"><a name="12"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide13.png" alt=""></a></div> <p>Network technologies were developed to connect components (in   this case individual computer systems) separated by larger   distances, <i>i.e.</i>, distances measured in meters instead of   centimeters.  Communicating over these larger distances led to   different design tradeoffs.  In early networks, information was   sent as a sequence of bits over the shared communication medium.   The bits were organized into packets, each containing the   address of the destination.  Packets also included a checksum   used to detect errors in transmission and the protocol supported   the ability to request the retransmission of corrupted   packets.</p> <p>The software controlling the network is divided into a   “stack” of modules, each implementing a different   communication abstraction.  The lowest-level physical layer is   responsible for transmitting and receiving an individual packet   of bits.  Bit errors are detected and corrected, and packets   with uncorrectable errors are discarded. There are different   physical-layer modules available for the different types of   physical networks.</p> <p>The network layer deals with the addressing and routing of   packets.  Clever routing algorithms find the shortest   communication path through the multi-hop network and deal with   momentary or long-term outages on particular network links.</p> <p>The transport layer is responsible for providing the reliable   communication of a stream of data, dealing with the issues of   discarded or out-of-order packets.  In an effort to optimize   network usage and limit packet loses due to network congestion,   the transport layer deals with flow control, <i>i.e.</i>, the   rate at which packets are sent.</p> <p>A key idea in the networking community is the notion of   building a reliable communication channel on top of a   “best efforts” packet network.  Higher layers of the   protocol are designed so that its possible to recover from   errors in the lower layers.  This has proven much more   cost-effective and robust than trying to achieve 100%   reliability at each layer.</p> <div class="lecslide"><a name="13"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide14.png" alt=""></a></div> <p>As we saw in the previous section, there are a lot of   electrical issues when trying to communicate over a shared wire   with multiple drivers and receivers.  Slowing down the rate of   communication helps to solve the problems, but   “slow” isn’t in the cards for today’s   high-performance systems.</p> <p>Experience in the network world has shown that the fastest and   least problematic communication channels have a single driver   communicating with a single receiver, what’s called a   point-to-point link.  Using differential signaling is   particularly robust.  With differential signaling, the receiver   measures the voltage difference across the two signaling wires.   Electrical effects that might induce voltage noise on one   signaling wire will affect the other in equal measure, so the   voltage difference will be largely unaffected by most noise.   Almost all high-performance communication links use differential   signaling.</p> <div class="lecslide"><a name="14"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide15.png" alt=""></a></div> <p>If we’re sending digital data, does that mean we also   have to send a separate clock signal so the receiver knows when   to sample the signal to determine the next bit?</p> <p>With some cleverness, it turns out that we can recover the   timing information from the received signal assuming we know the   nominal clock period at the transmitter.  If the transmitter   changes the bit its sending at the rising edge of the   transmitter’s clock, then the receiver can use the   transitions in the received waveform to infer the timing for   some of the clock edges.</p> <p>Then the receiver can use its knowledge of the   transmitter’s nominal clock period to infer the location   of the remaining clock edges.  It does this by using a   phase-locked loop to generate a local facsimile of the   transmitter’s clock, using any received transitions to   correct the phase and period of the local clock.  The   transmitter adds a training sequence of bits at the front of   packet to ensure that the receiver’s phased-lock loop is   properly synchronized before the packet data itself is   transmitted.  A special unique bit sequence is used to separate   the training signal from the packet data so the receiver can   tell exactly where the packet data starts even if it missed a   few training bits while the clocks were being properly   synchronized.</p> <p>Once the receiver knows the timing of the clock edges, it can   then sample the incoming waveform towards the end of each clock   period to determine the transmitted bit.</p> <p>To keep the local clock in sync with the transmitter’s   clock, the incoming waveform needs to have reasonably frequent   transitions.  But if the transmitter is sending say, all zeroes,   how can we guarantee frequent-enough clock edges?</p> <p>The trick, invented by IBM, is for the transmitter to take the   stream of message bits and re-encode them into a bit stream that   is guaranteed to have transitions no matter what the message   bits are.  The most commonly used encoding is 8b10b, where 8   message bits are encoded into 10 transmitted bits, where the   encoding guarantees a transition at least every 6 bit times.  Of   course, the receiver has to reverse the 8b10b encoding to   recover the actual message bits.  Pretty neat!</p> <p>The benefit of this trick is that we truly only need to send a   single stream of bits.  The receiver will be able to recover   both the timing information and the data without also needing to   transmit a separate clock signal.</p> <div class="lecslide"><a name="15"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide16.png" alt=""></a></div> <p>Using these lessons, networks have evolved from using shared   communication channels to using point-to-point links.  Today   local-area networks use 10, 100, or 1000 BaseT wiring which   includes separate differential pairs for sending and   receiving, <i>i.e.</i>, each sending or receiving channel is   unidirectional with a single driver and single receiver.  The   network uses separate switches and routers to receive packets   from a sender and then forward the packets over a point-to-point   link to the next switch, and so on, across multiple   point-to-point links until the packet arrives at its   destination.</p> <p>System-level connections have evolved to use the same   communication strategy: point-to-point links with switches for   routing packets to their intended destination.  Note that   communication along each link is independent, so a network with   many links can actually support a lot of communication   bandwidth.  With a small amount of packet buffering in the   switches to deal with momentary contention for a particular   link, this is a very effective strategy for moving massive   amounts of information from one component to the next.</p> <p>In the next section, we’ll look at some of the more   interesting details.</p> <div class="lecslide"><a name="16"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide17.png" alt=""></a></div> <p>Serial point-to-point links are the modern replacement for the   parallel communications bus with all its electrical and timing   issues.  Each link is unidirectional and has only a single   driver and the receiver recovers the clock signal from the data   stream, so there are no complications from sharing the channel,   clock skew, and electrical problems.  The very controlled   electrical environment enables very high signaling rates, well   up into the gigahertz range using today’s   technologies.</p> <p>If more throughput is needed, you can use multiple serial links   in parallel.  Extra logic is needed to reassemble the original   data from multiple packets sent in parallel over multiple links,   but the cost of the required logic gates is very modest in   current technologies.</p> <p>Note that the expansion strategy of modern systems still uses   the notion of an add-in card that plugs into the motherboard.   But instead of connecting to a parallel bus, the add-in card   connects to one or more point-to-point communication links.</p> <div class="lecslide"><a name="17"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide18.png" alt=""></a></div> <p>Here’s the system-level communications diagram for a   recent system based on an Intel Core i7 CPU chip.  The CPU is   connected directly to the memories for the highest-possible   memory bandwidth, but talks to all the other components over the   QuickPath Interconnect (QPI), which has 20 differential   signaling paths in each direction.  QPI supports up to 6.4   billion 20-bit transfers in each direction every second.</p> <p>All the other communication channels (USB, PCIe, networks,   Serial ATA, Audio, etc.) are also serial links, providing   various communication bandwidths depending on the   application.</p> <p>Reading about the QPI channel used by the CPU reminded me a lot   of the one ring that could be used to control all of Middle   Earth in the Tolkien trilogy <i>Lord of the Rings</i>.  Why mess around   with a lot of specialized communication channels when you have a   single solution that’s powerful enough to solve all your   communication needs?</p> <div class="lecslide"><a name="18"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide19.png" alt=""></a></div> <p>PCI Express (PCIe) is often used as the communication link   between components on the system motherboard.  A single PCIe   version 2 “lane” transmits data at 5 Gb/sec using   low-voltage differential signal (LVDS) over wires designed to   have a 100-Ohm characteristic impedance.</p> <p>The PCIe lane is under the control of the same sort of network   stack as described earlier.  The physical layer transmits   packetized data through the lane.  Each packet starts with a   training sequence to synchronize the receiver’s   clock-recovery circuitry, followed by a unique start sequence,   then the packet’s data payload, and ends with a unique end   sequence.</p> <p>The physical layer payload is organized as a sequence number, a   transaction layer payload and a cyclical redundancy check   sequence that’s used to validate the data.  Using the   sequence number, the data link layer can tell when a packet has   been dropped and request the transmitter restart transmission at   the missing packet.  It also deals with flow control issues.</p> <p>Finally, the transaction layer reassembles the message from the   transaction layer payloads from all the lanes and uses the   header to identify the intended recipient at the receive   end.</p> <p>Altogether, a significant amount of logic is needed to send and   receive messages on multiple PCIe lanes, but the cost is quite   acceptable when using today’s integrated circuit   technologies.  Using 8 lanes, the maximum transfer rate is 4   GB/sec, capable of satisfying the needs of high-performance   peripherals such as graphics cards.</p> <p>So knowledge from the networking world has reshaped how   components communicate on the motherboard, driving the   transition from parallel buses to a handful of serial   point-to-point links.  As a result today’s systems are   faster, more reliable, more energy-efficient and smaller than   ever before.</p> <div class="lecslide"><a name="19"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide20.png" alt=""></a></div> <p>Let’s wrap up our discussion of system-level interconnect   by considering how best to connect N components that need to   send messages to one another, <i>e.g.</i>, CPUs on a multicore   chip.  Today such chips have a handful of cores, but soon they   may have 100s or 1000s of cores.</p> <p>We’ll build our communications network using   point-to-point links.  In our analysis, each point-to-point link   is counted at a cost of 1 hardware unit.  Sending a message   across a link requires one time unit.  And we’ll assume   that different links can operate in parallel, so more links will   mean more message traffic.</p> <p>We’ll do an asymptotic analysis of the throughput (total   messages per unit time), latency (worst-case time to deliver a   single message), and hardware cost.  In other words, we’ll   make a rough estimate how these quantities change as N   grows.</p> <p>Note that in general the throughput and hardware cost are   proportional to the number of point-to-point links.</p> <p>Our baseline is the backplane bus discussed earlier, where all   the components share a single communication channel. With only a   single channel, bus throughput is 1 message per unit time and a   message can travel between any two components in one time unit.   Since each component has to have an interface to the shared   channel, the total hardware cost is O(n).</p> <p>In a ring network each component sends its messages to a single   neighbor and the links are arranged so that its possible to   reach all components.  There are N links in total, so the   throughput and cost are both O(n).  The worst case latency is   also O(n) since a message might have to travel across N-1 links   to reach the neighbor that’s immediately upstream.  Ring   topologies are useful when message latency isn’t important   or when most messages are to the component that’s   immediately downstream, <i>i.e.</i>, the components form a   processing pipeline.</p> <div class="lecslide"><a name="20"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide21.png" alt=""></a></div> <p>The most general network topology is when every component has a   direct link to every other component.  There are O(N**2) links   so the throughput and cost are both O(N**2).  And the latency is   1 time unit since each destination is directly accessible.   Although expensive, complete graphs offer very high throughput   with very low latencies.</p> <p>A variant of the complete graph is the crossbar switch where a   particular row and column can be connected to form a link   between particular A and B components with the restriction that   each row and each column can only carry 1 message during each   time unit.  Assume that the first row and first column connect   to the same component, and so on, <i>i.e.</i>, that the example   crossbar switch is being used to connect 4 components.  Then   there are O(n) messages delivered each time unit, with a latency   of 1.  There are N**2 switches in the crossbar, so the cost is   O(N**2) even though there are only O(n) links.</p> <div class="lecslide"><a name="21"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide22.png" alt=""></a></div> <p>In mesh networks, components are connected to some fixed number   of neighboring components, in either 2- or 3-dimensions.  Hence   the total number of links is proportional to the number of   components, so both throughput and cost are O(n).  The   worst-case latencies for mesh networks are proportional to   length of the sides, so the latency is O(sqrt n) for 2D meshes   and O(cube root n) for 3D meshes.  The orderly layout, constant   per-node hardware costs, and modest worst-case latency make 2D   4-neighbor meshes a popular choice for the current generation of   experimental multi-core processors.</p> <div class="lecslide"><a name="22"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide23.png" alt=""></a></div> <p>Hypercube and tree networks offer logarithmic latencies, which   for large N may be faster than mesh networks.  The original CM-1   Connection Machine designed in the 80’s used a hypercube   network to connect up to 65,536 very simple processors, each   connected to 16 neighbors.  Later generations incorporated   smaller numbers of more sophisticated processors, still   connected by a hypercube network.  In the early 90’s the   last generation of Connection Machines used a tree network, with   the clever innovation that the links towards the root of the   tree had a higher message capacity.</p> <div class="lecslide"><a name="23"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide24.png" alt=""></a></div> <p>Here’s a summary of the theoretical latencies we   calculated for the various topologies.</p> <p>As a reality check, it’s important to realize that the   lower bound on the worst-case distance between components in our   3-dimensional world is O(cube root of N).  In the case of a 2D   layout, the worst-case distance is O(sqrt N).  Since we know   that the time to transmit a message is proportional to the   distance traveled, we should modify our latency calculations to   reflect this physical constraint.</p> <p>Note that the bus and crossbar involve N connections to a   single link, so here the lower-bound on the latency needs to   reflect the capacitive load added by each connection.</p> <p>The winner? Mesh networks avoid the need for longer wires as   the number of connected components grows and appear to be an   attractive alternative for high-capacity communication networks   connecting 1000’s of processors.</p> <div class="lecslide"><a name="24"><img class="lecslideimg" src="../../../contents/c20/c20s1/Slide25.png" alt=""></a></div> <p>Summarizing our discussion:</p> <ul>     <li>Point-to-point links are in common use today for system-level     interconnect, and as a result our systems are faster, more     reliable, more energy-efficient and smaller than ever     before.</li>     <p> </p>     <li>Multi-signal parallel buses are still used for     very-high-bandwidth connections to memories, with a lot of very     careful engineering to avoid the electrical problems observed in     earlier bus implementations.</li>     <p> </p>     <li>Wireless connections are in common use to connect mobile     devices to nearby components and there has been interesting work     on how to allow mobile devices to discover what peripherals are     nearby and enable them to connect automatically.</li>     <p> </p>     <li>The upcoming generation of multi-core chips will have     10’s to 100’s of processing cores.  There is a lot     ongoing research to determine which communication topology would     offer the best combination of high communication bandwidth and     low latency.  The next ten years will be an interesting time for     on-chip network engineers!</li> </ul> <ul class="navigation progress">     <li id="bck_btn"><a href="../../../contents/c20/index.htm">Back<span>System-level Communication</span></a></li>     <li id="continue_btn"><a href="../../../contents/c20/c20s2/index.htm">Continue<span>Topic Videos</span></a></li> </ul>
	                    
    
    
    



	        			
	                    
	                    
	                    
	                    

            		 </main><!--Course_inner_section tag close -->
           		     <div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom">
			<div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer"><div id="footer">
<nav aria-label="Footer">     <nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses">       <span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx &amp; Related OCW Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/mit-open-learning-library/">MIT Open Learning Library</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
</ul>
</nav>
<div id="foot-c2" class="grid_2"><nav aria-labelledby="f-for-educators">         <span id="f-for-educators" class="footer" aria-hidden="true">For Educators</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://chalk-radio.simplecast.com/">Chalk Radio Podcast</a></li>
    <li><a href="https://ocw.mit.edu/educator/">OCW Educator Portal </a></li>
    <li><a href="https://ocw.mit.edu/courses/instructor-insights/">Instructor Insights by Department</a></li>
    <li><a href="https://openlearning.mit.edu/campus/digital-innovations/" aria-label="External Link: Residential Digital Innovations">Residential Digital Innovations </a></li>
    <li><a href="https://ocw.mit.edu/high-school/">OCW Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/additional-resources/">Additional Resources</a></li>
</ul>
</nav></div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate">       <span id="f-donate" class="footer" aria-hidden="true">Give Now</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/give/">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/give/why-give/">Why Give?</a></li>
    <li><a href="https://ocw.mit.edu/give/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/give/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul>
</nav>
<div class="grid_2" id="foot-c4">
<nav aria-labelledby="f-about">         <span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">Newsletter</a></li>
    <li><a href="https://www.ocw-openmatters.org/">Open Matters Blog</a></li>
</ul>
</nav><!--about-->       <nav aria-labelledby="f-tools">         <span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
    <li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="https://ocw.mit.edu/about/contactus">Contact Us</a></li>
    <li><a href="https://accessibility.mit.edu/" target="_blank">Accessibility</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul>
</nav><!--tools-->
</div>
</nav> <aside style="min-height: 289px;" aria-labelledby="f-our-corporate-supporters" class="grid_4 omega" id="foot-c5">           <span aria-hidden="true" class="footer" id="f-our-corporate-supporters">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div id="div-gpt-ad-1388181177156-0" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div id="div-gpt-ad-1388181177156-1" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div id="div-gpt-ad-1388181177156-2" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div id="div-gpt-ad-1388181177156-3" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div id="div-gpt-ad-1388181177156-4" class="sponsors_google_ads_even"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div id="div-gpt-ad-1388181177156-5" class="sponsors_google_ads_odd"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside>
<div class="grid_12 alpha omega" itemprop="publisher" itemscope="" itemtype="http://schema.org/CollegeOrUniversity">
<h4 class="footer" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;">About <span itemprop="name">MIT OpenCourseWare</span>
</h4>
<p style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;" itemprop="description">MIT OpenCourseWare is an online publication of materials from over 2,500 MIT courses, freely sharing knowledge with learners and educators around the world. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
</div>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu"><img src="../../../common/images/logo_mit.png" alt="Massachusetts Institute of Technology logo and name." style="width: 195; height: 44;"></a><a href="https://openlearning.mit.edu/"><img src="https://ocw.mit.edu/images/mitol_logo.png" alt="MIT Open Learning logo and name." style="width: 265; height: 50; vertical-align: top; padding-left:30px;"></a><a href="https://www.oeglobal.org/"><img src="https://ocw.mit.edu/images/oeg_logo.gif" alt="Open Education Consortium logo." style="width: 219px; height: 59px; vertical-align: top; padding-left:20px;"></a><a rel="license" itemprop="useRightsUrl" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="../../../common/images/cc_by-nc-sa.png" alt="Creative Commons logo with terms BY-NC-SA." style="width: 126px; height: 44px; margin-right: 0; padding-left: 20px;"></a>
<p class="copyright">© 2001–2018<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="license">Creative Commons License</a> and other <a href="../../../common/terms/index.htm" rel="cc:morePermissions">terms of use</a>.</p>
</div>
</div></div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->


   </body>
 </html>
